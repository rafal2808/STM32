
RFID_F411_v0_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2e4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800a47c  0800a47c  0000b47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5f4  0800a5f4  0000c120  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5f4  0800a5f4  0000b5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5fc  0800a5fc  0000c120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5fc  0800a5fc  0000b5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a600  0800a600  0000b600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000120  20000000  0800a604  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f00  20000120  0800a724  0000c120  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  20002020  0800a724  0000d020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018dff  00000000  00000000  0000c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000430f  00000000  00000000  00024f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  00029260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa2  00000000  00000000  0002a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5b2  00000000  00000000  0002b67a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dccc  00000000  00000000  00045c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008edbd  00000000  00000000  000638f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f26b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053ac  00000000  00000000  000f26f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f7aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000120 	.word	0x20000120
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a464 	.word	0x0800a464

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000124 	.word	0x20000124
 80001d4:	0800a464 	.word	0x0800a464

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	4b10      	ldr	r3, [pc, #64]	@ (8000538 <MX_DMA_Init+0x4c>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000538 <MX_DMA_Init+0x4c>)
 80004fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000500:	6313      	str	r3, [r2, #48]	@ 0x30
 8000502:	4b0d      	ldr	r3, [pc, #52]	@ (8000538 <MX_DMA_Init+0x4c>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	2039      	movs	r0, #57	@ 0x39
 8000514:	f001 fe0b 	bl	800212e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000518:	2039      	movs	r0, #57	@ 0x39
 800051a:	f001 fe24 	bl	8002166 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	2045      	movs	r0, #69	@ 0x45
 8000524:	f001 fe03 	bl	800212e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000528:	2045      	movs	r0, #69	@ 0x45
 800052a:	f001 fe1c 	bl	8002166 <HAL_NVIC_EnableIRQ>

}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40023800 	.word	0x40023800

0800053c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	@ 0x28
 8000540:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
 8000556:	4b60      	ldr	r3, [pc, #384]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a5f      	ldr	r2, [pc, #380]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 800055c:	f043 0304 	orr.w	r3, r3, #4
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b5d      	ldr	r3, [pc, #372]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	4b59      	ldr	r3, [pc, #356]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	4a58      	ldr	r2, [pc, #352]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 8000578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800057c:	6313      	str	r3, [r2, #48]	@ 0x30
 800057e:	4b56      	ldr	r3, [pc, #344]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	4b52      	ldr	r3, [pc, #328]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	4a51      	ldr	r2, [pc, #324]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6313      	str	r3, [r2, #48]	@ 0x30
 800059a:	4b4f      	ldr	r3, [pc, #316]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4b4b      	ldr	r3, [pc, #300]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a4a      	ldr	r2, [pc, #296]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 80005b0:	f043 0302 	orr.w	r3, r3, #2
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b48      	ldr	r3, [pc, #288]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0302 	and.w	r3, r3, #2
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	4b44      	ldr	r3, [pc, #272]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a43      	ldr	r2, [pc, #268]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 80005cc:	f043 0308 	orr.w	r3, r3, #8
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b41      	ldr	r3, [pc, #260]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0308 	and.w	r3, r3, #8
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|BL1_Pin|ST_BLUE_Pin|ST_GREEN_Pin
 80005de:	2200      	movs	r2, #0
 80005e0:	f643 4110 	movw	r1, #15376	@ 0x3c10
 80005e4:	483d      	ldr	r0, [pc, #244]	@ (80006dc <MX_GPIO_Init+0x1a0>)
 80005e6:	f002 faf1 	bl	8002bcc <HAL_GPIO_WritePin>
                          |ST_YELLOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|Hirata_NG_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f248 0110 	movw	r1, #32784	@ 0x8010
 80005f0:	483b      	ldr	r0, [pc, #236]	@ (80006e0 <MX_GPIO_Init+0x1a4>)
 80005f2:	f002 faeb 	bl	8002bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|D32_Pin|BL2_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f243 0101 	movw	r1, #12289	@ 0x3001
 80005fc:	4839      	ldr	r0, [pc, #228]	@ (80006e4 <MX_GPIO_Init+0x1a8>)
 80005fe:	f002 fae5 	bl	8002bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST_RED_GPIO_Port, ST_RED_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2104      	movs	r1, #4
 8000606:	4838      	ldr	r0, [pc, #224]	@ (80006e8 <MX_GPIO_Init+0x1ac>)
 8000608:	f002 fae0 	bl	8002bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 BL1_Pin ST_BLUE_Pin ST_GREEN_Pin
                           ST_YELLOW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|BL1_Pin|ST_BLUE_Pin|ST_GREEN_Pin
 800060c:	f643 4310 	movw	r3, #15376	@ 0x3c10
 8000610:	617b      	str	r3, [r7, #20]
                          |ST_YELLOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	482d      	ldr	r0, [pc, #180]	@ (80006dc <MX_GPIO_Init+0x1a0>)
 8000626:	f002 f935 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : P_Sensor_Pin PASS_SW_Pin */
  GPIO_InitStruct.Pin = P_Sensor_Pin|PASS_SW_Pin;
 800062a:	2303      	movs	r3, #3
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	4828      	ldr	r0, [pc, #160]	@ (80006e0 <MX_GPIO_Init+0x1a4>)
 800063e:	f002 f929 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000642:	2310      	movs	r3, #16
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	4821      	ldr	r0, [pc, #132]	@ (80006e0 <MX_GPIO_Init+0x1a4>)
 800065a:	f002 f91b 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 D32_Pin BL2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|D32_Pin|BL2_Pin;
 800065e:	f243 0301 	movw	r3, #12289	@ 0x3001
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	481b      	ldr	r0, [pc, #108]	@ (80006e4 <MX_GPIO_Init+0x1a8>)
 8000678:	f002 f90c 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDR4_Pin ADDR3_Pin ADDR2_Pin ADDR1_Pin
                           ADDR0_Pin */
  GPIO_InitStruct.Pin = ADDR4_Pin|ADDR3_Pin|ADDR2_Pin|ADDR1_Pin
 800067c:	f44f 734d 	mov.w	r3, #820	@ 0x334
 8000680:	617b      	str	r3, [r7, #20]
                          |ADDR0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	4814      	ldr	r0, [pc, #80]	@ (80006e4 <MX_GPIO_Init+0x1a8>)
 8000692:	f002 f8ff 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pin : Hirata_NG_Pin */
  GPIO_InitStruct.Pin = Hirata_NG_Pin;
 8000696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Hirata_NG_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	480c      	ldr	r0, [pc, #48]	@ (80006e0 <MX_GPIO_Init+0x1a4>)
 80006b0:	f002 f8f0 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST_RED_Pin */
  GPIO_InitStruct.Pin = ST_RED_Pin;
 80006b4:	2304      	movs	r3, #4
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST_RED_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	4807      	ldr	r0, [pc, #28]	@ (80006e8 <MX_GPIO_Init+0x1ac>)
 80006cc:	f002 f8e2 	bl	8002894 <HAL_GPIO_Init>

}
 80006d0:	bf00      	nop
 80006d2:	3728      	adds	r7, #40	@ 0x28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40020000 	.word	0x40020000
 80006e4:	40020400 	.word	0x40020400
 80006e8:	40020c00 	.word	0x40020c00

080006ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <MX_I2C1_Init+0x50>)
 80006f2:	4a13      	ldr	r2, [pc, #76]	@ (8000740 <MX_I2C1_Init+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_I2C1_Init+0x50>)
 80006f8:	4a12      	ldr	r2, [pc, #72]	@ (8000744 <MX_I2C1_Init+0x58>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_I2C1_Init+0x50>)
 800070a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	@ (800073c <MX_I2C1_Init+0x50>)
 800072a:	f002 fa69 	bl	8002c00 <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 fc80 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000013c 	.word	0x2000013c
 8000740:	40005400 	.word	0x40005400
 8000744:	000186a0 	.word	0x000186a0

08000748 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	@ 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a19      	ldr	r2, [pc, #100]	@ (80007cc <HAL_I2C_MspInit+0x84>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d12b      	bne.n	80007c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a17      	ldr	r2, [pc, #92]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000786:	23c0      	movs	r3, #192	@ 0xc0
 8000788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800078a:	2312      	movs	r3, #18
 800078c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000796:	2304      	movs	r3, #4
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <HAL_I2C_MspInit+0x8c>)
 80007a2:	f002 f877 	bl	8002894 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ae:	4a08      	ldr	r2, [pc, #32]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 80007b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	@ 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40005400 	.word	0x40005400
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020400 	.word	0x40020400

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007dc:	f001 fb36 	bl	8001e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e0:	f000 f872 	bl	80008c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e4:	f7ff feaa 	bl	800053c <MX_GPIO_Init>
  MX_DMA_Init();
 80007e8:	f7ff fe80 	bl	80004ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007ec:	f001 f990 	bl	8001b10 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80007f0:	f001 f84e 	bl	8001890 <MX_SPI1_Init>
  MX_I2C1_Init();
 80007f4:	f7ff ff7a 	bl	80006ec <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80007f8:	f001 f960 	bl	8001abc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80007fc:	f001 f9b2 	bl	8001b64 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 8000800:	f009 f8aa 	bl	8009958 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  //ledy wylaczone
  HAL_GPIO_WritePin(ST_RED_GPIO_Port, ST_RED_Pin, GPIO_PIN_SET);	//error
 8000804:	2201      	movs	r2, #1
 8000806:	2104      	movs	r1, #4
 8000808:	4823      	ldr	r0, [pc, #140]	@ (8000898 <main+0xc0>)
 800080a:	f002 f9df 	bl	8002bcc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(ST_BLUE_GPIO_Port, ST_BLUE_Pin, GPIO_PIN_SET);	//other
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000814:	4821      	ldr	r0, [pc, #132]	@ (800089c <main+0xc4>)
 8000816:	f002 f9d9 	bl	8002bcc <HAL_GPIO_WritePin>

  UART_Log("RFID ver. 0.3\n\r");
 800081a:	4821      	ldr	r0, [pc, #132]	@ (80008a0 <main+0xc8>)
 800081c:	f000 f8ec 	bl	80009f8 <UART_Log>
  ADDR_Check();
 8000820:	f000 f98a 	bl	8000b38 <ADDR_Check>
  send_buffer[3] = slave_addr[0];
 8000824:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <main+0xcc>)
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	4b1f      	ldr	r3, [pc, #124]	@ (80008a8 <main+0xd0>)
 800082a:	70da      	strb	r2, [r3, #3]
  send_buffer[4] = slave_addr[1];
 800082c:	4b1d      	ldr	r3, [pc, #116]	@ (80008a4 <main+0xcc>)
 800082e:	785a      	ldrb	r2, [r3, #1]
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <main+0xd0>)
 8000832:	711a      	strb	r2, [r3, #4]
  HAL_Delay(1500);
 8000834:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000838:	f001 fb7a 	bl	8001f30 <HAL_Delay>

  HAL_GPIO_WritePin(ST_RED_GPIO_Port, ST_RED_Pin, GPIO_PIN_RESET);	//error
 800083c:	2200      	movs	r2, #0
 800083e:	2104      	movs	r1, #4
 8000840:	4815      	ldr	r0, [pc, #84]	@ (8000898 <main+0xc0>)
 8000842:	f002 f9c3 	bl	8002bcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ST_BLUE_GPIO_Port, ST_BLUE_Pin, GPIO_PIN_RESET);	//other
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800084c:	4813      	ldr	r0, [pc, #76]	@ (800089c <main+0xc4>)
 800084e:	f002 f9bd 	bl	8002bcc <HAL_GPIO_WritePin>



  //send_status_buffer = "AT_00_"

  HAL_UART_Receive_IT(&huart6, &rx_data_temp, 1);
 8000852:	2201      	movs	r2, #1
 8000854:	4915      	ldr	r1, [pc, #84]	@ (80008ac <main+0xd4>)
 8000856:	4816      	ldr	r0, [pc, #88]	@ (80008b0 <main+0xd8>)
 8000858:	f004 fde9 	bl	800542e <HAL_UART_Receive_IT>
  //send_buffer[24] = ('\n');
  UART_Log("INIT OK...\n\r");
 800085c:	4815      	ldr	r0, [pc, #84]	@ (80008b4 <main+0xdc>)
 800085e:	f000 f8cb 	bl	80009f8 <UART_Log>
	  //if(sw_pass_s == true)
	  //{
		  //pass
		  //HAL_UART_Receive_DMA(&huart6, &rx_data, 4);
		  //UART_Log("SW_PASS status = PASS\n\r");
		  send_buffer[6] = 'P';
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <main+0xd0>)
 8000864:	2250      	movs	r2, #80	@ 0x50
 8000866:	719a      	strb	r2, [r3, #6]
		  read_flag = 1;
 8000868:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <main+0xe0>)
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
		  RFID_Read();
 800086e:	f000 f8ef 	bl	8000a50 <RFID_Read>
			 // {
				//  sw_status = 0; //BYPASS
				 // send_buffer[6] = 'B';
				 // UART_Log("SW_PASS status = BYPASS\n\r");

				  if(ReceviedLines > 0)
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <main+0xe4>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0f3      	beq.n	8000862 <main+0x8a>
				 	  {
				 		  // Take one line from the Ring Buffer to work-buffer
				 		  Parser_TakeLine(&rx_data, ReceivedData);
 800087a:	4911      	ldr	r1, [pc, #68]	@ (80008c0 <main+0xe8>)
 800087c:	4811      	ldr	r0, [pc, #68]	@ (80008c4 <main+0xec>)
 800087e:	f000 fc0d 	bl	800109c <Parser_TakeLine>

				 		  // Decrement complete lines counter
				 		  ReceviedLines--;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <main+0xe4>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	3b01      	subs	r3, #1
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <main+0xe4>)
 800088c:	701a      	strb	r2, [r3, #0]

				 		  // Run the parser with work-buffer
				 		  Parser_Parse(ReceivedData);
 800088e:	480c      	ldr	r0, [pc, #48]	@ (80008c0 <main+0xe8>)
 8000890:	f000 fc2a 	bl	80010e8 <Parser_Parse>
		  send_buffer[6] = 'P';
 8000894:	e7e5      	b.n	8000862 <main+0x8a>
 8000896:	bf00      	nop
 8000898:	40020c00 	.word	0x40020c00
 800089c:	40020800 	.word	0x40020800
 80008a0:	0800a47c 	.word	0x0800a47c
 80008a4:	200001c0 	.word	0x200001c0
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000204 	.word	0x20000204
 80008b0:	20000330 	.word	0x20000330
 80008b4:	0800a48c 	.word	0x0800a48c
 80008b8:	20000006 	.word	0x20000006
 80008bc:	20000205 	.word	0x20000205
 80008c0:	20000208 	.word	0x20000208
 80008c4:	200001c4 	.word	0x200001c4

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b094      	sub	sp, #80	@ 0x50
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	2230      	movs	r2, #48	@ 0x30
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f009 fd86 	bl	800a3e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	4b27      	ldr	r3, [pc, #156]	@ (8000990 <SystemClock_Config+0xc8>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f4:	4a26      	ldr	r2, [pc, #152]	@ (8000990 <SystemClock_Config+0xc8>)
 80008f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fc:	4b24      	ldr	r3, [pc, #144]	@ (8000990 <SystemClock_Config+0xc8>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	4b21      	ldr	r3, [pc, #132]	@ (8000994 <SystemClock_Config+0xcc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a20      	ldr	r2, [pc, #128]	@ (8000994 <SystemClock_Config+0xcc>)
 8000912:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b1e      	ldr	r3, [pc, #120]	@ (8000994 <SystemClock_Config+0xcc>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000928:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000932:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000936:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000938:	2304      	movs	r3, #4
 800093a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800093c:	23a8      	movs	r3, #168	@ 0xa8
 800093e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000940:	2304      	movs	r3, #4
 8000942:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000944:	2307      	movs	r3, #7
 8000946:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000948:	f107 0320 	add.w	r3, r7, #32
 800094c:	4618      	mov	r0, r3
 800094e:	f003 fced 	bl	800432c <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000958:	f000 fb6e 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095c:	230f      	movs	r3, #15
 800095e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000960:	2302      	movs	r3, #2
 8000962:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800096c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	2102      	movs	r1, #2
 8000978:	4618      	mov	r0, r3
 800097a:	f003 ff4f 	bl	800481c <HAL_RCC_ClockConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000984:	f000 fb58 	bl	8001038 <Error_Handler>
  }
}
 8000988:	bf00      	nop
 800098a:	3750      	adds	r7, #80	@ 0x50
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART6)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0f      	ldr	r2, [pc, #60]	@ (80009e4 <HAL_UART_RxCpltCallback+0x4c>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d117      	bne.n	80009da <HAL_UART_RxCpltCallback+0x42>
		//RB_Write(&rx_data, rx_data_temp);
		//HAL_UART_Receive_IT(&huart6, &rx_data_temp, 1);


		// Try to write into the Ring Buffer
		if(RB_OK == RB_Write(&rx_data, rx_data_temp))
 80009aa:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <HAL_UART_RxCpltCallback+0x50>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	4619      	mov	r1, r3
 80009b0:	480e      	ldr	r0, [pc, #56]	@ (80009ec <HAL_UART_RxCpltCallback+0x54>)
 80009b2:	f000 ff32 	bl	800181a <RB_Write>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d109      	bne.n	80009d0 <HAL_UART_RxCpltCallback+0x38>
		{
			// Check if current byte is the endline char
			if(rx_data_temp == ENDLINE)
 80009bc:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <HAL_UART_RxCpltCallback+0x50>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b0a      	cmp	r3, #10
 80009c2:	d105      	bne.n	80009d0 <HAL_UART_RxCpltCallback+0x38>
			{
				// Increment complete lines
				ReceviedLines++;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <HAL_UART_RxCpltCallback+0x58>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <HAL_UART_RxCpltCallback+0x58>)
 80009ce:	701a      	strb	r2, [r3, #0]
		//if(rx_data[31] != 0)
		//{
		//	RB_Flush(&rx_data);
		//}
		// Start to listening UART again - important!
		HAL_UART_Receive_IT(&huart6, &rx_data_temp, 1);
 80009d0:	2201      	movs	r2, #1
 80009d2:	4905      	ldr	r1, [pc, #20]	@ (80009e8 <HAL_UART_RxCpltCallback+0x50>)
 80009d4:	4807      	ldr	r0, [pc, #28]	@ (80009f4 <HAL_UART_RxCpltCallback+0x5c>)
 80009d6:	f004 fd2a 	bl	800542e <HAL_UART_Receive_IT>


	}
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40011400 	.word	0x40011400
 80009e8:	20000204 	.word	0x20000204
 80009ec:	200001c4 	.word	0x200001c4
 80009f0:	20000205 	.word	0x20000205
 80009f4:	20000330 	.word	0x20000330

080009f8 <UART_Log>:

void UART_Log(char* Message1)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)Message1, strlen(Message1), 1000);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff fbf3 	bl	80001ec <strlen>
 8000a06:	4603      	mov	r3, r0
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	4803      	ldr	r0, [pc, #12]	@ (8000a20 <UART_Log+0x28>)
 8000a12:	f004 fc81 	bl	8005318 <HAL_UART_Transmit>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200002e8 	.word	0x200002e8

08000a24 <RS_Transmit>:


void RS_Transmit(char* Message)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit_IT(&huart6, (uint8_t*)Message, strlen(Message));
	HAL_UART_Transmit(&huart6, (uint8_t*)Message, strlen(Message), 1000);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff fbdd 	bl	80001ec <strlen>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	4803      	ldr	r0, [pc, #12]	@ (8000a4c <RS_Transmit+0x28>)
 8000a3e:	f004 fc6b 	bl	8005318 <HAL_UART_Transmit>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000330 	.word	0x20000330

08000a50 <RFID_Read>:


void RFID_Read()
{
 8000a50:	b598      	push	{r3, r4, r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	  MFRC522_Init();
 8000a54:	f000 fc2a 	bl	80012ac <MFRC522_Init>
	  	HAL_Delay(5);
 8000a58:	2005      	movs	r0, #5
 8000a5a:	f001 fa69 	bl	8001f30 <HAL_Delay>
	request_status = MFRC522_Request(PICC_REQIDL, str);
 8000a5e:	492b      	ldr	r1, [pc, #172]	@ (8000b0c <RFID_Read+0xbc>)
 8000a60:	2026      	movs	r0, #38	@ 0x26
 8000a62:	f000 fd1a 	bl	800149a <MFRC522_Request>
 8000a66:	4603      	mov	r3, r0
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b29      	ldr	r3, [pc, #164]	@ (8000b10 <RFID_Read+0xc0>)
 8000a6c:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(5);

	if(request_status == 0){
 8000a6e:	4b28      	ldr	r3, [pc, #160]	@ (8000b10 <RFID_Read+0xc0>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d148      	bne.n	8000b08 <RFID_Read+0xb8>
		request_status = 2;
 8000a76:	4b26      	ldr	r3, [pc, #152]	@ (8000b10 <RFID_Read+0xc0>)
 8000a78:	2202      	movs	r2, #2
 8000a7a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(ST_BLUE_GPIO_Port, ST_BLUE_Pin, GPIO_PIN_SET);	//other
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a82:	4824      	ldr	r0, [pc, #144]	@ (8000b14 <RFID_Read+0xc4>)
 8000a84:	f002 f8a2 	bl	8002bcc <HAL_GPIO_WritePin>
		//HAL_Delay(5);
	anticoll_status = MFRC522_Anticoll(str);
 8000a88:	4820      	ldr	r0, [pc, #128]	@ (8000b0c <RFID_Read+0xbc>)
 8000a8a:	f000 fd2b 	bl	80014e4 <MFRC522_Anticoll>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b21      	ldr	r3, [pc, #132]	@ (8000b18 <RFID_Read+0xc8>)
 8000a94:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(5);
	selecttag_status = MFRC522_SelectTag(str);
 8000a96:	481d      	ldr	r0, [pc, #116]	@ (8000b0c <RFID_Read+0xbc>)
 8000a98:	f000 fdaa 	bl	80015f0 <MFRC522_SelectTag>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b1c <RFID_Read+0xcc>)
 8000aa2:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(5);

	auth_status = MFRC522_Auth(0x60,20,sectorkey,str);
 8000aa4:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <RFID_Read+0xbc>)
 8000aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b20 <RFID_Read+0xd0>)
 8000aa8:	2114      	movs	r1, #20
 8000aaa:	2060      	movs	r0, #96	@ 0x60
 8000aac:	f000 fde2 	bl	8001674 <MFRC522_Auth>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <RFID_Read+0xd4>)
 8000ab6:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(5);

	//if(auth_status == 0){
	read_status = MFRC522_Read(20, rec);
 8000ab8:	491b      	ldr	r1, [pc, #108]	@ (8000b28 <RFID_Read+0xd8>)
 8000aba:	2014      	movs	r0, #20
 8000abc:	f000 fe3d 	bl	800173a <MFRC522_Read>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <RFID_Read+0xdc>)
 8000ac6:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(5);
	MFRC522_Halt();
 8000ac8:	f000 fe63 	bl	8001792 <MFRC522_Halt>



	//if(read_status == 0)
	//	{
		 HAL_GPIO_WritePin(ST_BLUE_GPIO_Port, ST_BLUE_Pin, GPIO_PIN_SET);	//other
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ad2:	4810      	ldr	r0, [pc, #64]	@ (8000b14 <RFID_Read+0xc4>)
 8000ad4:	f002 f87a 	bl	8002bcc <HAL_GPIO_WritePin>
			memcpy(rec_data, rec, 14);
 8000ad8:	4a15      	ldr	r2, [pc, #84]	@ (8000b30 <RFID_Read+0xe0>)
 8000ada:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <RFID_Read+0xd8>)
 8000adc:	4614      	mov	r4, r2
 8000ade:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ae0:	c407      	stmia	r4!, {r0, r1, r2}
 8000ae2:	8023      	strh	r3, [r4, #0]
			//UART_Log("Read Tag: ");
			//UART_Log(rec_data);
			//UART_Log("\n\r");

			send_buffer[20] = rec_data[10];
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <RFID_Read+0xe0>)
 8000ae6:	7a9a      	ldrb	r2, [r3, #10]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <RFID_Read+0xe4>)
 8000aea:	751a      	strb	r2, [r3, #20]
			send_buffer[22] = rec_data[12];
 8000aec:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <RFID_Read+0xe0>)
 8000aee:	7b1a      	ldrb	r2, [r3, #12]
 8000af0:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <RFID_Read+0xe4>)
 8000af2:	759a      	strb	r2, [r3, #22]
			send_buffer[23] = rec_data[13];
 8000af4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <RFID_Read+0xe0>)
 8000af6:	7b5a      	ldrb	r2, [r3, #13]
 8000af8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <RFID_Read+0xe4>)
 8000afa:	75da      	strb	r2, [r3, #23]
//			send_buffer[12] = rec_data[10];
//			send_buffer[13] = rec_data[11];
//			send_buffer[14] = rec_data[12];
//			send_buffer[15] = rec_data[13];
			// HAL_GPIO_WritePin(ST_BLUE_GPIO_Port, ST_BLUE_Pin, GPIO_PIN_RESET);	//other
			HAL_GPIO_WritePin(ST_BLUE_GPIO_Port, ST_BLUE_Pin, GPIO_PIN_RESET);	//other
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b02:	4804      	ldr	r0, [pc, #16]	@ (8000b14 <RFID_Read+0xc4>)
 8000b04:	f002 f862 	bl	8002bcc <HAL_GPIO_WritePin>
		}
	//MFRC522_Halt();
		//HAL_Delay(1);

}
 8000b08:	bf00      	nop
 8000b0a:	bd98      	pop	{r3, r4, r7, pc}
 8000b0c:	20000198 	.word	0x20000198
 8000b10:	20000190 	.word	0x20000190
 8000b14:	40020800 	.word	0x40020800
 8000b18:	20000191 	.word	0x20000191
 8000b1c:	20000192 	.word	0x20000192
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000193 	.word	0x20000193
 8000b28:	2000019c 	.word	0x2000019c
 8000b2c:	20000194 	.word	0x20000194
 8000b30:	200001ac 	.word	0x200001ac
 8000b34:	20000008 	.word	0x20000008

08000b38 <ADDR_Check>:

void ADDR_Check()
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	  addr_d[0] = HAL_GPIO_ReadPin(ADDR0_GPIO_Port, ADDR0_Pin);
 8000b3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b40:	4891      	ldr	r0, [pc, #580]	@ (8000d88 <ADDR_Check+0x250>)
 8000b42:	f002 f82b 	bl	8002b9c <HAL_GPIO_ReadPin>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf14      	ite	ne
 8000b4c:	2301      	movne	r3, #1
 8000b4e:	2300      	moveq	r3, #0
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4b8e      	ldr	r3, [pc, #568]	@ (8000d8c <ADDR_Check+0x254>)
 8000b54:	701a      	strb	r2, [r3, #0]
	  addr_d[1] = HAL_GPIO_ReadPin(ADDR1_GPIO_Port, ADDR1_Pin);
 8000b56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b5a:	488b      	ldr	r0, [pc, #556]	@ (8000d88 <ADDR_Check+0x250>)
 8000b5c:	f002 f81e 	bl	8002b9c <HAL_GPIO_ReadPin>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	bf14      	ite	ne
 8000b66:	2301      	movne	r3, #1
 8000b68:	2300      	moveq	r3, #0
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	4b87      	ldr	r3, [pc, #540]	@ (8000d8c <ADDR_Check+0x254>)
 8000b6e:	705a      	strb	r2, [r3, #1]
	  addr_d[2] = HAL_GPIO_ReadPin(ADDR2_GPIO_Port, ADDR2_Pin);
 8000b70:	2120      	movs	r1, #32
 8000b72:	4885      	ldr	r0, [pc, #532]	@ (8000d88 <ADDR_Check+0x250>)
 8000b74:	f002 f812 	bl	8002b9c <HAL_GPIO_ReadPin>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	bf14      	ite	ne
 8000b7e:	2301      	movne	r3, #1
 8000b80:	2300      	moveq	r3, #0
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b81      	ldr	r3, [pc, #516]	@ (8000d8c <ADDR_Check+0x254>)
 8000b86:	709a      	strb	r2, [r3, #2]
	  addr_d[3] = HAL_GPIO_ReadPin(ADDR3_GPIO_Port, ADDR3_Pin);
 8000b88:	2110      	movs	r1, #16
 8000b8a:	487f      	ldr	r0, [pc, #508]	@ (8000d88 <ADDR_Check+0x250>)
 8000b8c:	f002 f806 	bl	8002b9c <HAL_GPIO_ReadPin>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	bf14      	ite	ne
 8000b96:	2301      	movne	r3, #1
 8000b98:	2300      	moveq	r3, #0
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b7b      	ldr	r3, [pc, #492]	@ (8000d8c <ADDR_Check+0x254>)
 8000b9e:	70da      	strb	r2, [r3, #3]

	  UART_Log("Addr: ");
 8000ba0:	487b      	ldr	r0, [pc, #492]	@ (8000d90 <ADDR_Check+0x258>)
 8000ba2:	f7ff ff29 	bl	80009f8 <UART_Log>

	  if(addr_d[0] == liczba0[3] && addr_d[1] == liczba0[2] && addr_d[2] == liczba0[1] && addr_d[3] == liczba0[0])
 8000ba6:	4b79      	ldr	r3, [pc, #484]	@ (8000d8c <ADDR_Check+0x254>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2200      	movs	r2, #0
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d118      	bne.n	8000be2 <ADDR_Check+0xaa>
 8000bb0:	4b76      	ldr	r3, [pc, #472]	@ (8000d8c <ADDR_Check+0x254>)
 8000bb2:	785b      	ldrb	r3, [r3, #1]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d113      	bne.n	8000be2 <ADDR_Check+0xaa>
 8000bba:	4b74      	ldr	r3, [pc, #464]	@ (8000d8c <ADDR_Check+0x254>)
 8000bbc:	789b      	ldrb	r3, [r3, #2]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d10e      	bne.n	8000be2 <ADDR_Check+0xaa>
 8000bc4:	4b71      	ldr	r3, [pc, #452]	@ (8000d8c <ADDR_Check+0x254>)
 8000bc6:	78db      	ldrb	r3, [r3, #3]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d109      	bne.n	8000be2 <ADDR_Check+0xaa>
	  {
		  slave_addr[0] = '0';
 8000bce:	4b71      	ldr	r3, [pc, #452]	@ (8000d94 <ADDR_Check+0x25c>)
 8000bd0:	2230      	movs	r2, #48	@ 0x30
 8000bd2:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '0';
 8000bd4:	4b6f      	ldr	r3, [pc, #444]	@ (8000d94 <ADDR_Check+0x25c>)
 8000bd6:	2230      	movs	r2, #48	@ 0x30
 8000bd8:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x00");
 8000bda:	486f      	ldr	r0, [pc, #444]	@ (8000d98 <ADDR_Check+0x260>)
 8000bdc:	f7ff ff0c 	bl	80009f8 <UART_Log>
 8000be0:	e206      	b.n	8000ff0 <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba1[3] && addr_d[1] == liczba1[2] && addr_d[2] == liczba1[1] && addr_d[3] == liczba1[0])
 8000be2:	4b6a      	ldr	r3, [pc, #424]	@ (8000d8c <ADDR_Check+0x254>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2201      	movs	r2, #1
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d118      	bne.n	8000c1e <ADDR_Check+0xe6>
 8000bec:	4b67      	ldr	r3, [pc, #412]	@ (8000d8c <ADDR_Check+0x254>)
 8000bee:	785b      	ldrb	r3, [r3, #1]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d113      	bne.n	8000c1e <ADDR_Check+0xe6>
 8000bf6:	4b65      	ldr	r3, [pc, #404]	@ (8000d8c <ADDR_Check+0x254>)
 8000bf8:	789b      	ldrb	r3, [r3, #2]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d10e      	bne.n	8000c1e <ADDR_Check+0xe6>
 8000c00:	4b62      	ldr	r3, [pc, #392]	@ (8000d8c <ADDR_Check+0x254>)
 8000c02:	78db      	ldrb	r3, [r3, #3]
 8000c04:	2200      	movs	r2, #0
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d109      	bne.n	8000c1e <ADDR_Check+0xe6>
	  {
		  slave_addr[0] = '0';
 8000c0a:	4b62      	ldr	r3, [pc, #392]	@ (8000d94 <ADDR_Check+0x25c>)
 8000c0c:	2230      	movs	r2, #48	@ 0x30
 8000c0e:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '1';
 8000c10:	4b60      	ldr	r3, [pc, #384]	@ (8000d94 <ADDR_Check+0x25c>)
 8000c12:	2231      	movs	r2, #49	@ 0x31
 8000c14:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x01");
 8000c16:	4861      	ldr	r0, [pc, #388]	@ (8000d9c <ADDR_Check+0x264>)
 8000c18:	f7ff feee 	bl	80009f8 <UART_Log>
 8000c1c:	e1e8      	b.n	8000ff0 <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba2[3] && addr_d[1] == liczba2[2] && addr_d[2] == liczba2[1] && addr_d[3] == liczba2[0])
 8000c1e:	4b5b      	ldr	r3, [pc, #364]	@ (8000d8c <ADDR_Check+0x254>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2200      	movs	r2, #0
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d118      	bne.n	8000c5a <ADDR_Check+0x122>
 8000c28:	4b58      	ldr	r3, [pc, #352]	@ (8000d8c <ADDR_Check+0x254>)
 8000c2a:	785b      	ldrb	r3, [r3, #1]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d113      	bne.n	8000c5a <ADDR_Check+0x122>
 8000c32:	4b56      	ldr	r3, [pc, #344]	@ (8000d8c <ADDR_Check+0x254>)
 8000c34:	789b      	ldrb	r3, [r3, #2]
 8000c36:	2200      	movs	r2, #0
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d10e      	bne.n	8000c5a <ADDR_Check+0x122>
 8000c3c:	4b53      	ldr	r3, [pc, #332]	@ (8000d8c <ADDR_Check+0x254>)
 8000c3e:	78db      	ldrb	r3, [r3, #3]
 8000c40:	2200      	movs	r2, #0
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d109      	bne.n	8000c5a <ADDR_Check+0x122>
	  {
		  slave_addr[0] = '0';
 8000c46:	4b53      	ldr	r3, [pc, #332]	@ (8000d94 <ADDR_Check+0x25c>)
 8000c48:	2230      	movs	r2, #48	@ 0x30
 8000c4a:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '2';
 8000c4c:	4b51      	ldr	r3, [pc, #324]	@ (8000d94 <ADDR_Check+0x25c>)
 8000c4e:	2232      	movs	r2, #50	@ 0x32
 8000c50:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x02");
 8000c52:	4853      	ldr	r0, [pc, #332]	@ (8000da0 <ADDR_Check+0x268>)
 8000c54:	f7ff fed0 	bl	80009f8 <UART_Log>
 8000c58:	e1ca      	b.n	8000ff0 <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba3[3] && addr_d[1] == liczba3[2] && addr_d[2] == liczba3[1] && addr_d[3] == liczba3[0])
 8000c5a:	4b4c      	ldr	r3, [pc, #304]	@ (8000d8c <ADDR_Check+0x254>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d118      	bne.n	8000c96 <ADDR_Check+0x15e>
 8000c64:	4b49      	ldr	r3, [pc, #292]	@ (8000d8c <ADDR_Check+0x254>)
 8000c66:	785b      	ldrb	r3, [r3, #1]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d113      	bne.n	8000c96 <ADDR_Check+0x15e>
 8000c6e:	4b47      	ldr	r3, [pc, #284]	@ (8000d8c <ADDR_Check+0x254>)
 8000c70:	789b      	ldrb	r3, [r3, #2]
 8000c72:	2200      	movs	r2, #0
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d10e      	bne.n	8000c96 <ADDR_Check+0x15e>
 8000c78:	4b44      	ldr	r3, [pc, #272]	@ (8000d8c <ADDR_Check+0x254>)
 8000c7a:	78db      	ldrb	r3, [r3, #3]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d109      	bne.n	8000c96 <ADDR_Check+0x15e>
	  {
		  slave_addr[0] = '0';
 8000c82:	4b44      	ldr	r3, [pc, #272]	@ (8000d94 <ADDR_Check+0x25c>)
 8000c84:	2230      	movs	r2, #48	@ 0x30
 8000c86:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '3';
 8000c88:	4b42      	ldr	r3, [pc, #264]	@ (8000d94 <ADDR_Check+0x25c>)
 8000c8a:	2233      	movs	r2, #51	@ 0x33
 8000c8c:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x03");
 8000c8e:	4845      	ldr	r0, [pc, #276]	@ (8000da4 <ADDR_Check+0x26c>)
 8000c90:	f7ff feb2 	bl	80009f8 <UART_Log>
 8000c94:	e1ac      	b.n	8000ff0 <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba4[3] && addr_d[1] == liczba4[2] && addr_d[2] == liczba4[1] && addr_d[3] == liczba4[0])
 8000c96:	4b3d      	ldr	r3, [pc, #244]	@ (8000d8c <ADDR_Check+0x254>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d118      	bne.n	8000cd2 <ADDR_Check+0x19a>
 8000ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8000d8c <ADDR_Check+0x254>)
 8000ca2:	785b      	ldrb	r3, [r3, #1]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d113      	bne.n	8000cd2 <ADDR_Check+0x19a>
 8000caa:	4b38      	ldr	r3, [pc, #224]	@ (8000d8c <ADDR_Check+0x254>)
 8000cac:	789b      	ldrb	r3, [r3, #2]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d10e      	bne.n	8000cd2 <ADDR_Check+0x19a>
 8000cb4:	4b35      	ldr	r3, [pc, #212]	@ (8000d8c <ADDR_Check+0x254>)
 8000cb6:	78db      	ldrb	r3, [r3, #3]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d109      	bne.n	8000cd2 <ADDR_Check+0x19a>
	  {
		  slave_addr[0] = '0';
 8000cbe:	4b35      	ldr	r3, [pc, #212]	@ (8000d94 <ADDR_Check+0x25c>)
 8000cc0:	2230      	movs	r2, #48	@ 0x30
 8000cc2:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '4';
 8000cc4:	4b33      	ldr	r3, [pc, #204]	@ (8000d94 <ADDR_Check+0x25c>)
 8000cc6:	2234      	movs	r2, #52	@ 0x34
 8000cc8:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x04");
 8000cca:	4837      	ldr	r0, [pc, #220]	@ (8000da8 <ADDR_Check+0x270>)
 8000ccc:	f7ff fe94 	bl	80009f8 <UART_Log>
 8000cd0:	e18e      	b.n	8000ff0 <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba5[3] && addr_d[1] == liczba5[2] && addr_d[2] == liczba5[1] && addr_d[3] == liczba5[0])
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d8c <ADDR_Check+0x254>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d118      	bne.n	8000d0e <ADDR_Check+0x1d6>
 8000cdc:	4b2b      	ldr	r3, [pc, #172]	@ (8000d8c <ADDR_Check+0x254>)
 8000cde:	785b      	ldrb	r3, [r3, #1]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d113      	bne.n	8000d0e <ADDR_Check+0x1d6>
 8000ce6:	4b29      	ldr	r3, [pc, #164]	@ (8000d8c <ADDR_Check+0x254>)
 8000ce8:	789b      	ldrb	r3, [r3, #2]
 8000cea:	2201      	movs	r2, #1
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d10e      	bne.n	8000d0e <ADDR_Check+0x1d6>
 8000cf0:	4b26      	ldr	r3, [pc, #152]	@ (8000d8c <ADDR_Check+0x254>)
 8000cf2:	78db      	ldrb	r3, [r3, #3]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d109      	bne.n	8000d0e <ADDR_Check+0x1d6>
	  {
		  slave_addr[0] = '0';
 8000cfa:	4b26      	ldr	r3, [pc, #152]	@ (8000d94 <ADDR_Check+0x25c>)
 8000cfc:	2230      	movs	r2, #48	@ 0x30
 8000cfe:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '5';
 8000d00:	4b24      	ldr	r3, [pc, #144]	@ (8000d94 <ADDR_Check+0x25c>)
 8000d02:	2235      	movs	r2, #53	@ 0x35
 8000d04:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x05");
 8000d06:	4829      	ldr	r0, [pc, #164]	@ (8000dac <ADDR_Check+0x274>)
 8000d08:	f7ff fe76 	bl	80009f8 <UART_Log>
 8000d0c:	e170      	b.n	8000ff0 <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba6[3] && addr_d[1] == liczba6[2] && addr_d[2] == liczba6[1] && addr_d[3] == liczba6[0])
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <ADDR_Check+0x254>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2200      	movs	r2, #0
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d118      	bne.n	8000d4a <ADDR_Check+0x212>
 8000d18:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <ADDR_Check+0x254>)
 8000d1a:	785b      	ldrb	r3, [r3, #1]
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d113      	bne.n	8000d4a <ADDR_Check+0x212>
 8000d22:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <ADDR_Check+0x254>)
 8000d24:	789b      	ldrb	r3, [r3, #2]
 8000d26:	2201      	movs	r2, #1
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d10e      	bne.n	8000d4a <ADDR_Check+0x212>
 8000d2c:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <ADDR_Check+0x254>)
 8000d2e:	78db      	ldrb	r3, [r3, #3]
 8000d30:	2200      	movs	r2, #0
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d109      	bne.n	8000d4a <ADDR_Check+0x212>
	  {
		  slave_addr[0] = '0';
 8000d36:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <ADDR_Check+0x25c>)
 8000d38:	2230      	movs	r2, #48	@ 0x30
 8000d3a:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '6';
 8000d3c:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <ADDR_Check+0x25c>)
 8000d3e:	2236      	movs	r2, #54	@ 0x36
 8000d40:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x06");
 8000d42:	481b      	ldr	r0, [pc, #108]	@ (8000db0 <ADDR_Check+0x278>)
 8000d44:	f7ff fe58 	bl	80009f8 <UART_Log>
 8000d48:	e152      	b.n	8000ff0 <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba7[3] && addr_d[1] == liczba7[2] && addr_d[2] == liczba7[1] && addr_d[3] == liczba7[0])
 8000d4a:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <ADDR_Check+0x254>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d131      	bne.n	8000db8 <ADDR_Check+0x280>
 8000d54:	4b0d      	ldr	r3, [pc, #52]	@ (8000d8c <ADDR_Check+0x254>)
 8000d56:	785b      	ldrb	r3, [r3, #1]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d12c      	bne.n	8000db8 <ADDR_Check+0x280>
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <ADDR_Check+0x254>)
 8000d60:	789b      	ldrb	r3, [r3, #2]
 8000d62:	2201      	movs	r2, #1
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d127      	bne.n	8000db8 <ADDR_Check+0x280>
 8000d68:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <ADDR_Check+0x254>)
 8000d6a:	78db      	ldrb	r3, [r3, #3]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d122      	bne.n	8000db8 <ADDR_Check+0x280>
	  {
		  slave_addr[0] = '0';
 8000d72:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <ADDR_Check+0x25c>)
 8000d74:	2230      	movs	r2, #48	@ 0x30
 8000d76:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '7';
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <ADDR_Check+0x25c>)
 8000d7a:	2237      	movs	r2, #55	@ 0x37
 8000d7c:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x07");
 8000d7e:	480d      	ldr	r0, [pc, #52]	@ (8000db4 <ADDR_Check+0x27c>)
 8000d80:	f7ff fe3a 	bl	80009f8 <UART_Log>
 8000d84:	e134      	b.n	8000ff0 <ADDR_Check+0x4b8>
 8000d86:	bf00      	nop
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	200001bc 	.word	0x200001bc
 8000d90:	0800a49c 	.word	0x0800a49c
 8000d94:	200001c0 	.word	0x200001c0
 8000d98:	0800a4a4 	.word	0x0800a4a4
 8000d9c:	0800a4ac 	.word	0x0800a4ac
 8000da0:	0800a4b4 	.word	0x0800a4b4
 8000da4:	0800a4bc 	.word	0x0800a4bc
 8000da8:	0800a4c4 	.word	0x0800a4c4
 8000dac:	0800a4cc 	.word	0x0800a4cc
 8000db0:	0800a4d4 	.word	0x0800a4d4
 8000db4:	0800a4dc 	.word	0x0800a4dc
	  }
	  else if(addr_d[0] == liczba8[3] && addr_d[1] == liczba8[2] && addr_d[2] == liczba8[1] && addr_d[3] == liczba8[0])
 8000db8:	4b90      	ldr	r3, [pc, #576]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d118      	bne.n	8000df4 <ADDR_Check+0x2bc>
 8000dc2:	4b8e      	ldr	r3, [pc, #568]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000dc4:	785b      	ldrb	r3, [r3, #1]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d113      	bne.n	8000df4 <ADDR_Check+0x2bc>
 8000dcc:	4b8b      	ldr	r3, [pc, #556]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000dce:	789b      	ldrb	r3, [r3, #2]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10e      	bne.n	8000df4 <ADDR_Check+0x2bc>
 8000dd6:	4b89      	ldr	r3, [pc, #548]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000dd8:	78db      	ldrb	r3, [r3, #3]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d109      	bne.n	8000df4 <ADDR_Check+0x2bc>
	  {
		  slave_addr[0] = '0';
 8000de0:	4b87      	ldr	r3, [pc, #540]	@ (8001000 <ADDR_Check+0x4c8>)
 8000de2:	2230      	movs	r2, #48	@ 0x30
 8000de4:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '8';
 8000de6:	4b86      	ldr	r3, [pc, #536]	@ (8001000 <ADDR_Check+0x4c8>)
 8000de8:	2238      	movs	r2, #56	@ 0x38
 8000dea:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x08");
 8000dec:	4885      	ldr	r0, [pc, #532]	@ (8001004 <ADDR_Check+0x4cc>)
 8000dee:	f7ff fe03 	bl	80009f8 <UART_Log>
 8000df2:	e0fd      	b.n	8000ff0 <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba9[3] && addr_d[1] == liczba9[2] && addr_d[2] == liczba9[1] && addr_d[3] == liczba9[0])
 8000df4:	4b81      	ldr	r3, [pc, #516]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d118      	bne.n	8000e30 <ADDR_Check+0x2f8>
 8000dfe:	4b7f      	ldr	r3, [pc, #508]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000e00:	785b      	ldrb	r3, [r3, #1]
 8000e02:	2200      	movs	r2, #0
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d113      	bne.n	8000e30 <ADDR_Check+0x2f8>
 8000e08:	4b7c      	ldr	r3, [pc, #496]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000e0a:	789b      	ldrb	r3, [r3, #2]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d10e      	bne.n	8000e30 <ADDR_Check+0x2f8>
 8000e12:	4b7a      	ldr	r3, [pc, #488]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000e14:	78db      	ldrb	r3, [r3, #3]
 8000e16:	2201      	movs	r2, #1
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d109      	bne.n	8000e30 <ADDR_Check+0x2f8>
	  {
		  slave_addr[0] = '0';
 8000e1c:	4b78      	ldr	r3, [pc, #480]	@ (8001000 <ADDR_Check+0x4c8>)
 8000e1e:	2230      	movs	r2, #48	@ 0x30
 8000e20:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '9';
 8000e22:	4b77      	ldr	r3, [pc, #476]	@ (8001000 <ADDR_Check+0x4c8>)
 8000e24:	2239      	movs	r2, #57	@ 0x39
 8000e26:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x09");
 8000e28:	4877      	ldr	r0, [pc, #476]	@ (8001008 <ADDR_Check+0x4d0>)
 8000e2a:	f7ff fde5 	bl	80009f8 <UART_Log>
 8000e2e:	e0df      	b.n	8000ff0 <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba10[3] && addr_d[1] == liczba10[2] && addr_d[2] == liczba10[1] && addr_d[3] == liczba10[0])
 8000e30:	4b72      	ldr	r3, [pc, #456]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2200      	movs	r2, #0
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d118      	bne.n	8000e6c <ADDR_Check+0x334>
 8000e3a:	4b70      	ldr	r3, [pc, #448]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000e3c:	785b      	ldrb	r3, [r3, #1]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d113      	bne.n	8000e6c <ADDR_Check+0x334>
 8000e44:	4b6d      	ldr	r3, [pc, #436]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000e46:	789b      	ldrb	r3, [r3, #2]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d10e      	bne.n	8000e6c <ADDR_Check+0x334>
 8000e4e:	4b6b      	ldr	r3, [pc, #428]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000e50:	78db      	ldrb	r3, [r3, #3]
 8000e52:	2201      	movs	r2, #1
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d109      	bne.n	8000e6c <ADDR_Check+0x334>
	  {
		  slave_addr[0] = '1';
 8000e58:	4b69      	ldr	r3, [pc, #420]	@ (8001000 <ADDR_Check+0x4c8>)
 8000e5a:	2231      	movs	r2, #49	@ 0x31
 8000e5c:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '0';
 8000e5e:	4b68      	ldr	r3, [pc, #416]	@ (8001000 <ADDR_Check+0x4c8>)
 8000e60:	2230      	movs	r2, #48	@ 0x30
 8000e62:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x0A");
 8000e64:	4869      	ldr	r0, [pc, #420]	@ (800100c <ADDR_Check+0x4d4>)
 8000e66:	f7ff fdc7 	bl	80009f8 <UART_Log>
 8000e6a:	e0c1      	b.n	8000ff0 <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba11[3] && addr_d[1] == liczba11[2] && addr_d[2] == liczba11[1] && addr_d[3] == liczba11[0])
 8000e6c:	4b63      	ldr	r3, [pc, #396]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2201      	movs	r2, #1
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d118      	bne.n	8000ea8 <ADDR_Check+0x370>
 8000e76:	4b61      	ldr	r3, [pc, #388]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000e78:	785b      	ldrb	r3, [r3, #1]
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d113      	bne.n	8000ea8 <ADDR_Check+0x370>
 8000e80:	4b5e      	ldr	r3, [pc, #376]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000e82:	789b      	ldrb	r3, [r3, #2]
 8000e84:	2200      	movs	r2, #0
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10e      	bne.n	8000ea8 <ADDR_Check+0x370>
 8000e8a:	4b5c      	ldr	r3, [pc, #368]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000e8c:	78db      	ldrb	r3, [r3, #3]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d109      	bne.n	8000ea8 <ADDR_Check+0x370>
	  {
		  slave_addr[0] = '1';
 8000e94:	4b5a      	ldr	r3, [pc, #360]	@ (8001000 <ADDR_Check+0x4c8>)
 8000e96:	2231      	movs	r2, #49	@ 0x31
 8000e98:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '1';
 8000e9a:	4b59      	ldr	r3, [pc, #356]	@ (8001000 <ADDR_Check+0x4c8>)
 8000e9c:	2231      	movs	r2, #49	@ 0x31
 8000e9e:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x0B");
 8000ea0:	485b      	ldr	r0, [pc, #364]	@ (8001010 <ADDR_Check+0x4d8>)
 8000ea2:	f7ff fda9 	bl	80009f8 <UART_Log>
 8000ea6:	e0a3      	b.n	8000ff0 <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba12[3] && addr_d[1] == liczba12[2] && addr_d[2] == liczba12[1] && addr_d[3] == liczba12[0])
 8000ea8:	4b54      	ldr	r3, [pc, #336]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2200      	movs	r2, #0
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d118      	bne.n	8000ee4 <ADDR_Check+0x3ac>
 8000eb2:	4b52      	ldr	r3, [pc, #328]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000eb4:	785b      	ldrb	r3, [r3, #1]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d113      	bne.n	8000ee4 <ADDR_Check+0x3ac>
 8000ebc:	4b4f      	ldr	r3, [pc, #316]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000ebe:	789b      	ldrb	r3, [r3, #2]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d10e      	bne.n	8000ee4 <ADDR_Check+0x3ac>
 8000ec6:	4b4d      	ldr	r3, [pc, #308]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000ec8:	78db      	ldrb	r3, [r3, #3]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d109      	bne.n	8000ee4 <ADDR_Check+0x3ac>
	  {
		  slave_addr[0] = '1';
 8000ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8001000 <ADDR_Check+0x4c8>)
 8000ed2:	2231      	movs	r2, #49	@ 0x31
 8000ed4:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '2';
 8000ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8001000 <ADDR_Check+0x4c8>)
 8000ed8:	2232      	movs	r2, #50	@ 0x32
 8000eda:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x0C");
 8000edc:	484d      	ldr	r0, [pc, #308]	@ (8001014 <ADDR_Check+0x4dc>)
 8000ede:	f7ff fd8b 	bl	80009f8 <UART_Log>
 8000ee2:	e085      	b.n	8000ff0 <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba13[3] && addr_d[1] == liczba13[2] && addr_d[2] == liczba13[1] && addr_d[3] == liczba13[0])
 8000ee4:	4b45      	ldr	r3, [pc, #276]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d118      	bne.n	8000f20 <ADDR_Check+0x3e8>
 8000eee:	4b43      	ldr	r3, [pc, #268]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000ef0:	785b      	ldrb	r3, [r3, #1]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d113      	bne.n	8000f20 <ADDR_Check+0x3e8>
 8000ef8:	4b40      	ldr	r3, [pc, #256]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000efa:	789b      	ldrb	r3, [r3, #2]
 8000efc:	2201      	movs	r2, #1
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d10e      	bne.n	8000f20 <ADDR_Check+0x3e8>
 8000f02:	4b3e      	ldr	r3, [pc, #248]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000f04:	78db      	ldrb	r3, [r3, #3]
 8000f06:	2201      	movs	r2, #1
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d109      	bne.n	8000f20 <ADDR_Check+0x3e8>
	  {
		  slave_addr[0] = '1';
 8000f0c:	4b3c      	ldr	r3, [pc, #240]	@ (8001000 <ADDR_Check+0x4c8>)
 8000f0e:	2231      	movs	r2, #49	@ 0x31
 8000f10:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '3';
 8000f12:	4b3b      	ldr	r3, [pc, #236]	@ (8001000 <ADDR_Check+0x4c8>)
 8000f14:	2233      	movs	r2, #51	@ 0x33
 8000f16:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x0D");
 8000f18:	483f      	ldr	r0, [pc, #252]	@ (8001018 <ADDR_Check+0x4e0>)
 8000f1a:	f7ff fd6d 	bl	80009f8 <UART_Log>
 8000f1e:	e067      	b.n	8000ff0 <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba14[3] && addr_d[1] == liczba14[2] && addr_d[2] == liczba14[1] && addr_d[3] == liczba14[0])
 8000f20:	4b36      	ldr	r3, [pc, #216]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2200      	movs	r2, #0
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d118      	bne.n	8000f5c <ADDR_Check+0x424>
 8000f2a:	4b34      	ldr	r3, [pc, #208]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000f2c:	785b      	ldrb	r3, [r3, #1]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d113      	bne.n	8000f5c <ADDR_Check+0x424>
 8000f34:	4b31      	ldr	r3, [pc, #196]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000f36:	789b      	ldrb	r3, [r3, #2]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d10e      	bne.n	8000f5c <ADDR_Check+0x424>
 8000f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000f40:	78db      	ldrb	r3, [r3, #3]
 8000f42:	2201      	movs	r2, #1
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d109      	bne.n	8000f5c <ADDR_Check+0x424>
	  {
		  slave_addr[0] = '1';
 8000f48:	4b2d      	ldr	r3, [pc, #180]	@ (8001000 <ADDR_Check+0x4c8>)
 8000f4a:	2231      	movs	r2, #49	@ 0x31
 8000f4c:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '4';
 8000f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001000 <ADDR_Check+0x4c8>)
 8000f50:	2234      	movs	r2, #52	@ 0x34
 8000f52:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x0E");
 8000f54:	4831      	ldr	r0, [pc, #196]	@ (800101c <ADDR_Check+0x4e4>)
 8000f56:	f7ff fd4f 	bl	80009f8 <UART_Log>
 8000f5a:	e049      	b.n	8000ff0 <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba15[3] && addr_d[1] == liczba15[2] && addr_d[2] == liczba15[1] && addr_d[3] == liczba15[0])
 8000f5c:	4b27      	ldr	r3, [pc, #156]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2201      	movs	r2, #1
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d000      	beq.n	8000f68 <ADDR_Check+0x430>
 8000f66:	e018      	b.n	8000f9a <ADDR_Check+0x462>
 8000f68:	4b24      	ldr	r3, [pc, #144]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000f6a:	785b      	ldrb	r3, [r3, #1]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d113      	bne.n	8000f9a <ADDR_Check+0x462>
 8000f72:	4b22      	ldr	r3, [pc, #136]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000f74:	789b      	ldrb	r3, [r3, #2]
 8000f76:	2201      	movs	r2, #1
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d10e      	bne.n	8000f9a <ADDR_Check+0x462>
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <ADDR_Check+0x4c4>)
 8000f7e:	78db      	ldrb	r3, [r3, #3]
 8000f80:	2201      	movs	r2, #1
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d109      	bne.n	8000f9a <ADDR_Check+0x462>
	  {
		  slave_addr[0] = '1';
 8000f86:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <ADDR_Check+0x4c8>)
 8000f88:	2231      	movs	r2, #49	@ 0x31
 8000f8a:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '5';
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <ADDR_Check+0x4c8>)
 8000f8e:	2235      	movs	r2, #53	@ 0x35
 8000f90:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x0F");
 8000f92:	4823      	ldr	r0, [pc, #140]	@ (8001020 <ADDR_Check+0x4e8>)
 8000f94:	f7ff fd30 	bl	80009f8 <UART_Log>
 8000f98:	e02a      	b.n	8000ff0 <ADDR_Check+0x4b8>
	  }
	  else
	  {
		  while(true)
		  {
		  slave_addr[0] = 'F';
 8000f9a:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <ADDR_Check+0x4c8>)
 8000f9c:	2246      	movs	r2, #70	@ 0x46
 8000f9e:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = 'F';
 8000fa0:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <ADDR_Check+0x4c8>)
 8000fa2:	2246      	movs	r2, #70	@ 0x46
 8000fa4:	705a      	strb	r2, [r3, #1]
		  UART_Log("0xFF incorrect addres check\n\r");
 8000fa6:	481f      	ldr	r0, [pc, #124]	@ (8001024 <ADDR_Check+0x4ec>)
 8000fa8:	f7ff fd26 	bl	80009f8 <UART_Log>
		  HAL_GPIO_WritePin(ST_RED_GPIO_Port, ST_RED_Pin, GPIO_PIN_SET);	//error
 8000fac:	2201      	movs	r2, #1
 8000fae:	2104      	movs	r1, #4
 8000fb0:	481d      	ldr	r0, [pc, #116]	@ (8001028 <ADDR_Check+0x4f0>)
 8000fb2:	f001 fe0b 	bl	8002bcc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ST_YELLOW_GPIO_Port, ST_YELLOW_Pin, GPIO_PIN_RESET); //bypass
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fbc:	481b      	ldr	r0, [pc, #108]	@ (800102c <ADDR_Check+0x4f4>)
 8000fbe:	f001 fe05 	bl	8002bcc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ST_GREEN_GPIO_Port, ST_GREEN_Pin, GPIO_PIN_RESET);	//run
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fc8:	4818      	ldr	r0, [pc, #96]	@ (800102c <ADDR_Check+0x4f4>)
 8000fca:	f001 fdff 	bl	8002bcc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ST_BLUE_GPIO_Port, ST_BLUE_Pin, GPIO_PIN_RESET);	//other
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fd4:	4815      	ldr	r0, [pc, #84]	@ (800102c <ADDR_Check+0x4f4>)
 8000fd6:	f001 fdf9 	bl	8002bcc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Hirata_NG_GPIO_Port, Hirata_NG_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fe0:	4813      	ldr	r0, [pc, #76]	@ (8001030 <ADDR_Check+0x4f8>)
 8000fe2:	f001 fdf3 	bl	8002bcc <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000fe6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fea:	f000 ffa1 	bl	8001f30 <HAL_Delay>
		  slave_addr[0] = 'F';
 8000fee:	e7d4      	b.n	8000f9a <ADDR_Check+0x462>
		  }
	  }

	  UART_Log("\n\r");
 8000ff0:	4810      	ldr	r0, [pc, #64]	@ (8001034 <ADDR_Check+0x4fc>)
 8000ff2:	f7ff fd01 	bl	80009f8 <UART_Log>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200001bc 	.word	0x200001bc
 8001000:	200001c0 	.word	0x200001c0
 8001004:	0800a4e4 	.word	0x0800a4e4
 8001008:	0800a4ec 	.word	0x0800a4ec
 800100c:	0800a4f4 	.word	0x0800a4f4
 8001010:	0800a4fc 	.word	0x0800a4fc
 8001014:	0800a504 	.word	0x0800a504
 8001018:	0800a50c 	.word	0x0800a50c
 800101c:	0800a514 	.word	0x0800a514
 8001020:	0800a51c 	.word	0x0800a51c
 8001024:	0800a524 	.word	0x0800a524
 8001028:	40020c00 	.word	0x40020c00
 800102c:	40020800 	.word	0x40020800
 8001030:	40020000 	.word	0x40020000
 8001034:	0800a544 	.word	0x0800a544

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {

	  UART_Log("Hard Fault: ERROR HANDLER\n\r");
 8001040:	4812      	ldr	r0, [pc, #72]	@ (800108c <Error_Handler+0x54>)
 8001042:	f7ff fcd9 	bl	80009f8 <UART_Log>
	  HAL_GPIO_WritePin(ST_RED_GPIO_Port, ST_RED_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	2104      	movs	r1, #4
 800104a:	4811      	ldr	r0, [pc, #68]	@ (8001090 <Error_Handler+0x58>)
 800104c:	f001 fdbe 	bl	8002bcc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Hirata_NG_GPIO_Port, Hirata_NG_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001056:	480f      	ldr	r0, [pc, #60]	@ (8001094 <Error_Handler+0x5c>)
 8001058:	f001 fdb8 	bl	8002bcc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ST_YELLOW_GPIO_Port, ST_YELLOW_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001062:	480d      	ldr	r0, [pc, #52]	@ (8001098 <Error_Handler+0x60>)
 8001064:	f001 fdb2 	bl	8002bcc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ST_GREEN_GPIO_Port, ST_GREEN_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800106e:	480a      	ldr	r0, [pc, #40]	@ (8001098 <Error_Handler+0x60>)
 8001070:	f001 fdac 	bl	8002bcc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ST_BLUE_GPIO_Port, ST_BLUE_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800107a:	4807      	ldr	r0, [pc, #28]	@ (8001098 <Error_Handler+0x60>)
 800107c:	f001 fda6 	bl	8002bcc <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001080:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001084:	f000 ff54 	bl	8001f30 <HAL_Delay>
	  UART_Log("Hard Fault: ERROR HANDLER\n\r");
 8001088:	bf00      	nop
 800108a:	e7d9      	b.n	8001040 <Error_Handler+0x8>
 800108c:	0800a548 	.word	0x0800a548
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40020000 	.word	0x40020000
 8001098:	40020800 	.word	0x40020800

0800109c <Parser_TakeLine>:

//
// Get a one complete line from Ring Buffer
//
void Parser_TakeLine(RingBuffer_t *Buf, uint8_t *Destination)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	uint8_t Tmp;
	uint8_t i = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]

	// Loop for every char in Ring Buffer
	do
	{
		// Read a one byte from Ring Buffer
		RB_Read(Buf, &Tmp);
 80010aa:	f107 030e 	add.w	r3, r7, #14
 80010ae:	4619      	mov	r1, r3
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 fb89 	bl	80017c8 <RB_Read>

		// Check if we take the endline char
		if(Tmp == ENDLINE)
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
 80010b8:	2b0a      	cmp	r3, #10
 80010ba:	d105      	bne.n	80010c8 <Parser_TakeLine+0x2c>
		{
			// If endline - replace it with c-string end sign - 0x00
			Destination[i] = 0;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	4413      	add	r3, r2
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e004      	b.n	80010d2 <Parser_TakeLine+0x36>
		}
		else
		{
			// If not endline - just write to work-buffer
			Destination[i] = Tmp;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	4413      	add	r3, r2
 80010ce:	7bba      	ldrb	r2, [r7, #14]
 80010d0:	701a      	strb	r2, [r3, #0]
		}

		i++; // increment array iterator
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	3301      	adds	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
	}while(Tmp != ENDLINE); // If we hit the endline char - end the loop
 80010d8:	7bbb      	ldrb	r3, [r7, #14]
 80010da:	2b0a      	cmp	r3, #10
 80010dc:	d1e5      	bne.n	80010aa <Parser_TakeLine+0xe>
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <Parser_Parse>:
// 	LED_OFF
//
// uint8_t *DataToParse - an array with complete line taken from Ring Buffer earlier
//
void Parser_Parse(uint8_t *DataToParse)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	uint8_t command0[] = {"TS_00_00"};
 80010f0:	4a11      	ldr	r2, [pc, #68]	@ (8001138 <Parser_Parse+0x50>)
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010f8:	c303      	stmia	r3!, {r0, r1}
 80010fa:	701a      	strb	r2, [r3, #0]
	command0[3] = slave_addr[0];
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <Parser_Parse+0x54>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	73fb      	strb	r3, [r7, #15]
	command0[4] = slave_addr[1];
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <Parser_Parse+0x54>)
 8001104:	785b      	ldrb	r3, [r3, #1]
 8001106:	743b      	strb	r3, [r7, #16]

	// Compare provided array with line to parse with command template
	if(strcmp(command0, (char*)DataToParse) == 0)
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f862 	bl	80001d8 <strcmp>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <Parser_Parse+0x3a>
	{
		  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
		RS_Transmit(send_buffer);
 800111a:	4809      	ldr	r0, [pc, #36]	@ (8001140 <Parser_Parse+0x58>)
 800111c:	f7ff fc82 	bl	8000a24 <RS_Transmit>
		//RB_Flush(ReceivedData);
	}
	//DataToParse[0] = ("\n");
	//for(size_t i = 0; i < sizeof DataToParse; ++i)	//clearread data
		//	  DataToParse[i] = 0;
}
 8001120:	e005      	b.n	800112e <Parser_Parse+0x46>
		RB_Flush(&rx_data);
 8001122:	4808      	ldr	r0, [pc, #32]	@ (8001144 <Parser_Parse+0x5c>)
 8001124:	f000 fba4 	bl	8001870 <RB_Flush>
		RB_Flush(rx_data);
 8001128:	4806      	ldr	r0, [pc, #24]	@ (8001144 <Parser_Parse+0x5c>)
 800112a:	f000 fba1 	bl	8001870 <RB_Flush>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	0800a564 	.word	0x0800a564
 800113c:	200001c0 	.word	0x200001c0
 8001140:	20000008 	.word	0x20000008
 8001144:	200001c4 	.word	0x200001c4

08001148 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8001152:	f107 020f 	add.w	r2, r7, #15
 8001156:	1df9      	adds	r1, r7, #7
 8001158:	2364      	movs	r3, #100	@ 0x64
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	4804      	ldr	r0, [pc, #16]	@ (8001170 <RC522_SPI_Transfer+0x28>)
 8001160:	f003 fe05 	bl	8004d6e <HAL_SPI_TransmitReceive>

	return rx_data;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000248 	.word	0x20000248

08001174 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	460a      	mov	r2, r1
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	4613      	mov	r3, r2
 8001182:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	2110      	movs	r1, #16
 8001188:	480c      	ldr	r0, [pc, #48]	@ (80011bc <Write_MFRC522+0x48>)
 800118a:	f001 fd1f 	bl	8002bcc <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001198:	b2db      	uxtb	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ffd4 	bl	8001148 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ffd0 	bl	8001148 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2110      	movs	r1, #16
 80011ac:	4803      	ldr	r0, [pc, #12]	@ (80011bc <Write_MFRC522+0x48>)
 80011ae:	f001 fd0d 	bl	8002bcc <HAL_GPIO_WritePin>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40020000 	.word	0x40020000

080011c0 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2110      	movs	r1, #16
 80011ce:	480f      	ldr	r0, [pc, #60]	@ (800120c <Read_MFRC522+0x4c>)
 80011d0:	f001 fcfc 	bl	8002bcc <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ffad 	bl	8001148 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff ffaa 	bl	8001148 <RC522_SPI_Transfer>
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2110      	movs	r1, #16
 80011fc:	4803      	ldr	r0, [pc, #12]	@ (800120c <Read_MFRC522+0x4c>)
 80011fe:	f001 fce5 	bl	8002bcc <HAL_GPIO_WritePin>

	return val;
 8001202:	7bfb      	ldrb	r3, [r7, #15]

}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40020000 	.word	0x40020000

08001210 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	460a      	mov	r2, r1
 800121a:	71fb      	strb	r3, [r7, #7]
 800121c:	4613      	mov	r3, r2
 800121e:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ffcc 	bl	80011c0 <Read_MFRC522>
 8001228:	4603      	mov	r3, r0
 800122a:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	79bb      	ldrb	r3, [r7, #6]
 8001230:	4313      	orrs	r3, r2
 8001232:	b2da      	uxtb	r2, r3
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff9b 	bl	8001174 <Write_MFRC522>
}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	460a      	mov	r2, r1
 8001250:	71fb      	strb	r3, [r7, #7]
 8001252:	4613      	mov	r3, r2
 8001254:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ffb1 	bl	80011c0 <Read_MFRC522>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001262:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001266:	43db      	mvns	r3, r3
 8001268:	b25a      	sxtb	r2, r3
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4013      	ands	r3, r2
 8001270:	b25b      	sxtb	r3, r3
 8001272:	b2da      	uxtb	r2, r3
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff7b 	bl	8001174 <Write_MFRC522>
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800128a:	2014      	movs	r0, #20
 800128c:	f7ff ff98 	bl	80011c0 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8001290:	2103      	movs	r1, #3
 8001292:	2014      	movs	r0, #20
 8001294:	f7ff ffbc 	bl	8001210 <SetBitMask>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80012a0:	210f      	movs	r1, #15
 80012a2:	2001      	movs	r0, #1
 80012a4:	f7ff ff66 	bl	8001174 <Write_MFRC522>
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	2110      	movs	r1, #16
 80012b4:	4812      	ldr	r0, [pc, #72]	@ (8001300 <MFRC522_Init+0x54>)
 80012b6:	f001 fc89 	bl	8002bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	2101      	movs	r1, #1
 80012be:	4811      	ldr	r0, [pc, #68]	@ (8001304 <MFRC522_Init+0x58>)
 80012c0:	f001 fc84 	bl	8002bcc <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80012c4:	f7ff ffea 	bl	800129c <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80012c8:	218d      	movs	r1, #141	@ 0x8d
 80012ca:	202a      	movs	r0, #42	@ 0x2a
 80012cc:	f7ff ff52 	bl	8001174 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80012d0:	213e      	movs	r1, #62	@ 0x3e
 80012d2:	202b      	movs	r0, #43	@ 0x2b
 80012d4:	f7ff ff4e 	bl	8001174 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80012d8:	211e      	movs	r1, #30
 80012da:	202d      	movs	r0, #45	@ 0x2d
 80012dc:	f7ff ff4a 	bl	8001174 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80012e0:	2100      	movs	r1, #0
 80012e2:	202c      	movs	r0, #44	@ 0x2c
 80012e4:	f7ff ff46 	bl	8001174 <Write_MFRC522>
	//Write_MFRC522(RFCfgReg, 0x7F);
	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80012e8:	2140      	movs	r1, #64	@ 0x40
 80012ea:	2015      	movs	r0, #21
 80012ec:	f7ff ff42 	bl	8001174 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80012f0:	213d      	movs	r1, #61	@ 0x3d
 80012f2:	2011      	movs	r0, #17
 80012f4:	f7ff ff3e 	bl	8001174 <Write_MFRC522>

	AntennaOn();
 80012f8:	f7ff ffc5 	bl	8001286 <AntennaOn>
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40020000 	.word	0x40020000
 8001304:	40020400 	.word	0x40020400

08001308 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b089      	sub	sp, #36	@ 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4603      	mov	r3, r0
 8001314:	73fb      	strb	r3, [r7, #15]
 8001316:	4613      	mov	r3, r2
 8001318:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 800131a:	2302      	movs	r3, #2
 800131c:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 800131e:	2300      	movs	r3, #0
 8001320:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8001322:	2300      	movs	r3, #0
 8001324:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	2b0c      	cmp	r3, #12
 800132a:	d006      	beq.n	800133a <MFRC522_ToCard+0x32>
 800132c:	2b0e      	cmp	r3, #14
 800132e:	d109      	bne.n	8001344 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8001330:	2312      	movs	r3, #18
 8001332:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8001334:	2310      	movs	r3, #16
 8001336:	777b      	strb	r3, [r7, #29]
			break;
 8001338:	e005      	b.n	8001346 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 800133a:	2377      	movs	r3, #119	@ 0x77
 800133c:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 800133e:	2330      	movs	r3, #48	@ 0x30
 8001340:	777b      	strb	r3, [r7, #29]
			break;
 8001342:	e000      	b.n	8001346 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001344:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8001346:	7fbb      	ldrb	r3, [r7, #30]
 8001348:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800134c:	b2db      	uxtb	r3, r3
 800134e:	4619      	mov	r1, r3
 8001350:	2002      	movs	r0, #2
 8001352:	f7ff ff0f 	bl	8001174 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8001356:	2180      	movs	r1, #128	@ 0x80
 8001358:	2004      	movs	r0, #4
 800135a:	f7ff ff74 	bl	8001246 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 800135e:	2180      	movs	r1, #128	@ 0x80
 8001360:	200a      	movs	r0, #10
 8001362:	f7ff ff55 	bl	8001210 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8001366:	2100      	movs	r1, #0
 8001368:	2001      	movs	r0, #1
 800136a:	f7ff ff03 	bl	8001174 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
 8001372:	e00a      	b.n	800138a <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	2009      	movs	r0, #9
 8001380:	f7ff fef8 	bl	8001174 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	3301      	adds	r3, #1
 8001388:	61bb      	str	r3, [r7, #24]
 800138a:	7bbb      	ldrb	r3, [r7, #14]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	429a      	cmp	r2, r3
 8001390:	d3f0      	bcc.n	8001374 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	4619      	mov	r1, r3
 8001396:	2001      	movs	r0, #1
 8001398:	f7ff feec 	bl	8001174 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	2b0c      	cmp	r3, #12
 80013a0:	d103      	bne.n	80013aa <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80013a2:	2180      	movs	r1, #128	@ 0x80
 80013a4:	200d      	movs	r0, #13
 80013a6:	f7ff ff33 	bl	8001210 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80013aa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80013ae:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80013b0:	2004      	movs	r0, #4
 80013b2:	f7ff ff05 	bl	80011c0 <Read_MFRC522>
 80013b6:	4603      	mov	r3, r0
 80013b8:	773b      	strb	r3, [r7, #28]
        i--;
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	3b01      	subs	r3, #1
 80013be:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00a      	beq.n	80013dc <MFRC522_ToCard+0xd4>
 80013c6:	7f3b      	ldrb	r3, [r7, #28]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d105      	bne.n	80013dc <MFRC522_ToCard+0xd4>
 80013d0:	7f3a      	ldrb	r2, [r7, #28]
 80013d2:	7f7b      	ldrb	r3, [r7, #29]
 80013d4:	4013      	ands	r3, r2
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0e9      	beq.n	80013b0 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80013dc:	2180      	movs	r1, #128	@ 0x80
 80013de:	200d      	movs	r0, #13
 80013e0:	f7ff ff31 	bl	8001246 <ClearBitMask>

    if (i != 0)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d052      	beq.n	8001490 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80013ea:	2006      	movs	r0, #6
 80013ec:	f7ff fee8 	bl	80011c0 <Read_MFRC522>
 80013f0:	4603      	mov	r3, r0
 80013f2:	f003 031b 	and.w	r3, r3, #27
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d148      	bne.n	800148c <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 80013fe:	7f3a      	ldrb	r2, [r7, #28]
 8001400:	7fbb      	ldrb	r3, [r7, #30]
 8001402:	4013      	ands	r3, r2
 8001404:	b2db      	uxtb	r3, r3
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 800140e:	2301      	movs	r3, #1
 8001410:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	2b0c      	cmp	r3, #12
 8001416:	d13b      	bne.n	8001490 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8001418:	200a      	movs	r0, #10
 800141a:	f7ff fed1 	bl	80011c0 <Read_MFRC522>
 800141e:	4603      	mov	r3, r0
 8001420:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001422:	200c      	movs	r0, #12
 8001424:	f7ff fecc 	bl	80011c0 <Read_MFRC522>
 8001428:	4603      	mov	r3, r0
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d008      	beq.n	8001448 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8001436:	7f3b      	ldrb	r3, [r7, #28]
 8001438:	3b01      	subs	r3, #1
 800143a:	00da      	lsls	r2, r3, #3
 800143c:	7dfb      	ldrb	r3, [r7, #23]
 800143e:	4413      	add	r3, r2
 8001440:	461a      	mov	r2, r3
 8001442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	e004      	b.n	8001452 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8001448:	7f3b      	ldrb	r3, [r7, #28]
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	461a      	mov	r2, r3
 800144e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001450:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8001452:	7f3b      	ldrb	r3, [r7, #28]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <MFRC522_ToCard+0x154>
                {
					n = 1;
 8001458:	2301      	movs	r3, #1
 800145a:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 800145c:	7f3b      	ldrb	r3, [r7, #28]
 800145e:	2b10      	cmp	r3, #16
 8001460:	d901      	bls.n	8001466 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8001462:	2310      	movs	r3, #16
 8001464:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	e00a      	b.n	8001482 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	18d4      	adds	r4, r2, r3
 8001472:	2009      	movs	r0, #9
 8001474:	f7ff fea4 	bl	80011c0 <Read_MFRC522>
 8001478:	4603      	mov	r3, r0
 800147a:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	3301      	adds	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	7f3b      	ldrb	r3, [r7, #28]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	429a      	cmp	r2, r3
 8001488:	d3f0      	bcc.n	800146c <MFRC522_ToCard+0x164>
 800148a:	e001      	b.n	8001490 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 800148c:	2302      	movs	r3, #2
 800148e:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8001490:	7ffb      	ldrb	r3, [r7, #31]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	@ 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd90      	pop	{r4, r7, pc}

0800149a <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af02      	add	r7, sp, #8
 80014a0:	4603      	mov	r3, r0
 80014a2:	6039      	str	r1, [r7, #0]
 80014a4:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80014a6:	2107      	movs	r1, #7
 80014a8:	200d      	movs	r0, #13
 80014aa:	f7ff fe63 	bl	8001174 <Write_MFRC522>

	TagType[0] = reqMode;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	79fa      	ldrb	r2, [r7, #7]
 80014b2:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2201      	movs	r2, #1
 80014be:	6839      	ldr	r1, [r7, #0]
 80014c0:	200c      	movs	r0, #12
 80014c2:	f7ff ff21 	bl	8001308 <MFRC522_ToCard>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <MFRC522_Request+0x3c>
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d001      	beq.n	80014da <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 80014d6:	2302      	movs	r3, #2
 80014d8:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80014f0:	2100      	movs	r1, #0
 80014f2:	200d      	movs	r0, #13
 80014f4:	f7ff fe3e 	bl	8001174 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2293      	movs	r2, #147	@ 0x93
 80014fc:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3301      	adds	r3, #1
 8001502:	2220      	movs	r2, #32
 8001504:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2202      	movs	r2, #2
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	200c      	movs	r0, #12
 8001514:	f7ff fef8 	bl	8001308 <MFRC522_ToCard>
 8001518:	4603      	mov	r3, r0
 800151a:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d118      	bne.n	8001554 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8001522:	2300      	movs	r3, #0
 8001524:	73bb      	strb	r3, [r7, #14]
 8001526:	e009      	b.n	800153c <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8001528:	7bbb      	ldrb	r3, [r7, #14]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	781a      	ldrb	r2, [r3, #0]
 8001530:	7b7b      	ldrb	r3, [r7, #13]
 8001532:	4053      	eors	r3, r2
 8001534:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8001536:	7bbb      	ldrb	r3, [r7, #14]
 8001538:	3301      	adds	r3, #1
 800153a:	73bb      	strb	r3, [r7, #14]
 800153c:	7bbb      	ldrb	r3, [r7, #14]
 800153e:	2b03      	cmp	r3, #3
 8001540:	d9f2      	bls.n	8001528 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8001542:	7bbb      	ldrb	r3, [r7, #14]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	7b7a      	ldrb	r2, [r7, #13]
 800154c:	429a      	cmp	r2, r3
 800154e:	d001      	beq.n	8001554 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8001550:	2302      	movs	r3, #2
 8001552:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <CalulateCRC>:
 * Description: CRC calculation with MF522
 * Input parameters: pIndata - To read the CRC data, len - the data length, pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC(uchar *pIndata, uchar len, uchar *pOutData)
{
 800155e:	b590      	push	{r4, r7, lr}
 8001560:	b087      	sub	sp, #28
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	460b      	mov	r3, r1
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	72fb      	strb	r3, [r7, #11]
    uchar i, n;

    ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 800156c:	2104      	movs	r1, #4
 800156e:	2005      	movs	r0, #5
 8001570:	f7ff fe69 	bl	8001246 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
 8001574:	2180      	movs	r1, #128	@ 0x80
 8001576:	200a      	movs	r0, #10
 8001578:	f7ff fe4a 	bl	8001210 <SetBitMask>

    //Writing data to the FIFO
    for (i=0; i<len; i++)
 800157c:	2300      	movs	r3, #0
 800157e:	75fb      	strb	r3, [r7, #23]
 8001580:	e00a      	b.n	8001598 <CalulateCRC+0x3a>
    {
		Write_MFRC522(FIFODataReg, *(pIndata+i));
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4619      	mov	r1, r3
 800158c:	2009      	movs	r0, #9
 800158e:	f7ff fdf1 	bl	8001174 <Write_MFRC522>
    for (i=0; i<len; i++)
 8001592:	7dfb      	ldrb	r3, [r7, #23]
 8001594:	3301      	adds	r3, #1
 8001596:	75fb      	strb	r3, [r7, #23]
 8001598:	7dfa      	ldrb	r2, [r7, #23]
 800159a:	7afb      	ldrb	r3, [r7, #11]
 800159c:	429a      	cmp	r2, r3
 800159e:	d3f0      	bcc.n	8001582 <CalulateCRC+0x24>
	}
    Write_MFRC522(CommandReg, PCD_CALCCRC);
 80015a0:	2103      	movs	r1, #3
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff fde6 	bl	8001174 <Write_MFRC522>

    //Wait CRC calculation is complete
    i = 0xFF;
 80015a8:	23ff      	movs	r3, #255	@ 0xff
 80015aa:	75fb      	strb	r3, [r7, #23]
    do
    {
        n = Read_MFRC522(DivIrqReg);
 80015ac:	2005      	movs	r0, #5
 80015ae:	f7ff fe07 	bl	80011c0 <Read_MFRC522>
 80015b2:	4603      	mov	r3, r0
 80015b4:	75bb      	strb	r3, [r7, #22]
        i--;
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	75fb      	strb	r3, [r7, #23]
    }
    while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d004      	beq.n	80015cc <CalulateCRC+0x6e>
 80015c2:	7dbb      	ldrb	r3, [r7, #22]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0ef      	beq.n	80015ac <CalulateCRC+0x4e>

    //Read CRC calculation result
    pOutData[0] = Read_MFRC522(CRCResultRegL);
 80015cc:	2022      	movs	r0, #34	@ 0x22
 80015ce:	f7ff fdf7 	bl	80011c0 <Read_MFRC522>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	701a      	strb	r2, [r3, #0]
    pOutData[1] = Read_MFRC522(CRCResultRegH);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	1c5c      	adds	r4, r3, #1
 80015de:	2021      	movs	r0, #33	@ 0x21
 80015e0:	f7ff fdee 	bl	80011c0 <Read_MFRC522>
 80015e4:	4603      	mov	r3, r0
 80015e6:	7023      	strb	r3, [r4, #0]
}
 80015e8:	bf00      	nop
 80015ea:	371c      	adds	r7, #28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}

080015f0 <MFRC522_SelectTag>:
 * Description: election card, read the card memory capacity
 * Input parameters: serNum - Incoming card serial number
 * Return value: the successful return of card capacity
 */
uchar MFRC522_SelectTag(uchar *serNum)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	6078      	str	r0, [r7, #4]
	uint recvBits;
	uchar buffer[9];

	//ClearBitMask(Status2Reg, 0x08);			//MFCrypto1On=0

    buffer[0] = PICC_SElECTTAG;
 80015f8:	2393      	movs	r3, #147	@ 0x93
 80015fa:	733b      	strb	r3, [r7, #12]
    buffer[1] = 0x70;
 80015fc:	2370      	movs	r3, #112	@ 0x70
 80015fe:	737b      	strb	r3, [r7, #13]
    for (i=0; i<5; i++)
 8001600:	2300      	movs	r3, #0
 8001602:	77fb      	strb	r3, [r7, #31]
 8001604:	e00c      	b.n	8001620 <MFRC522_SelectTag+0x30>
    {
    	buffer[i+2] = *(serNum+i);
 8001606:	7ffb      	ldrb	r3, [r7, #31]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	441a      	add	r2, r3
 800160c:	7ffb      	ldrb	r3, [r7, #31]
 800160e:	3302      	adds	r3, #2
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	3320      	adds	r3, #32
 8001614:	443b      	add	r3, r7
 8001616:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<5; i++)
 800161a:	7ffb      	ldrb	r3, [r7, #31]
 800161c:	3301      	adds	r3, #1
 800161e:	77fb      	strb	r3, [r7, #31]
 8001620:	7ffb      	ldrb	r3, [r7, #31]
 8001622:	2b04      	cmp	r3, #4
 8001624:	d9ef      	bls.n	8001606 <MFRC522_SelectTag+0x16>
    }
	CalulateCRC(buffer, 7, &buffer[7]);
 8001626:	f107 030c 	add.w	r3, r7, #12
 800162a:	1dda      	adds	r2, r3, #7
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	2107      	movs	r1, #7
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff93 	bl	800155e <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 8001638:	f107 020c 	add.w	r2, r7, #12
 800163c:	f107 010c 	add.w	r1, r7, #12
 8001640:	f107 0318 	add.w	r3, r7, #24
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	4613      	mov	r3, r2
 8001648:	2209      	movs	r2, #9
 800164a:	200c      	movs	r0, #12
 800164c:	f7ff fe5c 	bl	8001308 <MFRC522_ToCard>
 8001650:	4603      	mov	r3, r0
 8001652:	777b      	strb	r3, [r7, #29]

    if ((status == MI_OK) && (recvBits == 0x18))
 8001654:	7f7b      	ldrb	r3, [r7, #29]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d105      	bne.n	8001666 <MFRC522_SelectTag+0x76>
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	2b18      	cmp	r3, #24
 800165e:	d102      	bne.n	8001666 <MFRC522_SelectTag+0x76>
    {
		size = buffer[0];
 8001660:	7b3b      	ldrb	r3, [r7, #12]
 8001662:	77bb      	strb	r3, [r7, #30]
 8001664:	e001      	b.n	800166a <MFRC522_SelectTag+0x7a>
	}
    else
    {
		size = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	77bb      	strb	r3, [r7, #30]
	}

    return size;
 800166a:	7fbb      	ldrb	r3, [r7, #30]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3720      	adds	r7, #32
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <MFRC522_Auth>:
             Sectorkey--Sector password
             serNum--Card serial number, 4-byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Auth(uchar authMode, uchar BlockAddr, uchar *Sectorkey, uchar *serNum)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08c      	sub	sp, #48	@ 0x30
 8001678:	af02      	add	r7, sp, #8
 800167a:	60ba      	str	r2, [r7, #8]
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	4603      	mov	r3, r0
 8001680:	73fb      	strb	r3, [r7, #15]
 8001682:	460b      	mov	r3, r1
 8001684:	73bb      	strb	r3, [r7, #14]
    uint recvBits;
    uchar i;
	uchar buff[12];

	//Verify the command block address + sector + password + card serial number
    buff[0] = authMode;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	753b      	strb	r3, [r7, #20]
    buff[1] = BlockAddr;
 800168a:	7bbb      	ldrb	r3, [r7, #14]
 800168c:	757b      	strb	r3, [r7, #21]
    for (i=0; i<6; i++)
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001694:	e010      	b.n	80016b8 <MFRC522_Auth+0x44>
    {
		buff[i+2] = *(Sectorkey+i);
 8001696:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	441a      	add	r2, r3
 800169e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016a2:	3302      	adds	r3, #2
 80016a4:	7812      	ldrb	r2, [r2, #0]
 80016a6:	3328      	adds	r3, #40	@ 0x28
 80016a8:	443b      	add	r3, r7
 80016aa:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<6; i++)
 80016ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016b2:	3301      	adds	r3, #1
 80016b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80016b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016bc:	2b05      	cmp	r3, #5
 80016be:	d9ea      	bls.n	8001696 <MFRC522_Auth+0x22>
	}
    for (i=0; i<4; i++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80016c6:	e010      	b.n	80016ea <MFRC522_Auth+0x76>
    {
		buff[i+8] = *(serNum+i);
 80016c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	441a      	add	r2, r3
 80016d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016d4:	3308      	adds	r3, #8
 80016d6:	7812      	ldrb	r2, [r2, #0]
 80016d8:	3328      	adds	r3, #40	@ 0x28
 80016da:	443b      	add	r3, r7
 80016dc:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<4; i++)
 80016e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016e4:	3301      	adds	r3, #1
 80016e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80016ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d9ea      	bls.n	80016c8 <MFRC522_Auth+0x54>
	}
    status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 80016f2:	f107 0214 	add.w	r2, r7, #20
 80016f6:	f107 0114 	add.w	r1, r7, #20
 80016fa:	f107 0320 	add.w	r3, r7, #32
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	4613      	mov	r3, r2
 8001702:	220c      	movs	r2, #12
 8001704:	200e      	movs	r0, #14
 8001706:	f7ff fdff 	bl	8001308 <MFRC522_ToCard>
 800170a:	4603      	mov	r3, r0
 800170c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if ((status != MI_OK) || (!(Read_MFRC522(Status2Reg) & 0x08)))
 8001710:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001714:	2b00      	cmp	r3, #0
 8001716:	d107      	bne.n	8001728 <MFRC522_Auth+0xb4>
 8001718:	2008      	movs	r0, #8
 800171a:	f7ff fd51 	bl	80011c0 <Read_MFRC522>
 800171e:	4603      	mov	r3, r0
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <MFRC522_Auth+0xba>
    {
		status = MI_ERR;
 8001728:	2302      	movs	r3, #2
 800172a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

    return status;
 800172e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001732:	4618      	mov	r0, r3
 8001734:	3728      	adds	r7, #40	@ 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <MFRC522_Read>:
 * Description: Read block data
 * Input parameters: blockAddr - block address; recvData - read block data
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Read(uchar blockAddr, uchar *recvData)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af02      	add	r7, sp, #8
 8001740:	4603      	mov	r3, r0
 8001742:	6039      	str	r1, [r7, #0]
 8001744:	71fb      	strb	r3, [r7, #7]
    uchar status;
    uint unLen;

    recvData[0] = PICC_READ;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2230      	movs	r2, #48	@ 0x30
 800174a:	701a      	strb	r2, [r3, #0]
    recvData[1] = blockAddr;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	3301      	adds	r3, #1
 8001750:	79fa      	ldrb	r2, [r7, #7]
 8001752:	701a      	strb	r2, [r3, #0]
    CalulateCRC(recvData,2, &recvData[2]);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	3302      	adds	r3, #2
 8001758:	461a      	mov	r2, r3
 800175a:	2102      	movs	r1, #2
 800175c:	6838      	ldr	r0, [r7, #0]
 800175e:	f7ff fefe 	bl	800155e <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2204      	movs	r2, #4
 800176c:	6839      	ldr	r1, [r7, #0]
 800176e:	200c      	movs	r0, #12
 8001770:	f7ff fdca 	bl	8001308 <MFRC522_ToCard>
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]

    if ((status != MI_OK) || (unLen != 0x90))
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <MFRC522_Read+0x4a>
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2b90      	cmp	r3, #144	@ 0x90
 8001782:	d001      	beq.n	8001788 <MFRC522_Read+0x4e>
    {
        status = MI_ERR;
 8001784:	2302      	movs	r3, #2
 8001786:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <MFRC522_Halt>:
 * Description: Command card into hibernation
 * Input: None
 * Return value: None
 */
void MFRC522_Halt(void)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af02      	add	r7, sp, #8
	uint unLen;
	uchar buff[4];

	buff[0] = PICC_HALT;
 8001798:	2350      	movs	r3, #80	@ 0x50
 800179a:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	707b      	strb	r3, [r7, #1]
	CalulateCRC(buff, 2, &buff[2]);
 80017a0:	463b      	mov	r3, r7
 80017a2:	1c9a      	adds	r2, r3, #2
 80017a4:	463b      	mov	r3, r7
 80017a6:	2102      	movs	r1, #2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fed8 	bl	800155e <CalulateCRC>

	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
 80017ae:	463a      	mov	r2, r7
 80017b0:	4639      	mov	r1, r7
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	4613      	mov	r3, r2
 80017b8:	2204      	movs	r2, #4
 80017ba:	200c      	movs	r0, #12
 80017bc:	f7ff fda4 	bl	8001308 <MFRC522_ToCard>
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <RB_Read>:
//
// RingBuffer_t *Buf - pointer to Ring Buffer structure
// uint8_t *Value - pointer to place where a value from buffer is read
//
RB_Status RB_Read(RingBuffer_t *Buf, uint8_t *Value)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
	// Check if Tail hit Head
	if(Buf->Head == Buf->Tail)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	881a      	ldrh	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	885b      	ldrh	r3, [r3, #2]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d101      	bne.n	80017e2 <RB_Read+0x1a>
	{
		// If yes - there is nothing to read
		return RB_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e015      	b.n	800180e <RB_Read+0x46>
	}

	// Write current value from buffer to pointer from argument
	*Value = Buf->Buffer[Buf->Tail];
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	885b      	ldrh	r3, [r3, #2]
 80017e6:	461a      	mov	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4413      	add	r3, r2
 80017ec:	791a      	ldrb	r2, [r3, #4]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	701a      	strb	r2, [r3, #0]

	// Calculate new Tail pointer
	Buf->Tail = (Buf->Tail + 1) % RING_BUFFER_SIZE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	885b      	ldrh	r3, [r3, #2]
 80017f6:	3301      	adds	r3, #1
 80017f8:	425a      	negs	r2, r3
 80017fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017fe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001802:	bf58      	it	pl
 8001804:	4253      	negpl	r3, r2
 8001806:	b29a      	uxth	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	805a      	strh	r2, [r3, #2]

	// Everything is ok - return OK status
	return RB_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <RB_Write>:
//
// RingBuffer_t *Buf - pointer to Ring Buffer structure
// uint8_t Value - a value to store in the buffer
//
RB_Status RB_Write(RingBuffer_t *Buf, uint8_t Value)
{
 800181a:	b480      	push	{r7}
 800181c:	b085      	sub	sp, #20
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	460b      	mov	r3, r1
 8001824:	70fb      	strb	r3, [r7, #3]
	// Calculate new Head pointer value
	uint8_t HeadTmp = (Buf->Head + 1) % RING_BUFFER_SIZE;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	425a      	negs	r2, r3
 800182e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001832:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001836:	bf58      	it	pl
 8001838:	4253      	negpl	r3, r2
 800183a:	73fb      	strb	r3, [r7, #15]

	// Check if there is one free space ahead the Head buffer
	if(HeadTmp == Buf->Tail)
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	b29a      	uxth	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	885b      	ldrh	r3, [r3, #2]
 8001844:	429a      	cmp	r2, r3
 8001846:	d101      	bne.n	800184c <RB_Write+0x32>
	{
		// There is no space in the buffer - return an error
		return RB_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e00b      	b.n	8001864 <RB_Write+0x4a>
	}

	// Store a value into the buffer
	Buf->Buffer[Buf->Head] = Value;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	711a      	strb	r2, [r3, #4]

	// Remember a new Head pointer value
	Buf->Head = HeadTmp;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	b29a      	uxth	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	801a      	strh	r2, [r3, #0]

	// Everything is ok - return OK status
	return RB_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <RB_Flush>:

//
// Free whole Ring Buffer
//
void RB_Flush(RingBuffer_t *Buf)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	// Just reset Head and Tail pointers
	Buf->Head = 0;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	801a      	strh	r2, [r3, #0]
	Buf->Tail = 0;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	805a      	strh	r2, [r3, #2]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001894:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <MX_SPI1_Init+0x64>)
 8001896:	4a18      	ldr	r2, [pc, #96]	@ (80018f8 <MX_SPI1_Init+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800189a:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <MX_SPI1_Init+0x64>)
 800189c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018a2:	4b14      	ldr	r3, [pc, #80]	@ (80018f4 <MX_SPI1_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018a8:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <MX_SPI1_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ae:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <MX_SPI1_Init+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <MX_SPI1_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <MX_SPI1_Init+0x64>)
 80018bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018c2:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <MX_SPI1_Init+0x64>)
 80018c4:	2210      	movs	r2, #16
 80018c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <MX_SPI1_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ce:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <MX_SPI1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d4:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <MX_SPI1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <MX_SPI1_Init+0x64>)
 80018dc:	220a      	movs	r2, #10
 80018de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018e0:	4804      	ldr	r0, [pc, #16]	@ (80018f4 <MX_SPI1_Init+0x64>)
 80018e2:	f003 f9bb 	bl	8004c5c <HAL_SPI_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018ec:	f7ff fba4 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000248 	.word	0x20000248
 80018f8:	40013000 	.word	0x40013000

080018fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	@ 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a19      	ldr	r2, [pc, #100]	@ (8001980 <HAL_SPI_MspInit+0x84>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d12b      	bne.n	8001976 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <HAL_SPI_MspInit+0x88>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001926:	4a17      	ldr	r2, [pc, #92]	@ (8001984 <HAL_SPI_MspInit+0x88>)
 8001928:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800192c:	6453      	str	r3, [r2, #68]	@ 0x44
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <HAL_SPI_MspInit+0x88>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <HAL_SPI_MspInit+0x88>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a10      	ldr	r2, [pc, #64]	@ (8001984 <HAL_SPI_MspInit+0x88>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <HAL_SPI_MspInit+0x88>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001956:	23e0      	movs	r3, #224	@ 0xe0
 8001958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001966:	2305      	movs	r3, #5
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	@ (8001988 <HAL_SPI_MspInit+0x8c>)
 8001972:	f000 ff8f 	bl	8002894 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001976:	bf00      	nop
 8001978:	3728      	adds	r7, #40	@ 0x28
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40013000 	.word	0x40013000
 8001984:	40023800 	.word	0x40023800
 8001988:	40020000 	.word	0x40020000

0800198c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <HAL_MspInit+0x4c>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	4a0f      	ldr	r2, [pc, #60]	@ (80019d8 <HAL_MspInit+0x4c>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a2:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	4a08      	ldr	r2, [pc, #32]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ca:	2007      	movs	r0, #7
 80019cc:	f000 fba4 	bl	8002118 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <NMI_Handler+0x4>

080019e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	//  HAL_GPIO_WritePin(Hirata_NG_GPIO_Port, Hirata_NG_Pin, GPIO_PIN_RESET);
	  //UART_Log("Hard Fault\n\r");
	  HAL_GPIO_WritePin(ST_RED_GPIO_Port, ST_RED_Pin, GPIO_PIN_SET);
 80019e8:	2201      	movs	r2, #1
 80019ea:	2104      	movs	r1, #4
 80019ec:	4801      	ldr	r0, [pc, #4]	@ (80019f4 <HardFault_Handler+0x10>)
 80019ee:	f001 f8ed 	bl	8002bcc <HAL_GPIO_WritePin>
 80019f2:	e7f9      	b.n	80019e8 <HardFault_Handler+0x4>
 80019f4:	40020c00 	.word	0x40020c00

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <MemManage_Handler+0x4>

08001a00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <BusFault_Handler+0x4>

08001a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <UsageFault_Handler+0x4>

08001a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a3e:	f000 fa57 	bl	8001ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <DMA2_Stream1_IRQHandler+0x10>)
 8001a4e:	f000 fce5 	bl	800241c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000378 	.word	0x20000378

08001a5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <OTG_FS_IRQHandler+0x10>)
 8001a62:	f001 fb55 	bl	8003110 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2000191c 	.word	0x2000191c

08001a70 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <DMA2_Stream6_IRQHandler+0x10>)
 8001a76:	f000 fcd1 	bl	800241c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200003d8 	.word	0x200003d8

08001a84 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <USART6_IRQHandler+0x10>)
 8001a8a:	f003 fcf5 	bl	8005478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000330 	.word	0x20000330

08001a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a9c:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <SystemInit+0x20>)
 8001a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aa2:	4a05      	ldr	r2, [pc, #20]	@ (8001ab8 <SystemInit+0x20>)
 8001aa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	@ (8001b0c <MX_USART1_UART_Init+0x50>)
 8001ac4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ac6:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ac8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001acc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ae0:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aec:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001af2:	4805      	ldr	r0, [pc, #20]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001af4:	f003 fbc0 	bl	8005278 <HAL_UART_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001afe:	f7ff fa9b 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200002a0 	.word	0x200002a0
 8001b0c:	40011000 	.word	0x40011000

08001b10 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b14:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b16:	4a12      	ldr	r2, [pc, #72]	@ (8001b60 <MX_USART2_UART_Init+0x50>)
 8001b18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b1a:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b34:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b36:	220c      	movs	r2, #12
 8001b38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b46:	4805      	ldr	r0, [pc, #20]	@ (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b48:	f003 fb96 	bl	8005278 <HAL_UART_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b52:	f7ff fa71 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200002e8 	.word	0x200002e8
 8001b60:	40004400 	.word	0x40004400

08001b64 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b68:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <MX_USART6_UART_Init+0x4c>)
 8001b6a:	4a12      	ldr	r2, [pc, #72]	@ (8001bb4 <MX_USART6_UART_Init+0x50>)
 8001b6c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001b6e:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <MX_USART6_UART_Init+0x4c>)
 8001b70:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b74:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <MX_USART6_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <MX_USART6_UART_Init+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b82:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb0 <MX_USART6_UART_Init+0x4c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b88:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <MX_USART6_UART_Init+0x4c>)
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8e:	4b08      	ldr	r3, [pc, #32]	@ (8001bb0 <MX_USART6_UART_Init+0x4c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b94:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <MX_USART6_UART_Init+0x4c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b9a:	4805      	ldr	r0, [pc, #20]	@ (8001bb0 <MX_USART6_UART_Init+0x4c>)
 8001b9c:	f003 fb6c 	bl	8005278 <HAL_UART_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001ba6:	f7ff fa47 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000330 	.word	0x20000330
 8001bb4:	40011400 	.word	0x40011400

08001bb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08e      	sub	sp, #56	@ 0x38
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a7e      	ldr	r2, [pc, #504]	@ (8001dd0 <HAL_UART_MspInit+0x218>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d12d      	bne.n	8001c36 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	623b      	str	r3, [r7, #32]
 8001bde:	4b7d      	ldr	r3, [pc, #500]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be2:	4a7c      	ldr	r2, [pc, #496]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001be4:	f043 0310 	orr.w	r3, r3, #16
 8001be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bea:	4b7a      	ldr	r3, [pc, #488]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	623b      	str	r3, [r7, #32]
 8001bf4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	4b76      	ldr	r3, [pc, #472]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	4a75      	ldr	r2, [pc, #468]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c06:	4b73      	ldr	r3, [pc, #460]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c12:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c24:	2307      	movs	r3, #7
 8001c26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	486a      	ldr	r0, [pc, #424]	@ (8001dd8 <HAL_UART_MspInit+0x220>)
 8001c30:	f000 fe30 	bl	8002894 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001c34:	e0c7      	b.n	8001dc6 <HAL_UART_MspInit+0x20e>
  else if(uartHandle->Instance==USART2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a68      	ldr	r2, [pc, #416]	@ (8001ddc <HAL_UART_MspInit+0x224>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d12c      	bne.n	8001c9a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	4b63      	ldr	r3, [pc, #396]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	4a62      	ldr	r2, [pc, #392]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c50:	4b60      	ldr	r3, [pc, #384]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	4b5c      	ldr	r3, [pc, #368]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c64:	4a5b      	ldr	r2, [pc, #364]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6c:	4b59      	ldr	r3, [pc, #356]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c78:	230c      	movs	r3, #12
 8001c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c88:	2307      	movs	r3, #7
 8001c8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c90:	4619      	mov	r1, r3
 8001c92:	4851      	ldr	r0, [pc, #324]	@ (8001dd8 <HAL_UART_MspInit+0x220>)
 8001c94:	f000 fdfe 	bl	8002894 <HAL_GPIO_Init>
}
 8001c98:	e095      	b.n	8001dc6 <HAL_UART_MspInit+0x20e>
  else if(uartHandle->Instance==USART6)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a50      	ldr	r2, [pc, #320]	@ (8001de0 <HAL_UART_MspInit+0x228>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	f040 8090 	bne.w	8001dc6 <HAL_UART_MspInit+0x20e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	4b4a      	ldr	r3, [pc, #296]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cae:	4a49      	ldr	r2, [pc, #292]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001cb0:	f043 0320 	orr.w	r3, r3, #32
 8001cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cb6:	4b47      	ldr	r3, [pc, #284]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b43      	ldr	r3, [pc, #268]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a42      	ldr	r2, [pc, #264]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b40      	ldr	r3, [pc, #256]	@ (8001dd4 <HAL_UART_MspInit+0x21c>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cde:	23c0      	movs	r3, #192	@ 0xc0
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001cee:	2308      	movs	r3, #8
 8001cf0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	483a      	ldr	r0, [pc, #232]	@ (8001de4 <HAL_UART_MspInit+0x22c>)
 8001cfa:	f000 fdcb 	bl	8002894 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001cfe:	4b3a      	ldr	r3, [pc, #232]	@ (8001de8 <HAL_UART_MspInit+0x230>)
 8001d00:	4a3a      	ldr	r2, [pc, #232]	@ (8001dec <HAL_UART_MspInit+0x234>)
 8001d02:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001d04:	4b38      	ldr	r3, [pc, #224]	@ (8001de8 <HAL_UART_MspInit+0x230>)
 8001d06:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001d0a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d0c:	4b36      	ldr	r3, [pc, #216]	@ (8001de8 <HAL_UART_MspInit+0x230>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d12:	4b35      	ldr	r3, [pc, #212]	@ (8001de8 <HAL_UART_MspInit+0x230>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d18:	4b33      	ldr	r3, [pc, #204]	@ (8001de8 <HAL_UART_MspInit+0x230>)
 8001d1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d1e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d20:	4b31      	ldr	r3, [pc, #196]	@ (8001de8 <HAL_UART_MspInit+0x230>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d26:	4b30      	ldr	r3, [pc, #192]	@ (8001de8 <HAL_UART_MspInit+0x230>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001de8 <HAL_UART_MspInit+0x230>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d32:	4b2d      	ldr	r3, [pc, #180]	@ (8001de8 <HAL_UART_MspInit+0x230>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d38:	4b2b      	ldr	r3, [pc, #172]	@ (8001de8 <HAL_UART_MspInit+0x230>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001d3e:	482a      	ldr	r0, [pc, #168]	@ (8001de8 <HAL_UART_MspInit+0x230>)
 8001d40:	f000 fa2c 	bl	800219c <HAL_DMA_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_UART_MspInit+0x196>
      Error_Handler();
 8001d4a:	f7ff f975 	bl	8001038 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a25      	ldr	r2, [pc, #148]	@ (8001de8 <HAL_UART_MspInit+0x230>)
 8001d52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d54:	4a24      	ldr	r2, [pc, #144]	@ (8001de8 <HAL_UART_MspInit+0x230>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001d5a:	4b25      	ldr	r3, [pc, #148]	@ (8001df0 <HAL_UART_MspInit+0x238>)
 8001d5c:	4a25      	ldr	r2, [pc, #148]	@ (8001df4 <HAL_UART_MspInit+0x23c>)
 8001d5e:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001d60:	4b23      	ldr	r3, [pc, #140]	@ (8001df0 <HAL_UART_MspInit+0x238>)
 8001d62:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001d66:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d68:	4b21      	ldr	r3, [pc, #132]	@ (8001df0 <HAL_UART_MspInit+0x238>)
 8001d6a:	2240      	movs	r2, #64	@ 0x40
 8001d6c:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d6e:	4b20      	ldr	r3, [pc, #128]	@ (8001df0 <HAL_UART_MspInit+0x238>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d74:	4b1e      	ldr	r3, [pc, #120]	@ (8001df0 <HAL_UART_MspInit+0x238>)
 8001d76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d7a:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001df0 <HAL_UART_MspInit+0x238>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d82:	4b1b      	ldr	r3, [pc, #108]	@ (8001df0 <HAL_UART_MspInit+0x238>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001d88:	4b19      	ldr	r3, [pc, #100]	@ (8001df0 <HAL_UART_MspInit+0x238>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d8e:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <HAL_UART_MspInit+0x238>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d94:	4b16      	ldr	r3, [pc, #88]	@ (8001df0 <HAL_UART_MspInit+0x238>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001d9a:	4815      	ldr	r0, [pc, #84]	@ (8001df0 <HAL_UART_MspInit+0x238>)
 8001d9c:	f000 f9fe 	bl	800219c <HAL_DMA_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_UART_MspInit+0x1f2>
      Error_Handler();
 8001da6:	f7ff f947 	bl	8001038 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a10      	ldr	r2, [pc, #64]	@ (8001df0 <HAL_UART_MspInit+0x238>)
 8001dae:	639a      	str	r2, [r3, #56]	@ 0x38
 8001db0:	4a0f      	ldr	r2, [pc, #60]	@ (8001df0 <HAL_UART_MspInit+0x238>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	2047      	movs	r0, #71	@ 0x47
 8001dbc:	f000 f9b7 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001dc0:	2047      	movs	r0, #71	@ 0x47
 8001dc2:	f000 f9d0 	bl	8002166 <HAL_NVIC_EnableIRQ>
}
 8001dc6:	bf00      	nop
 8001dc8:	3738      	adds	r7, #56	@ 0x38
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40011000 	.word	0x40011000
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	40004400 	.word	0x40004400
 8001de0:	40011400 	.word	0x40011400
 8001de4:	40020800 	.word	0x40020800
 8001de8:	20000378 	.word	0x20000378
 8001dec:	40026428 	.word	0x40026428
 8001df0:	200003d8 	.word	0x200003d8
 8001df4:	400264a0 	.word	0x400264a0

08001df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001df8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dfc:	f7ff fe4c 	bl	8001a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e00:	480c      	ldr	r0, [pc, #48]	@ (8001e34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e02:	490d      	ldr	r1, [pc, #52]	@ (8001e38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e04:	4a0d      	ldr	r2, [pc, #52]	@ (8001e3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e16:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e18:	4c0a      	ldr	r4, [pc, #40]	@ (8001e44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e26:	f008 faf9 	bl	800a41c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2a:	f7fe fcd5 	bl	80007d8 <main>
  bx  lr    
 8001e2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8001e3c:	0800a604 	.word	0x0800a604
  ldr r2, =_sbss
 8001e40:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8001e44:	20002020 	.word	0x20002020

08001e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e50:	4b0e      	ldr	r3, [pc, #56]	@ (8001e8c <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0d      	ldr	r2, [pc, #52]	@ (8001e8c <HAL_Init+0x40>)
 8001e56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	@ (8001e8c <HAL_Init+0x40>)
 8001e62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	@ (8001e8c <HAL_Init+0x40>)
 8001e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 f94f 	bl	8002118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 f808 	bl	8001e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff fd84 	bl	800198c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023c00 	.word	0x40023c00

08001e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e98:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <HAL_InitTick+0x54>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_InitTick+0x58>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f967 	bl	8002182 <HAL_SYSTICK_Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00e      	b.n	8001edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	d80a      	bhi.n	8001eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f000 f92f 	bl	800212e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed0:	4a06      	ldr	r2, [pc, #24]	@ (8001eec <HAL_InitTick+0x5c>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000024 	.word	0x20000024
 8001ee8:	2000002c 	.word	0x2000002c
 8001eec:	20000028 	.word	0x20000028

08001ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_IncTick+0x20>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_IncTick+0x24>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	@ (8001f14 <HAL_IncTick+0x24>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	2000002c 	.word	0x2000002c
 8001f14:	20000438 	.word	0x20000438

08001f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	@ (8001f2c <HAL_GetTick+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000438 	.word	0x20000438

08001f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff ffee 	bl	8001f18 <HAL_GetTick>
 8001f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d005      	beq.n	8001f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <HAL_Delay+0x44>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f56:	bf00      	nop
 8001f58:	f7ff ffde 	bl	8001f18 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d8f7      	bhi.n	8001f58 <HAL_Delay+0x28>
  {
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000002c 	.word	0x2000002c

08001f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001faa:	4a04      	ldr	r2, [pc, #16]	@ (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0307 	and.w	r3, r3, #7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db0b      	blt.n	8002006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f003 021f 	and.w	r2, r3, #31
 8001ff4:	4907      	ldr	r1, [pc, #28]	@ (8002014 <__NVIC_EnableIRQ+0x38>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e100 	.word	0xe000e100

08002018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	2b00      	cmp	r3, #0
 800202a:	db0a      	blt.n	8002042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	490c      	ldr	r1, [pc, #48]	@ (8002064 <__NVIC_SetPriority+0x4c>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	440b      	add	r3, r1
 800203c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002040:	e00a      	b.n	8002058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4908      	ldr	r1, [pc, #32]	@ (8002068 <__NVIC_SetPriority+0x50>)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	3b04      	subs	r3, #4
 8002050:	0112      	lsls	r2, r2, #4
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	440b      	add	r3, r1
 8002056:	761a      	strb	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	@ 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f1c3 0307 	rsb	r3, r3, #7
 8002086:	2b04      	cmp	r3, #4
 8002088:	bf28      	it	cs
 800208a:	2304      	movcs	r3, #4
 800208c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3304      	adds	r3, #4
 8002092:	2b06      	cmp	r3, #6
 8002094:	d902      	bls.n	800209c <NVIC_EncodePriority+0x30>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3b03      	subs	r3, #3
 800209a:	e000      	b.n	800209e <NVIC_EncodePriority+0x32>
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43d9      	mvns	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	4313      	orrs	r3, r2
         );
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	@ 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020e4:	d301      	bcc.n	80020ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00f      	b.n	800210a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <SysTick_Config+0x40>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f2:	210f      	movs	r1, #15
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f7ff ff8e 	bl	8002018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020fc:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <SysTick_Config+0x40>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002102:	4b04      	ldr	r3, [pc, #16]	@ (8002114 <SysTick_Config+0x40>)
 8002104:	2207      	movs	r2, #7
 8002106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	e000e010 	.word	0xe000e010

08002118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff29 	bl	8001f78 <__NVIC_SetPriorityGrouping>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002140:	f7ff ff3e 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 8002144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f7ff ff8e 	bl	800206c <NVIC_EncodePriority>
 8002150:	4602      	mov	r2, r0
 8002152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff5d 	bl	8002018 <__NVIC_SetPriority>
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff31 	bl	8001fdc <__NVIC_EnableIRQ>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ffa2 	bl	80020d4 <SysTick_Config>
 8002190:	4603      	mov	r3, r0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021a8:	f7ff feb6 	bl	8001f18 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e099      	b.n	80022ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0201 	bic.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d8:	e00f      	b.n	80021fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021da:	f7ff fe9d 	bl	8001f18 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b05      	cmp	r3, #5
 80021e6:	d908      	bls.n	80021fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2203      	movs	r2, #3
 80021f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e078      	b.n	80022ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e8      	bne.n	80021da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	4b38      	ldr	r3, [pc, #224]	@ (80022f4 <HAL_DMA_Init+0x158>)
 8002214:	4013      	ands	r3, r2
 8002216:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002226:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002232:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800223e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	2b04      	cmp	r3, #4
 8002252:	d107      	bne.n	8002264 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225c:	4313      	orrs	r3, r2
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4313      	orrs	r3, r2
 8002262:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f023 0307 	bic.w	r3, r3, #7
 800227a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228a:	2b04      	cmp	r3, #4
 800228c:	d117      	bne.n	80022be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	4313      	orrs	r3, r2
 8002296:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00e      	beq.n	80022be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 fa7b 	bl	800279c <DMA_CheckFifoParam>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2240      	movs	r2, #64	@ 0x40
 80022b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80022ba:	2301      	movs	r3, #1
 80022bc:	e016      	b.n	80022ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fa32 	bl	8002730 <DMA_CalcBaseAndBitshift>
 80022cc:	4603      	mov	r3, r0
 80022ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d4:	223f      	movs	r2, #63	@ 0x3f
 80022d6:	409a      	lsls	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	f010803f 	.word	0xf010803f

080022f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002304:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002306:	f7ff fe07 	bl	8001f18 <HAL_GetTick>
 800230a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d008      	beq.n	800232a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2280      	movs	r2, #128	@ 0x80
 800231c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e052      	b.n	80023d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0216 	bic.w	r2, r2, #22
 8002338:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695a      	ldr	r2, [r3, #20]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002348:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	2b00      	cmp	r3, #0
 8002350:	d103      	bne.n	800235a <HAL_DMA_Abort+0x62>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0208 	bic.w	r2, r2, #8
 8002368:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800237a:	e013      	b.n	80023a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800237c:	f7ff fdcc 	bl	8001f18 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b05      	cmp	r3, #5
 8002388:	d90c      	bls.n	80023a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2220      	movs	r2, #32
 800238e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2203      	movs	r2, #3
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e015      	b.n	80023d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1e4      	bne.n	800237c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b6:	223f      	movs	r2, #63	@ 0x3f
 80023b8:	409a      	lsls	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d004      	beq.n	80023f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2280      	movs	r2, #128	@ 0x80
 80023f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00c      	b.n	8002410 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2205      	movs	r2, #5
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0201 	bic.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002428:	4b8e      	ldr	r3, [pc, #568]	@ (8002664 <HAL_DMA_IRQHandler+0x248>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a8e      	ldr	r2, [pc, #568]	@ (8002668 <HAL_DMA_IRQHandler+0x24c>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	0a9b      	lsrs	r3, r3, #10
 8002434:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002446:	2208      	movs	r2, #8
 8002448:	409a      	lsls	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d01a      	beq.n	8002488 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d013      	beq.n	8002488 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0204 	bic.w	r2, r2, #4
 800246e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002474:	2208      	movs	r2, #8
 8002476:	409a      	lsls	r2, r3
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002480:	f043 0201 	orr.w	r2, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248c:	2201      	movs	r2, #1
 800248e:	409a      	lsls	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d012      	beq.n	80024be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024aa:	2201      	movs	r2, #1
 80024ac:	409a      	lsls	r2, r3
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b6:	f043 0202 	orr.w	r2, r3, #2
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c2:	2204      	movs	r2, #4
 80024c4:	409a      	lsls	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d012      	beq.n	80024f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00b      	beq.n	80024f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e0:	2204      	movs	r2, #4
 80024e2:	409a      	lsls	r2, r3
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ec:	f043 0204 	orr.w	r2, r3, #4
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f8:	2210      	movs	r2, #16
 80024fa:	409a      	lsls	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d043      	beq.n	800258c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d03c      	beq.n	800258c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002516:	2210      	movs	r2, #16
 8002518:	409a      	lsls	r2, r3
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d018      	beq.n	800255e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d108      	bne.n	800254c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	d024      	beq.n	800258c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	4798      	blx	r3
 800254a:	e01f      	b.n	800258c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002550:	2b00      	cmp	r3, #0
 8002552:	d01b      	beq.n	800258c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4798      	blx	r3
 800255c:	e016      	b.n	800258c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d107      	bne.n	800257c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0208 	bic.w	r2, r2, #8
 800257a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002590:	2220      	movs	r2, #32
 8002592:	409a      	lsls	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 808f 	beq.w	80026bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8087 	beq.w	80026bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b2:	2220      	movs	r2, #32
 80025b4:	409a      	lsls	r2, r3
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d136      	bne.n	8002634 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0216 	bic.w	r2, r2, #22
 80025d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d103      	bne.n	80025f6 <HAL_DMA_IRQHandler+0x1da>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d007      	beq.n	8002606 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0208 	bic.w	r2, r2, #8
 8002604:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260a:	223f      	movs	r2, #63	@ 0x3f
 800260c:	409a      	lsls	r2, r3
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002626:	2b00      	cmp	r3, #0
 8002628:	d07e      	beq.n	8002728 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	4798      	blx	r3
        }
        return;
 8002632:	e079      	b.n	8002728 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d01d      	beq.n	800267e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10d      	bne.n	800266c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002654:	2b00      	cmp	r3, #0
 8002656:	d031      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
 8002660:	e02c      	b.n	80026bc <HAL_DMA_IRQHandler+0x2a0>
 8002662:	bf00      	nop
 8002664:	20000024 	.word	0x20000024
 8002668:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002670:	2b00      	cmp	r3, #0
 8002672:	d023      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	4798      	blx	r3
 800267c:	e01e      	b.n	80026bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10f      	bne.n	80026ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0210 	bic.w	r2, r2, #16
 800269a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d032      	beq.n	800272a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d022      	beq.n	8002716 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2205      	movs	r2, #5
 80026d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	3301      	adds	r3, #1
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d307      	bcc.n	8002704 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f2      	bne.n	80026e8 <HAL_DMA_IRQHandler+0x2cc>
 8002702:	e000      	b.n	8002706 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002704:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	4798      	blx	r3
 8002726:	e000      	b.n	800272a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002728:	bf00      	nop
    }
  }
}
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	3b10      	subs	r3, #16
 8002740:	4a14      	ldr	r2, [pc, #80]	@ (8002794 <DMA_CalcBaseAndBitshift+0x64>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800274a:	4a13      	ldr	r2, [pc, #76]	@ (8002798 <DMA_CalcBaseAndBitshift+0x68>)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b03      	cmp	r3, #3
 800275c:	d909      	bls.n	8002772 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002766:	f023 0303 	bic.w	r3, r3, #3
 800276a:	1d1a      	adds	r2, r3, #4
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002770:	e007      	b.n	8002782 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800277a:	f023 0303 	bic.w	r3, r3, #3
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	aaaaaaab 	.word	0xaaaaaaab
 8002798:	0800a5ec 	.word	0x0800a5ec

0800279c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d11f      	bne.n	80027f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d856      	bhi.n	800286a <DMA_CheckFifoParam+0xce>
 80027bc:	a201      	add	r2, pc, #4	@ (adr r2, 80027c4 <DMA_CheckFifoParam+0x28>)
 80027be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c2:	bf00      	nop
 80027c4:	080027d5 	.word	0x080027d5
 80027c8:	080027e7 	.word	0x080027e7
 80027cc:	080027d5 	.word	0x080027d5
 80027d0:	0800286b 	.word	0x0800286b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d046      	beq.n	800286e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e4:	e043      	b.n	800286e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027ee:	d140      	bne.n	8002872 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f4:	e03d      	b.n	8002872 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027fe:	d121      	bne.n	8002844 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d837      	bhi.n	8002876 <DMA_CheckFifoParam+0xda>
 8002806:	a201      	add	r2, pc, #4	@ (adr r2, 800280c <DMA_CheckFifoParam+0x70>)
 8002808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280c:	0800281d 	.word	0x0800281d
 8002810:	08002823 	.word	0x08002823
 8002814:	0800281d 	.word	0x0800281d
 8002818:	08002835 	.word	0x08002835
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
      break;
 8002820:	e030      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002826:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d025      	beq.n	800287a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002832:	e022      	b.n	800287a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002838:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800283c:	d11f      	bne.n	800287e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002842:	e01c      	b.n	800287e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d903      	bls.n	8002852 <DMA_CheckFifoParam+0xb6>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d003      	beq.n	8002858 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002850:	e018      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
      break;
 8002856:	e015      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00e      	beq.n	8002882 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
      break;
 8002868:	e00b      	b.n	8002882 <DMA_CheckFifoParam+0xe6>
      break;
 800286a:	bf00      	nop
 800286c:	e00a      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;
 800286e:	bf00      	nop
 8002870:	e008      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;
 8002872:	bf00      	nop
 8002874:	e006      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;
 8002876:	bf00      	nop
 8002878:	e004      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;
 800287a:	bf00      	nop
 800287c:	e002      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;   
 800287e:	bf00      	nop
 8002880:	e000      	b.n	8002884 <DMA_CheckFifoParam+0xe8>
      break;
 8002882:	bf00      	nop
    }
  } 
  
  return status; 
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop

08002894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	@ 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	e159      	b.n	8002b64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	f040 8148 	bne.w	8002b5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d005      	beq.n	80028e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d130      	bne.n	8002948 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	2203      	movs	r2, #3
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 0201 	and.w	r2, r3, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b03      	cmp	r3, #3
 8002952:	d017      	beq.n	8002984 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d123      	bne.n	80029d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	08da      	lsrs	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3208      	adds	r2, #8
 8002998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	220f      	movs	r2, #15
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	08da      	lsrs	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3208      	adds	r2, #8
 80029d2:	69b9      	ldr	r1, [r7, #24]
 80029d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	2203      	movs	r2, #3
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0203 	and.w	r2, r3, #3
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 80a2 	beq.w	8002b5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	4b57      	ldr	r3, [pc, #348]	@ (8002b7c <HAL_GPIO_Init+0x2e8>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a22:	4a56      	ldr	r2, [pc, #344]	@ (8002b7c <HAL_GPIO_Init+0x2e8>)
 8002a24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a2a:	4b54      	ldr	r3, [pc, #336]	@ (8002b7c <HAL_GPIO_Init+0x2e8>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a36:	4a52      	ldr	r2, [pc, #328]	@ (8002b80 <HAL_GPIO_Init+0x2ec>)
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	089b      	lsrs	r3, r3, #2
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	220f      	movs	r2, #15
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a49      	ldr	r2, [pc, #292]	@ (8002b84 <HAL_GPIO_Init+0x2f0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d019      	beq.n	8002a96 <HAL_GPIO_Init+0x202>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a48      	ldr	r2, [pc, #288]	@ (8002b88 <HAL_GPIO_Init+0x2f4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_GPIO_Init+0x1fe>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a47      	ldr	r2, [pc, #284]	@ (8002b8c <HAL_GPIO_Init+0x2f8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00d      	beq.n	8002a8e <HAL_GPIO_Init+0x1fa>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a46      	ldr	r2, [pc, #280]	@ (8002b90 <HAL_GPIO_Init+0x2fc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d007      	beq.n	8002a8a <HAL_GPIO_Init+0x1f6>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a45      	ldr	r2, [pc, #276]	@ (8002b94 <HAL_GPIO_Init+0x300>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_GPIO_Init+0x1f2>
 8002a82:	2304      	movs	r3, #4
 8002a84:	e008      	b.n	8002a98 <HAL_GPIO_Init+0x204>
 8002a86:	2307      	movs	r3, #7
 8002a88:	e006      	b.n	8002a98 <HAL_GPIO_Init+0x204>
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e004      	b.n	8002a98 <HAL_GPIO_Init+0x204>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e002      	b.n	8002a98 <HAL_GPIO_Init+0x204>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_GPIO_Init+0x204>
 8002a96:	2300      	movs	r3, #0
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	f002 0203 	and.w	r2, r2, #3
 8002a9e:	0092      	lsls	r2, r2, #2
 8002aa0:	4093      	lsls	r3, r2
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aa8:	4935      	ldr	r1, [pc, #212]	@ (8002b80 <HAL_GPIO_Init+0x2ec>)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	3302      	adds	r3, #2
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ab6:	4b38      	ldr	r3, [pc, #224]	@ (8002b98 <HAL_GPIO_Init+0x304>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ada:	4a2f      	ldr	r2, [pc, #188]	@ (8002b98 <HAL_GPIO_Init+0x304>)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b98 <HAL_GPIO_Init+0x304>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b04:	4a24      	ldr	r2, [pc, #144]	@ (8002b98 <HAL_GPIO_Init+0x304>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b0a:	4b23      	ldr	r3, [pc, #140]	@ (8002b98 <HAL_GPIO_Init+0x304>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4013      	ands	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8002b98 <HAL_GPIO_Init+0x304>)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b34:	4b18      	ldr	r3, [pc, #96]	@ (8002b98 <HAL_GPIO_Init+0x304>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b58:	4a0f      	ldr	r2, [pc, #60]	@ (8002b98 <HAL_GPIO_Init+0x304>)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3301      	adds	r3, #1
 8002b62:	61fb      	str	r3, [r7, #28]
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	2b0f      	cmp	r3, #15
 8002b68:	f67f aea2 	bls.w	80028b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	3724      	adds	r7, #36	@ 0x24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40013800 	.word	0x40013800
 8002b84:	40020000 	.word	0x40020000
 8002b88:	40020400 	.word	0x40020400
 8002b8c:	40020800 	.word	0x40020800
 8002b90:	40020c00 	.word	0x40020c00
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40013c00 	.word	0x40013c00

08002b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	887b      	ldrh	r3, [r7, #2]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	e001      	b.n	8002bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	807b      	strh	r3, [r7, #2]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bdc:	787b      	ldrb	r3, [r7, #1]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002be2:	887a      	ldrh	r2, [r7, #2]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002be8:	e003      	b.n	8002bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bea:	887b      	ldrh	r3, [r7, #2]
 8002bec:	041a      	lsls	r2, r3, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	619a      	str	r2, [r3, #24]
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e12b      	b.n	8002e6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fd fd8e 	bl	8000748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2224      	movs	r2, #36	@ 0x24
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0201 	bic.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c64:	f001 ffd2 	bl	8004c0c <HAL_RCC_GetPCLK1Freq>
 8002c68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	4a81      	ldr	r2, [pc, #516]	@ (8002e74 <HAL_I2C_Init+0x274>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d807      	bhi.n	8002c84 <HAL_I2C_Init+0x84>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4a80      	ldr	r2, [pc, #512]	@ (8002e78 <HAL_I2C_Init+0x278>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	bf94      	ite	ls
 8002c7c:	2301      	movls	r3, #1
 8002c7e:	2300      	movhi	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	e006      	b.n	8002c92 <HAL_I2C_Init+0x92>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4a7d      	ldr	r2, [pc, #500]	@ (8002e7c <HAL_I2C_Init+0x27c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	bf94      	ite	ls
 8002c8c:	2301      	movls	r3, #1
 8002c8e:	2300      	movhi	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e0e7      	b.n	8002e6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4a78      	ldr	r2, [pc, #480]	@ (8002e80 <HAL_I2C_Init+0x280>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	0c9b      	lsrs	r3, r3, #18
 8002ca4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4a6a      	ldr	r2, [pc, #424]	@ (8002e74 <HAL_I2C_Init+0x274>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d802      	bhi.n	8002cd4 <HAL_I2C_Init+0xd4>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	e009      	b.n	8002ce8 <HAL_I2C_Init+0xe8>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002cda:	fb02 f303 	mul.w	r3, r2, r3
 8002cde:	4a69      	ldr	r2, [pc, #420]	@ (8002e84 <HAL_I2C_Init+0x284>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	099b      	lsrs	r3, r3, #6
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	430b      	orrs	r3, r1
 8002cee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002cfa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	495c      	ldr	r1, [pc, #368]	@ (8002e74 <HAL_I2C_Init+0x274>)
 8002d04:	428b      	cmp	r3, r1
 8002d06:	d819      	bhi.n	8002d3c <HAL_I2C_Init+0x13c>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1e59      	subs	r1, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d16:	1c59      	adds	r1, r3, #1
 8002d18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d1c:	400b      	ands	r3, r1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_I2C_Init+0x138>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1e59      	subs	r1, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d30:	3301      	adds	r3, #1
 8002d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d36:	e051      	b.n	8002ddc <HAL_I2C_Init+0x1dc>
 8002d38:	2304      	movs	r3, #4
 8002d3a:	e04f      	b.n	8002ddc <HAL_I2C_Init+0x1dc>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d111      	bne.n	8002d68 <HAL_I2C_Init+0x168>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1e58      	subs	r0, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	440b      	add	r3, r1
 8002d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d56:	3301      	adds	r3, #1
 8002d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf0c      	ite	eq
 8002d60:	2301      	moveq	r3, #1
 8002d62:	2300      	movne	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	e012      	b.n	8002d8e <HAL_I2C_Init+0x18e>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1e58      	subs	r0, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	0099      	lsls	r1, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_I2C_Init+0x196>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e022      	b.n	8002ddc <HAL_I2C_Init+0x1dc>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10e      	bne.n	8002dbc <HAL_I2C_Init+0x1bc>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1e58      	subs	r0, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6859      	ldr	r1, [r3, #4]
 8002da6:	460b      	mov	r3, r1
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	440b      	add	r3, r1
 8002dac:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dba:	e00f      	b.n	8002ddc <HAL_I2C_Init+0x1dc>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1e58      	subs	r0, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	0099      	lsls	r1, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	6809      	ldr	r1, [r1, #0]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69da      	ldr	r2, [r3, #28]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6911      	ldr	r1, [r2, #16]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68d2      	ldr	r2, [r2, #12]
 8002e16:	4311      	orrs	r1, r2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	000186a0 	.word	0x000186a0
 8002e78:	001e847f 	.word	0x001e847f
 8002e7c:	003d08ff 	.word	0x003d08ff
 8002e80:	431bde83 	.word	0x431bde83
 8002e84:	10624dd3 	.word	0x10624dd3

08002e88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e101      	b.n	800309e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d106      	bne.n	8002eba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f006 ff8d 	bl	8009dd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ec8:	d102      	bne.n	8002ed0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f003 fb3c 	bl	8006552 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	7c1a      	ldrb	r2, [r3, #16]
 8002ee2:	f88d 2000 	strb.w	r2, [sp]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eea:	f003 fa1b 	bl	8006324 <USB_CoreInit>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0ce      	b.n	800309e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f003 fb34 	bl	8006574 <USB_SetCurrentMode>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2202      	movs	r2, #2
 8002f16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0bf      	b.n	800309e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73fb      	strb	r3, [r7, #15]
 8002f22:	e04a      	b.n	8002fba <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f24:	7bfa      	ldrb	r2, [r7, #15]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	3315      	adds	r3, #21
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	3314      	adds	r3, #20
 8002f48:	7bfa      	ldrb	r2, [r7, #15]
 8002f4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	b298      	uxth	r0, r3
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	332e      	adds	r3, #46	@ 0x2e
 8002f60:	4602      	mov	r2, r0
 8002f62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3318      	adds	r3, #24
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f78:	7bfa      	ldrb	r2, [r7, #15]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	331c      	adds	r3, #28
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	3320      	adds	r3, #32
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	3324      	adds	r3, #36	@ 0x24
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	791b      	ldrb	r3, [r3, #4]
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d3af      	bcc.n	8002f24 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]
 8002fc8:	e044      	b.n	8003054 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fca:	7bfa      	ldrb	r2, [r7, #15]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002ff2:	7bfa      	ldrb	r2, [r7, #15]
 8002ff4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ff6:	7bfa      	ldrb	r2, [r7, #15]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003022:	7bfa      	ldrb	r2, [r7, #15]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	3301      	adds	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	791b      	ldrb	r3, [r3, #4]
 8003058:	7bfa      	ldrb	r2, [r7, #15]
 800305a:	429a      	cmp	r2, r3
 800305c:	d3b5      	bcc.n	8002fca <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7c1a      	ldrb	r2, [r3, #16]
 8003066:	f88d 2000 	strb.w	r2, [sp]
 800306a:	3304      	adds	r3, #4
 800306c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800306e:	f003 facd 	bl	800660c <USB_DevInit>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e00c      	b.n	800309e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f004 fb17 	bl	80076ca <USB_DevDisconnect>

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_PCD_Start+0x1c>
 80030be:	2302      	movs	r3, #2
 80030c0:	e022      	b.n	8003108 <HAL_PCD_Start+0x62>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d105      	bne.n	80030ea <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f003 fa1e 	bl	8006530 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f004 fac5 	bl	8007688 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b08d      	sub	sp, #52	@ 0x34
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f004 fb83 	bl	8007832 <USB_GetMode>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	f040 848c 	bne.w	8003a4c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f004 fae7 	bl	800770c <USB_ReadInterrupts>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8482 	beq.w	8003a4a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f004 fad4 	bl	800770c <USB_ReadInterrupts>
 8003164:	4603      	mov	r3, r0
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d107      	bne.n	800317e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f002 0202 	and.w	r2, r2, #2
 800317c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f004 fac2 	bl	800770c <USB_ReadInterrupts>
 8003188:	4603      	mov	r3, r0
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b10      	cmp	r3, #16
 8003190:	d161      	bne.n	8003256 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699a      	ldr	r2, [r3, #24]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0210 	bic.w	r2, r2, #16
 80031a0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	f003 020f 	and.w	r2, r3, #15
 80031ae:	4613      	mov	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	3304      	adds	r3, #4
 80031c0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	0c5b      	lsrs	r3, r3, #17
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d124      	bne.n	8003218 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d035      	beq.n	8003246 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	6a38      	ldr	r0, [r7, #32]
 80031ee:	f004 f8f9 	bl	80073e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031fe:	441a      	add	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	091b      	lsrs	r3, r3, #4
 800320c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003210:	441a      	add	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	615a      	str	r2, [r3, #20]
 8003216:	e016      	b.n	8003246 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	0c5b      	lsrs	r3, r3, #17
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	2b06      	cmp	r3, #6
 8003222:	d110      	bne.n	8003246 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800322a:	2208      	movs	r2, #8
 800322c:	4619      	mov	r1, r3
 800322e:	6a38      	ldr	r0, [r7, #32]
 8003230:	f004 f8d8 	bl	80073e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003240:	441a      	add	r2, r3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699a      	ldr	r2, [r3, #24]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0210 	orr.w	r2, r2, #16
 8003254:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f004 fa56 	bl	800770c <USB_ReadInterrupts>
 8003260:	4603      	mov	r3, r0
 8003262:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003266:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800326a:	f040 80a7 	bne.w	80033bc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f004 fa5b 	bl	8007732 <USB_ReadDevAllOutEpInterrupt>
 800327c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800327e:	e099      	b.n	80033b4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 808e 	beq.w	80033a8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f004 fa7f 	bl	800779a <USB_ReadDevOutEPInterrupt>
 800329c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00c      	beq.n	80032c2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032b4:	461a      	mov	r2, r3
 80032b6:	2301      	movs	r3, #1
 80032b8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80032ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fea3 	bl	8004008 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00c      	beq.n	80032e6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032d8:	461a      	mov	r2, r3
 80032da:	2308      	movs	r3, #8
 80032dc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80032de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 ff79 	bl	80041d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032fc:	461a      	mov	r2, r3
 80032fe:	2310      	movs	r3, #16
 8003300:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d030      	beq.n	800336e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003314:	2b80      	cmp	r3, #128	@ 0x80
 8003316:	d109      	bne.n	800332c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003326:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800332a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800332c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	4413      	add	r3, r2
 800333e:	3304      	adds	r3, #4
 8003340:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	78db      	ldrb	r3, [r3, #3]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d108      	bne.n	800335c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2200      	movs	r2, #0
 800334e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	b2db      	uxtb	r3, r3
 8003354:	4619      	mov	r1, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f006 fe38 	bl	8009fcc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	4413      	add	r3, r2
 8003364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003368:	461a      	mov	r2, r3
 800336a:	2302      	movs	r3, #2
 800336c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	4413      	add	r3, r2
 8003380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003384:	461a      	mov	r2, r3
 8003386:	2320      	movs	r3, #32
 8003388:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033a0:	461a      	mov	r2, r3
 80033a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80033a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033aa:	3301      	adds	r3, #1
 80033ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80033ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80033b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f47f af62 	bne.w	8003280 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f004 f9a3 	bl	800770c <USB_ReadInterrupts>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033d0:	f040 80db 	bne.w	800358a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f004 f9c4 	bl	8007766 <USB_ReadDevAllInEpInterrupt>
 80033de:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80033e4:	e0cd      	b.n	8003582 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80033e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80c2 	beq.w	8003576 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	4611      	mov	r1, r2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f004 f9ea 	bl	80077d6 <USB_ReadDevInEPInterrupt>
 8003402:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d057      	beq.n	80034be <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	2201      	movs	r2, #1
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003422:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	43db      	mvns	r3, r3
 8003428:	69f9      	ldr	r1, [r7, #28]
 800342a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800342e:	4013      	ands	r3, r2
 8003430:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800343e:	461a      	mov	r2, r3
 8003440:	2301      	movs	r3, #1
 8003442:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	799b      	ldrb	r3, [r3, #6]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d132      	bne.n	80034b2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	3320      	adds	r3, #32
 800345c:	6819      	ldr	r1, [r3, #0]
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003462:	4613      	mov	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4403      	add	r3, r0
 800346c:	331c      	adds	r3, #28
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4419      	add	r1, r3
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003476:	4613      	mov	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4403      	add	r3, r0
 8003480:	3320      	adds	r3, #32
 8003482:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003486:	2b00      	cmp	r3, #0
 8003488:	d113      	bne.n	80034b2 <HAL_PCD_IRQHandler+0x3a2>
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3324      	adds	r3, #36	@ 0x24
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d108      	bne.n	80034b2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034aa:	461a      	mov	r2, r3
 80034ac:	2101      	movs	r1, #1
 80034ae:	f004 f9f1 	bl	8007894 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	4619      	mov	r1, r3
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f006 fd0c 	bl	8009ed6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034d4:	461a      	mov	r2, r3
 80034d6:	2308      	movs	r3, #8
 80034d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80034e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034f0:	461a      	mov	r2, r3
 80034f2:	2310      	movs	r3, #16
 80034f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800350c:	461a      	mov	r2, r3
 800350e:	2340      	movs	r3, #64	@ 0x40
 8003510:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d023      	beq.n	8003564 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800351c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800351e:	6a38      	ldr	r0, [r7, #32]
 8003520:	f003 f9d8 	bl	80068d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	3310      	adds	r3, #16
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	4413      	add	r3, r2
 8003534:	3304      	adds	r3, #4
 8003536:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	78db      	ldrb	r3, [r3, #3]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d108      	bne.n	8003552 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2200      	movs	r2, #0
 8003544:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	b2db      	uxtb	r3, r3
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f006 fd4f 	bl	8009ff0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800355e:	461a      	mov	r2, r3
 8003560:	2302      	movs	r3, #2
 8003562:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800356e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 fcbd 	bl	8003ef0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	3301      	adds	r3, #1
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800357c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357e:	085b      	lsrs	r3, r3, #1
 8003580:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003584:	2b00      	cmp	r3, #0
 8003586:	f47f af2e 	bne.w	80033e6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f004 f8bc 	bl	800770c <USB_ReadInterrupts>
 8003594:	4603      	mov	r3, r0
 8003596:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800359a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800359e:	d122      	bne.n	80035e6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d108      	bne.n	80035d0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035c6:	2100      	movs	r1, #0
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fea3 	bl	8004314 <HAL_PCDEx_LPM_Callback>
 80035ce:	e002      	b.n	80035d6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f006 fced 	bl	8009fb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80035e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f004 f88e 	bl	800770c <USB_ReadInterrupts>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035fa:	d112      	bne.n	8003622 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d102      	bne.n	8003612 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f006 fca9 	bl	8009f64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003620:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f004 f870 	bl	800770c <USB_ReadInterrupts>
 800362c:	4603      	mov	r3, r0
 800362e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003636:	f040 80b7 	bne.w	80037a8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2110      	movs	r1, #16
 8003654:	4618      	mov	r0, r3
 8003656:	f003 f93d 	bl	80068d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365a:	2300      	movs	r3, #0
 800365c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800365e:	e046      	b.n	80036ee <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800366c:	461a      	mov	r2, r3
 800366e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003672:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003684:	0151      	lsls	r1, r2, #5
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	440a      	add	r2, r1
 800368a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800368e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003692:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a0:	461a      	mov	r2, r3
 80036a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80036a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036b8:	0151      	lsls	r1, r2, #5
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	440a      	add	r2, r1
 80036be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80036c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80036c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036d8:	0151      	lsls	r1, r2, #5
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	440a      	add	r2, r1
 80036de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80036e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80036e6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ea:	3301      	adds	r3, #1
 80036ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	791b      	ldrb	r3, [r3, #4]
 80036f2:	461a      	mov	r2, r3
 80036f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d3b2      	bcc.n	8003660 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003708:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800370c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	7bdb      	ldrb	r3, [r3, #15]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d016      	beq.n	8003744 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800371c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003720:	69fa      	ldr	r2, [r7, #28]
 8003722:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003726:	f043 030b 	orr.w	r3, r3, #11
 800372a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800373c:	f043 030b 	orr.w	r3, r3, #11
 8003740:	6453      	str	r3, [r2, #68]	@ 0x44
 8003742:	e015      	b.n	8003770 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003752:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003756:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800375a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800376a:	f043 030b 	orr.w	r3, r3, #11
 800376e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800377e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003782:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003792:	461a      	mov	r2, r3
 8003794:	f004 f87e 	bl	8007894 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80037a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f003 ffad 	bl	800770c <USB_ReadInterrupts>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037bc:	d123      	bne.n	8003806 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f004 f843 	bl	800784e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f003 f8fa 	bl	80069c6 <USB_GetDevSpeed>
 80037d2:	4603      	mov	r3, r0
 80037d4:	461a      	mov	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681c      	ldr	r4, [r3, #0]
 80037de:	f001 fa09 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 80037e2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037e8:	461a      	mov	r2, r3
 80037ea:	4620      	mov	r0, r4
 80037ec:	f002 fdfe 	bl	80063ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f006 fb98 	bl	8009f26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003804:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f003 ff7e 	bl	800770c <USB_ReadInterrupts>
 8003810:	4603      	mov	r3, r0
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b08      	cmp	r3, #8
 8003818:	d10a      	bne.n	8003830 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f006 fb75 	bl	8009f0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f002 0208 	and.w	r2, r2, #8
 800382e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f003 ff69 	bl	800770c <USB_ReadInterrupts>
 800383a:	4603      	mov	r3, r0
 800383c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003840:	2b80      	cmp	r3, #128	@ 0x80
 8003842:	d123      	bne.n	800388c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003850:	2301      	movs	r3, #1
 8003852:	627b      	str	r3, [r7, #36]	@ 0x24
 8003854:	e014      	b.n	8003880 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d105      	bne.n	800387a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	b2db      	uxtb	r3, r3
 8003872:	4619      	mov	r1, r3
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fb0a 	bl	8003e8e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	3301      	adds	r3, #1
 800387e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	791b      	ldrb	r3, [r3, #4]
 8003884:	461a      	mov	r2, r3
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	4293      	cmp	r3, r2
 800388a:	d3e4      	bcc.n	8003856 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f003 ff3b 	bl	800770c <USB_ReadInterrupts>
 8003896:	4603      	mov	r3, r0
 8003898:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800389c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038a0:	d13c      	bne.n	800391c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038a2:	2301      	movs	r3, #1
 80038a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a6:	e02b      	b.n	8003900 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80038a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038bc:	4613      	mov	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	3318      	adds	r3, #24
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d115      	bne.n	80038fa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80038ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	da12      	bge.n	80038fa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	3317      	adds	r3, #23
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80038e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	4619      	mov	r1, r3
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 faca 	bl	8003e8e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	3301      	adds	r3, #1
 80038fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	791b      	ldrb	r3, [r3, #4]
 8003904:	461a      	mov	r2, r3
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	4293      	cmp	r3, r2
 800390a:	d3cd      	bcc.n	80038a8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800391a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f003 fef3 	bl	800770c <USB_ReadInterrupts>
 8003926:	4603      	mov	r3, r0
 8003928:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800392c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003930:	d156      	bne.n	80039e0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003932:	2301      	movs	r3, #1
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
 8003936:	e045      	b.n	80039c4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d12e      	bne.n	80039be <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003960:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003962:	2b00      	cmp	r3, #0
 8003964:	da2b      	bge.n	80039be <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003972:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003976:	429a      	cmp	r2, r3
 8003978:	d121      	bne.n	80039be <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	69fa      	ldr	r2, [r7, #28]
 80039b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039ba:	6053      	str	r3, [r2, #4]
            break;
 80039bc:	e008      	b.n	80039d0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	3301      	adds	r3, #1
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	791b      	ldrb	r3, [r3, #4]
 80039c8:	461a      	mov	r2, r3
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d3b3      	bcc.n	8003938 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80039de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f003 fe91 	bl	800770c <USB_ReadInterrupts>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80039f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039f4:	d10a      	bne.n	8003a0c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f006 fb0c 	bl	800a014 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f003 fe7b 	bl	800770c <USB_ReadInterrupts>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d115      	bne.n	8003a4c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f006 fafc 	bl	800a030 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6859      	ldr	r1, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	e000      	b.n	8003a4c <HAL_PCD_IRQHandler+0x93c>
      return;
 8003a4a:	bf00      	nop
    }
  }
}
 8003a4c:	3734      	adds	r7, #52	@ 0x34
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd90      	pop	{r4, r7, pc}

08003a52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_PCD_SetAddress+0x1a>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e012      	b.n	8003a92 <HAL_PCD_SetAddress+0x40>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	4611      	mov	r1, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f003 fdda 	bl	800763c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	4608      	mov	r0, r1
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	70fb      	strb	r3, [r7, #3]
 8003aac:	460b      	mov	r3, r1
 8003aae:	803b      	strh	r3, [r7, #0]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ab8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	da0f      	bge.n	8003ae0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	f003 020f 	and.w	r2, r3, #15
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	3310      	adds	r3, #16
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	705a      	strb	r2, [r3, #1]
 8003ade:	e00f      	b.n	8003b00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	f003 020f 	and.w	r2, r3, #15
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	3304      	adds	r3, #4
 8003af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003b0c:	883b      	ldrh	r3, [r7, #0]
 8003b0e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	78ba      	ldrb	r2, [r7, #2]
 8003b1a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	785b      	ldrb	r3, [r3, #1]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d004      	beq.n	8003b2e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b2e:	78bb      	ldrb	r3, [r7, #2]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d102      	bne.n	8003b3a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_PCD_EP_Open+0xae>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e00e      	b.n	8003b66 <HAL_PCD_EP_Open+0xcc>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68f9      	ldr	r1, [r7, #12]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f002 ff5a 	bl	8006a10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003b64:	7afb      	ldrb	r3, [r7, #11]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	460b      	mov	r3, r1
 8003b78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	da0f      	bge.n	8003ba2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	f003 020f 	and.w	r2, r3, #15
 8003b88:	4613      	mov	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	3310      	adds	r3, #16
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	4413      	add	r3, r2
 8003b96:	3304      	adds	r3, #4
 8003b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	705a      	strb	r2, [r3, #1]
 8003ba0:	e00f      	b.n	8003bc2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ba2:	78fb      	ldrb	r3, [r7, #3]
 8003ba4:	f003 020f 	and.w	r2, r3, #15
 8003ba8:	4613      	mov	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3304      	adds	r3, #4
 8003bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_PCD_EP_Close+0x6e>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e00e      	b.n	8003bfa <HAL_PCD_EP_Close+0x8c>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68f9      	ldr	r1, [r7, #12]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f002 ff98 	bl	8006b20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b086      	sub	sp, #24
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
 8003c0e:	460b      	mov	r3, r1
 8003c10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c12:	7afb      	ldrb	r3, [r7, #11]
 8003c14:	f003 020f 	and.w	r2, r3, #15
 8003c18:	4613      	mov	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	3304      	adds	r3, #4
 8003c2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2200      	movs	r2, #0
 8003c42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c44:	7afb      	ldrb	r3, [r7, #11]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	799b      	ldrb	r3, [r3, #6]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d102      	bne.n	8003c5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	799b      	ldrb	r3, [r3, #6]
 8003c66:	461a      	mov	r2, r3
 8003c68:	6979      	ldr	r1, [r7, #20]
 8003c6a:	f003 f835 	bl	8006cd8 <USB_EPStartXfer>

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	f003 020f 	and.w	r2, r3, #15
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003c9a:	681b      	ldr	r3, [r3, #0]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	607a      	str	r2, [r7, #4]
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cb8:	7afb      	ldrb	r3, [r7, #11]
 8003cba:	f003 020f 	and.w	r2, r3, #15
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	3310      	adds	r3, #16
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	3304      	adds	r3, #4
 8003cce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ce8:	7afb      	ldrb	r3, [r7, #11]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	799b      	ldrb	r3, [r3, #6]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d102      	bne.n	8003d02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	799b      	ldrb	r3, [r3, #6]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	6979      	ldr	r1, [r7, #20]
 8003d0e:	f002 ffe3 	bl	8006cd8 <USB_EPStartXfer>

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	7912      	ldrb	r2, [r2, #4]
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e04f      	b.n	8003dda <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	da0f      	bge.n	8003d62 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	f003 020f 	and.w	r2, r3, #15
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	3310      	adds	r3, #16
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	4413      	add	r3, r2
 8003d56:	3304      	adds	r3, #4
 8003d58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	705a      	strb	r2, [r3, #1]
 8003d60:	e00d      	b.n	8003d7e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	4613      	mov	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4413      	add	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	4413      	add	r3, r2
 8003d74:	3304      	adds	r3, #4
 8003d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_PCD_EP_SetStall+0x82>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e01d      	b.n	8003dda <HAL_PCD_EP_SetStall+0xbe>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68f9      	ldr	r1, [r7, #12]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f003 fb71 	bl	8007494 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d109      	bne.n	8003dd0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	7999      	ldrb	r1, [r3, #6]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f003 fd62 	bl	8007894 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	460b      	mov	r3, r1
 8003dec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003dee:	78fb      	ldrb	r3, [r7, #3]
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	7912      	ldrb	r2, [r2, #4]
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d901      	bls.n	8003e00 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e042      	b.n	8003e86 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	da0f      	bge.n	8003e28 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	f003 020f 	and.w	r2, r3, #15
 8003e0e:	4613      	mov	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	3310      	adds	r3, #16
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2201      	movs	r2, #1
 8003e24:	705a      	strb	r2, [r3, #1]
 8003e26:	e00f      	b.n	8003e48 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	f003 020f 	and.w	r2, r3, #15
 8003e2e:	4613      	mov	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	4413      	add	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3304      	adds	r3, #4
 8003e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_PCD_EP_ClrStall+0x86>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e00e      	b.n	8003e86 <HAL_PCD_EP_ClrStall+0xa4>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68f9      	ldr	r1, [r7, #12]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f003 fb7a 	bl	8007570 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	460b      	mov	r3, r1
 8003e98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	da0c      	bge.n	8003ebc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	f003 020f 	and.w	r2, r3, #15
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	3310      	adds	r3, #16
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	e00c      	b.n	8003ed6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	f003 020f 	and.w	r2, r3, #15
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68f9      	ldr	r1, [r7, #12]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f003 f999 	bl	8007214 <USB_EPStopXfer>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ee6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	@ 0x28
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	4613      	mov	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	3310      	adds	r3, #16
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	4413      	add	r3, r2
 8003f14:	3304      	adds	r3, #4
 8003f16:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d901      	bls.n	8003f28 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e06b      	b.n	8004000 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d902      	bls.n	8003f44 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	3303      	adds	r3, #3
 8003f48:	089b      	lsrs	r3, r3, #2
 8003f4a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f4c:	e02a      	b.n	8003fa4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d902      	bls.n	8003f6a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	3303      	adds	r3, #3
 8003f6e:	089b      	lsrs	r3, r3, #2
 8003f70:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	68d9      	ldr	r1, [r3, #12]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	4603      	mov	r3, r0
 8003f86:	6978      	ldr	r0, [r7, #20]
 8003f88:	f003 f9ee 	bl	8007368 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	441a      	add	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	441a      	add	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d809      	bhi.n	8003fce <PCD_WriteEmptyTxFifo+0xde>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d203      	bcs.n	8003fce <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1bf      	bne.n	8003f4e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d811      	bhi.n	8003ffe <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	6939      	ldr	r1, [r7, #16]
 8003ff6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3720      	adds	r7, #32
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	333c      	adds	r3, #60	@ 0x3c
 8004020:	3304      	adds	r3, #4
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	799b      	ldrb	r3, [r3, #6]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d17b      	bne.n	8004136 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d015      	beq.n	8004074 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	4a61      	ldr	r2, [pc, #388]	@ (80041d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	f240 80b9 	bls.w	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80b3 	beq.w	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800406a:	461a      	mov	r2, r3
 800406c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004070:	6093      	str	r3, [r2, #8]
 8004072:	e0a7      	b.n	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800408a:	461a      	mov	r2, r3
 800408c:	2320      	movs	r3, #32
 800408e:	6093      	str	r3, [r2, #8]
 8004090:	e098      	b.n	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004098:	2b00      	cmp	r3, #0
 800409a:	f040 8093 	bne.w	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	4a4b      	ldr	r2, [pc, #300]	@ (80041d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d90f      	bls.n	80040c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040bc:	461a      	mov	r2, r3
 80040be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040c2:	6093      	str	r3, [r2, #8]
 80040c4:	e07e      	b.n	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4413      	add	r3, r2
 80040d8:	3304      	adds	r3, #4
 80040da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a1a      	ldr	r2, [r3, #32]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	0159      	lsls	r1, r3, #5
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	440b      	add	r3, r1
 80040e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f2:	1ad2      	subs	r2, r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d114      	bne.n	8004128 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004110:	461a      	mov	r2, r3
 8004112:	2101      	movs	r1, #1
 8004114:	f003 fbbe 	bl	8007894 <USB_EP0_OutStart>
 8004118:	e006      	b.n	8004128 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	441a      	add	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f005 feb6 	bl	8009ea0 <HAL_PCD_DataOutStageCallback>
 8004134:	e046      	b.n	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	4a26      	ldr	r2, [pc, #152]	@ (80041d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d124      	bne.n	8004188 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004154:	461a      	mov	r2, r3
 8004156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800415a:	6093      	str	r3, [r2, #8]
 800415c:	e032      	b.n	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004174:	461a      	mov	r2, r3
 8004176:	2320      	movs	r3, #32
 8004178:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	4619      	mov	r1, r3
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f005 fe8d 	bl	8009ea0 <HAL_PCD_DataOutStageCallback>
 8004186:	e01d      	b.n	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d114      	bne.n	80041b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	4613      	mov	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d108      	bne.n	80041b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041b0:	461a      	mov	r2, r3
 80041b2:	2100      	movs	r1, #0
 80041b4:	f003 fb6e 	bl	8007894 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	4619      	mov	r1, r3
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f005 fe6e 	bl	8009ea0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	4f54300a 	.word	0x4f54300a
 80041d4:	4f54310a 	.word	0x4f54310a

080041d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	333c      	adds	r3, #60	@ 0x3c
 80041f0:	3304      	adds	r3, #4
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4a15      	ldr	r2, [pc, #84]	@ (8004260 <PCD_EP_OutSetupPacket_int+0x88>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d90e      	bls.n	800422c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004214:	2b00      	cmp	r3, #0
 8004216:	d009      	beq.n	800422c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004224:	461a      	mov	r2, r3
 8004226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800422a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f005 fe25 	bl	8009e7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4a0a      	ldr	r2, [pc, #40]	@ (8004260 <PCD_EP_OutSetupPacket_int+0x88>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d90c      	bls.n	8004254 <PCD_EP_OutSetupPacket_int+0x7c>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	799b      	ldrb	r3, [r3, #6]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d108      	bne.n	8004254 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800424c:	461a      	mov	r2, r3
 800424e:	2101      	movs	r1, #1
 8004250:	f003 fb20 	bl	8007894 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	4f54300a 	.word	0x4f54300a

08004264 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	70fb      	strb	r3, [r7, #3]
 8004270:	4613      	mov	r3, r2
 8004272:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800427c:	78fb      	ldrb	r3, [r7, #3]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d107      	bne.n	8004292 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004282:	883b      	ldrh	r3, [r7, #0]
 8004284:	0419      	lsls	r1, r3, #16
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	430a      	orrs	r2, r1
 800428e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004290:	e028      	b.n	80042e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004298:	0c1b      	lsrs	r3, r3, #16
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	4413      	add	r3, r2
 800429e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042a0:	2300      	movs	r3, #0
 80042a2:	73fb      	strb	r3, [r7, #15]
 80042a4:	e00d      	b.n	80042c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	3340      	adds	r3, #64	@ 0x40
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	4413      	add	r3, r2
 80042ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	3301      	adds	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
 80042c2:	7bfa      	ldrb	r2, [r7, #15]
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d3ec      	bcc.n	80042a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042cc:	883b      	ldrh	r3, [r7, #0]
 80042ce:	0418      	lsls	r0, r3, #16
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	4302      	orrs	r2, r0
 80042dc:	3340      	adds	r3, #64	@ 0x40
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	460b      	mov	r3, r1
 80042fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	887a      	ldrh	r2, [r7, #2]
 8004304:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e267      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d075      	beq.n	8004436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800434a:	4b88      	ldr	r3, [pc, #544]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b04      	cmp	r3, #4
 8004354:	d00c      	beq.n	8004370 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004356:	4b85      	ldr	r3, [pc, #532]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800435e:	2b08      	cmp	r3, #8
 8004360:	d112      	bne.n	8004388 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004362:	4b82      	ldr	r3, [pc, #520]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800436a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800436e:	d10b      	bne.n	8004388 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004370:	4b7e      	ldr	r3, [pc, #504]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d05b      	beq.n	8004434 <HAL_RCC_OscConfig+0x108>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d157      	bne.n	8004434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e242      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004390:	d106      	bne.n	80043a0 <HAL_RCC_OscConfig+0x74>
 8004392:	4b76      	ldr	r3, [pc, #472]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a75      	ldr	r2, [pc, #468]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e01d      	b.n	80043dc <HAL_RCC_OscConfig+0xb0>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCC_OscConfig+0x98>
 80043aa:	4b70      	ldr	r3, [pc, #448]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a6f      	ldr	r2, [pc, #444]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80043b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	4b6d      	ldr	r3, [pc, #436]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a6c      	ldr	r2, [pc, #432]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e00b      	b.n	80043dc <HAL_RCC_OscConfig+0xb0>
 80043c4:	4b69      	ldr	r3, [pc, #420]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a68      	ldr	r2, [pc, #416]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80043ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	4b66      	ldr	r3, [pc, #408]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a65      	ldr	r2, [pc, #404]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80043d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d013      	beq.n	800440c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e4:	f7fd fd98 	bl	8001f18 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ec:	f7fd fd94 	bl	8001f18 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b64      	cmp	r3, #100	@ 0x64
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e207      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fe:	4b5b      	ldr	r3, [pc, #364]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0xc0>
 800440a:	e014      	b.n	8004436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fd fd84 	bl	8001f18 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004414:	f7fd fd80 	bl	8001f18 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	@ 0x64
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e1f3      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004426:	4b51      	ldr	r3, [pc, #324]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0xe8>
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d063      	beq.n	800450a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004442:	4b4a      	ldr	r3, [pc, #296]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800444e:	4b47      	ldr	r3, [pc, #284]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004456:	2b08      	cmp	r3, #8
 8004458:	d11c      	bne.n	8004494 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445a:	4b44      	ldr	r3, [pc, #272]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d116      	bne.n	8004494 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004466:	4b41      	ldr	r3, [pc, #260]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_RCC_OscConfig+0x152>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e1c7      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447e:	4b3b      	ldr	r3, [pc, #236]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4937      	ldr	r1, [pc, #220]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 800448e:	4313      	orrs	r3, r2
 8004490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004492:	e03a      	b.n	800450a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800449c:	4b34      	ldr	r3, [pc, #208]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a2:	f7fd fd39 	bl	8001f18 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044aa:	f7fd fd35 	bl	8001f18 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e1a8      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044bc:	4b2b      	ldr	r3, [pc, #172]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c8:	4b28      	ldr	r3, [pc, #160]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4925      	ldr	r1, [pc, #148]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	600b      	str	r3, [r1, #0]
 80044dc:	e015      	b.n	800450a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044de:	4b24      	ldr	r3, [pc, #144]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fd fd18 	bl	8001f18 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ec:	f7fd fd14 	bl	8001f18 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e187      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fe:	4b1b      	ldr	r3, [pc, #108]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d036      	beq.n	8004584 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d016      	beq.n	800454c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800451e:	4b15      	ldr	r3, [pc, #84]	@ (8004574 <HAL_RCC_OscConfig+0x248>)
 8004520:	2201      	movs	r2, #1
 8004522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004524:	f7fd fcf8 	bl	8001f18 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800452c:	f7fd fcf4 	bl	8001f18 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e167      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453e:	4b0b      	ldr	r3, [pc, #44]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0x200>
 800454a:	e01b      	b.n	8004584 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800454c:	4b09      	ldr	r3, [pc, #36]	@ (8004574 <HAL_RCC_OscConfig+0x248>)
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004552:	f7fd fce1 	bl	8001f18 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004558:	e00e      	b.n	8004578 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800455a:	f7fd fcdd 	bl	8001f18 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d907      	bls.n	8004578 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e150      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
 800456c:	40023800 	.word	0x40023800
 8004570:	42470000 	.word	0x42470000
 8004574:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004578:	4b88      	ldr	r3, [pc, #544]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 800457a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1ea      	bne.n	800455a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8097 	beq.w	80046c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004592:	2300      	movs	r3, #0
 8004594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004596:	4b81      	ldr	r3, [pc, #516]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10f      	bne.n	80045c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	4b7d      	ldr	r3, [pc, #500]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	4a7c      	ldr	r2, [pc, #496]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 80045ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045b2:	4b7a      	ldr	r3, [pc, #488]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045be:	2301      	movs	r3, #1
 80045c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c2:	4b77      	ldr	r3, [pc, #476]	@ (80047a0 <HAL_RCC_OscConfig+0x474>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d118      	bne.n	8004600 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ce:	4b74      	ldr	r3, [pc, #464]	@ (80047a0 <HAL_RCC_OscConfig+0x474>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a73      	ldr	r2, [pc, #460]	@ (80047a0 <HAL_RCC_OscConfig+0x474>)
 80045d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045da:	f7fd fc9d 	bl	8001f18 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e2:	f7fd fc99 	bl	8001f18 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e10c      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f4:	4b6a      	ldr	r3, [pc, #424]	@ (80047a0 <HAL_RCC_OscConfig+0x474>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d106      	bne.n	8004616 <HAL_RCC_OscConfig+0x2ea>
 8004608:	4b64      	ldr	r3, [pc, #400]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 800460a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460c:	4a63      	ldr	r2, [pc, #396]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 800460e:	f043 0301 	orr.w	r3, r3, #1
 8004612:	6713      	str	r3, [r2, #112]	@ 0x70
 8004614:	e01c      	b.n	8004650 <HAL_RCC_OscConfig+0x324>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b05      	cmp	r3, #5
 800461c:	d10c      	bne.n	8004638 <HAL_RCC_OscConfig+0x30c>
 800461e:	4b5f      	ldr	r3, [pc, #380]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004622:	4a5e      	ldr	r2, [pc, #376]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004624:	f043 0304 	orr.w	r3, r3, #4
 8004628:	6713      	str	r3, [r2, #112]	@ 0x70
 800462a:	4b5c      	ldr	r3, [pc, #368]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462e:	4a5b      	ldr	r2, [pc, #364]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	6713      	str	r3, [r2, #112]	@ 0x70
 8004636:	e00b      	b.n	8004650 <HAL_RCC_OscConfig+0x324>
 8004638:	4b58      	ldr	r3, [pc, #352]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463c:	4a57      	ldr	r2, [pc, #348]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 800463e:	f023 0301 	bic.w	r3, r3, #1
 8004642:	6713      	str	r3, [r2, #112]	@ 0x70
 8004644:	4b55      	ldr	r3, [pc, #340]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004648:	4a54      	ldr	r2, [pc, #336]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 800464a:	f023 0304 	bic.w	r3, r3, #4
 800464e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d015      	beq.n	8004684 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004658:	f7fd fc5e 	bl	8001f18 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465e:	e00a      	b.n	8004676 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004660:	f7fd fc5a 	bl	8001f18 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e0cb      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004676:	4b49      	ldr	r3, [pc, #292]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0ee      	beq.n	8004660 <HAL_RCC_OscConfig+0x334>
 8004682:	e014      	b.n	80046ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004684:	f7fd fc48 	bl	8001f18 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800468a:	e00a      	b.n	80046a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468c:	f7fd fc44 	bl	8001f18 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e0b5      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a2:	4b3e      	ldr	r3, [pc, #248]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1ee      	bne.n	800468c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046ae:	7dfb      	ldrb	r3, [r7, #23]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d105      	bne.n	80046c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b4:	4b39      	ldr	r3, [pc, #228]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 80046b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b8:	4a38      	ldr	r2, [pc, #224]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 80046ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 80a1 	beq.w	800480c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ca:	4b34      	ldr	r3, [pc, #208]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 030c 	and.w	r3, r3, #12
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d05c      	beq.n	8004790 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d141      	bne.n	8004762 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046de:	4b31      	ldr	r3, [pc, #196]	@ (80047a4 <HAL_RCC_OscConfig+0x478>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fd fc18 	bl	8001f18 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ec:	f7fd fc14 	bl	8001f18 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e087      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	4b27      	ldr	r3, [pc, #156]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69da      	ldr	r2, [r3, #28]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	019b      	lsls	r3, r3, #6
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004720:	085b      	lsrs	r3, r3, #1
 8004722:	3b01      	subs	r3, #1
 8004724:	041b      	lsls	r3, r3, #16
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472c:	061b      	lsls	r3, r3, #24
 800472e:	491b      	ldr	r1, [pc, #108]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004734:	4b1b      	ldr	r3, [pc, #108]	@ (80047a4 <HAL_RCC_OscConfig+0x478>)
 8004736:	2201      	movs	r2, #1
 8004738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473a:	f7fd fbed 	bl	8001f18 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004742:	f7fd fbe9 	bl	8001f18 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e05c      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004754:	4b11      	ldr	r3, [pc, #68]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCC_OscConfig+0x416>
 8004760:	e054      	b.n	800480c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004762:	4b10      	ldr	r3, [pc, #64]	@ (80047a4 <HAL_RCC_OscConfig+0x478>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004768:	f7fd fbd6 	bl	8001f18 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004770:	f7fd fbd2 	bl	8001f18 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e045      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004782:	4b06      	ldr	r3, [pc, #24]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x444>
 800478e:	e03d      	b.n	800480c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d107      	bne.n	80047a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e038      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
 800479c:	40023800 	.word	0x40023800
 80047a0:	40007000 	.word	0x40007000
 80047a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004818 <HAL_RCC_OscConfig+0x4ec>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d028      	beq.n	8004808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d121      	bne.n	8004808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d11a      	bne.n	8004808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047d8:	4013      	ands	r3, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d111      	bne.n	8004808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ee:	085b      	lsrs	r3, r3, #1
 80047f0:	3b01      	subs	r3, #1
 80047f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d107      	bne.n	8004808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004802:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40023800 	.word	0x40023800

0800481c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0cc      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004830:	4b68      	ldr	r3, [pc, #416]	@ (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d90c      	bls.n	8004858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483e:	4b65      	ldr	r3, [pc, #404]	@ (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004846:	4b63      	ldr	r3, [pc, #396]	@ (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d001      	beq.n	8004858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e0b8      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d020      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004870:	4b59      	ldr	r3, [pc, #356]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4a58      	ldr	r2, [pc, #352]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800487a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004888:	4b53      	ldr	r3, [pc, #332]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4a52      	ldr	r2, [pc, #328]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004894:	4b50      	ldr	r3, [pc, #320]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	494d      	ldr	r1, [pc, #308]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d044      	beq.n	800493c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d107      	bne.n	80048ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ba:	4b47      	ldr	r3, [pc, #284]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d119      	bne.n	80048fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e07f      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d003      	beq.n	80048da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	d107      	bne.n	80048ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048da:	4b3f      	ldr	r3, [pc, #252]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e06f      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ea:	4b3b      	ldr	r3, [pc, #236]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e067      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048fa:	4b37      	ldr	r3, [pc, #220]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f023 0203 	bic.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	4934      	ldr	r1, [pc, #208]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	4313      	orrs	r3, r2
 800490a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800490c:	f7fd fb04 	bl	8001f18 <HAL_GetTick>
 8004910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	e00a      	b.n	800492a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004914:	f7fd fb00 	bl	8001f18 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e04f      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492a:	4b2b      	ldr	r3, [pc, #172]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 020c 	and.w	r2, r3, #12
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	429a      	cmp	r2, r3
 800493a:	d1eb      	bne.n	8004914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800493c:	4b25      	ldr	r3, [pc, #148]	@ (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d20c      	bcs.n	8004964 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494a:	4b22      	ldr	r3, [pc, #136]	@ (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004952:	4b20      	ldr	r3, [pc, #128]	@ (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	429a      	cmp	r2, r3
 800495e:	d001      	beq.n	8004964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e032      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004970:	4b19      	ldr	r3, [pc, #100]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4916      	ldr	r1, [pc, #88]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	4313      	orrs	r3, r2
 8004980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800498e:	4b12      	ldr	r3, [pc, #72]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	490e      	ldr	r1, [pc, #56]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049a2:	f000 f821 	bl	80049e8 <HAL_RCC_GetSysClockFreq>
 80049a6:	4602      	mov	r2, r0
 80049a8:	4b0b      	ldr	r3, [pc, #44]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	091b      	lsrs	r3, r3, #4
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	490a      	ldr	r1, [pc, #40]	@ (80049dc <HAL_RCC_ClockConfig+0x1c0>)
 80049b4:	5ccb      	ldrb	r3, [r1, r3]
 80049b6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ba:	4a09      	ldr	r2, [pc, #36]	@ (80049e0 <HAL_RCC_ClockConfig+0x1c4>)
 80049bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049be:	4b09      	ldr	r3, [pc, #36]	@ (80049e4 <HAL_RCC_ClockConfig+0x1c8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fd fa64 	bl	8001e90 <HAL_InitTick>

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40023c00 	.word	0x40023c00
 80049d8:	40023800 	.word	0x40023800
 80049dc:	0800a5d4 	.word	0x0800a5d4
 80049e0:	20000024 	.word	0x20000024
 80049e4:	20000028 	.word	0x20000028

080049e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049ec:	b094      	sub	sp, #80	@ 0x50
 80049ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a00:	4b79      	ldr	r3, [pc, #484]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 030c 	and.w	r3, r3, #12
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d00d      	beq.n	8004a28 <HAL_RCC_GetSysClockFreq+0x40>
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	f200 80e1 	bhi.w	8004bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x34>
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d003      	beq.n	8004a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a1a:	e0db      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a1c:	4b73      	ldr	r3, [pc, #460]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x204>)
 8004a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a20:	e0db      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a22:	4b73      	ldr	r3, [pc, #460]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a26:	e0d8      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a28:	4b6f      	ldr	r3, [pc, #444]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a32:	4b6d      	ldr	r3, [pc, #436]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d063      	beq.n	8004b06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	099b      	lsrs	r3, r3, #6
 8004a44:	2200      	movs	r2, #0
 8004a46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a52:	2300      	movs	r3, #0
 8004a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	462b      	mov	r3, r5
 8004a5e:	f04f 0000 	mov.w	r0, #0
 8004a62:	f04f 0100 	mov.w	r1, #0
 8004a66:	0159      	lsls	r1, r3, #5
 8004a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a6c:	0150      	lsls	r0, r2, #5
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4621      	mov	r1, r4
 8004a74:	1a51      	subs	r1, r2, r1
 8004a76:	6139      	str	r1, [r7, #16]
 8004a78:	4629      	mov	r1, r5
 8004a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a8c:	4659      	mov	r1, fp
 8004a8e:	018b      	lsls	r3, r1, #6
 8004a90:	4651      	mov	r1, sl
 8004a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a96:	4651      	mov	r1, sl
 8004a98:	018a      	lsls	r2, r1, #6
 8004a9a:	4651      	mov	r1, sl
 8004a9c:	ebb2 0801 	subs.w	r8, r2, r1
 8004aa0:	4659      	mov	r1, fp
 8004aa2:	eb63 0901 	sbc.w	r9, r3, r1
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aba:	4690      	mov	r8, r2
 8004abc:	4699      	mov	r9, r3
 8004abe:	4623      	mov	r3, r4
 8004ac0:	eb18 0303 	adds.w	r3, r8, r3
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	462b      	mov	r3, r5
 8004ac8:	eb49 0303 	adc.w	r3, r9, r3
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ada:	4629      	mov	r1, r5
 8004adc:	024b      	lsls	r3, r1, #9
 8004ade:	4621      	mov	r1, r4
 8004ae0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	024a      	lsls	r2, r1, #9
 8004ae8:	4610      	mov	r0, r2
 8004aea:	4619      	mov	r1, r3
 8004aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aee:	2200      	movs	r2, #0
 8004af0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004af2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004af8:	f7fb fb80 	bl	80001fc <__aeabi_uldivmod>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4613      	mov	r3, r2
 8004b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b04:	e058      	b.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b06:	4b38      	ldr	r3, [pc, #224]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	099b      	lsrs	r3, r3, #6
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	4618      	mov	r0, r3
 8004b10:	4611      	mov	r1, r2
 8004b12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b16:	623b      	str	r3, [r7, #32]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b20:	4642      	mov	r2, r8
 8004b22:	464b      	mov	r3, r9
 8004b24:	f04f 0000 	mov.w	r0, #0
 8004b28:	f04f 0100 	mov.w	r1, #0
 8004b2c:	0159      	lsls	r1, r3, #5
 8004b2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b32:	0150      	lsls	r0, r2, #5
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4641      	mov	r1, r8
 8004b3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b3e:	4649      	mov	r1, r9
 8004b40:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b58:	ebb2 040a 	subs.w	r4, r2, sl
 8004b5c:	eb63 050b 	sbc.w	r5, r3, fp
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	00eb      	lsls	r3, r5, #3
 8004b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b6e:	00e2      	lsls	r2, r4, #3
 8004b70:	4614      	mov	r4, r2
 8004b72:	461d      	mov	r5, r3
 8004b74:	4643      	mov	r3, r8
 8004b76:	18e3      	adds	r3, r4, r3
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	eb45 0303 	adc.w	r3, r5, r3
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b8e:	4629      	mov	r1, r5
 8004b90:	028b      	lsls	r3, r1, #10
 8004b92:	4621      	mov	r1, r4
 8004b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b98:	4621      	mov	r1, r4
 8004b9a:	028a      	lsls	r2, r1, #10
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	61fa      	str	r2, [r7, #28]
 8004ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bac:	f7fb fb26 	bl	80001fc <__aeabi_uldivmod>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	0c1b      	lsrs	r3, r3, #16
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bd2:	e002      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bd4:	4b05      	ldr	r3, [pc, #20]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x204>)
 8004bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3750      	adds	r7, #80	@ 0x50
 8004be0:	46bd      	mov	sp, r7
 8004be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004be6:	bf00      	nop
 8004be8:	40023800 	.word	0x40023800
 8004bec:	00f42400 	.word	0x00f42400
 8004bf0:	007a1200 	.word	0x007a1200

08004bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf8:	4b03      	ldr	r3, [pc, #12]	@ (8004c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	20000024 	.word	0x20000024

08004c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c10:	f7ff fff0 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c14:	4602      	mov	r2, r0
 8004c16:	4b05      	ldr	r3, [pc, #20]	@ (8004c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	0a9b      	lsrs	r3, r3, #10
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	4903      	ldr	r1, [pc, #12]	@ (8004c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c22:	5ccb      	ldrb	r3, [r1, r3]
 8004c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	0800a5e4 	.word	0x0800a5e4

08004c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c38:	f7ff ffdc 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	4b05      	ldr	r3, [pc, #20]	@ (8004c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	0b5b      	lsrs	r3, r3, #13
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	4903      	ldr	r1, [pc, #12]	@ (8004c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c4a:	5ccb      	ldrb	r3, [r1, r3]
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40023800 	.word	0x40023800
 8004c58:	0800a5e4 	.word	0x0800a5e4

08004c5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e07b      	b.n	8004d66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d108      	bne.n	8004c88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c7e:	d009      	beq.n	8004c94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	61da      	str	r2, [r3, #28]
 8004c86:	e005      	b.n	8004c94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fc fe24 	bl	80018fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d18:	ea42 0103 	orr.w	r1, r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d20:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	0c1b      	lsrs	r3, r3, #16
 8004d32:	f003 0104 	and.w	r1, r3, #4
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	f003 0210 	and.w	r2, r3, #16
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b08a      	sub	sp, #40	@ 0x28
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
 8004d7a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d80:	f7fd f8ca 	bl	8001f18 <HAL_GetTick>
 8004d84:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d8c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004d94:	887b      	ldrh	r3, [r7, #2]
 8004d96:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d98:	7ffb      	ldrb	r3, [r7, #31]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d00c      	beq.n	8004db8 <HAL_SPI_TransmitReceive+0x4a>
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004da4:	d106      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x46>
 8004dae:	7ffb      	ldrb	r3, [r7, #31]
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d001      	beq.n	8004db8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004db4:	2302      	movs	r3, #2
 8004db6:	e17f      	b.n	80050b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_SPI_TransmitReceive+0x5c>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <HAL_SPI_TransmitReceive+0x5c>
 8004dc4:	887b      	ldrh	r3, [r7, #2]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e174      	b.n	80050b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_SPI_TransmitReceive+0x6e>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e16d      	b.n	80050b8 <HAL_SPI_TransmitReceive+0x34a>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d003      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2205      	movs	r2, #5
 8004df4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	887a      	ldrh	r2, [r7, #2]
 8004e08:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	887a      	ldrh	r2, [r7, #2]
 8004e0e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	887a      	ldrh	r2, [r7, #2]
 8004e1a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	887a      	ldrh	r2, [r7, #2]
 8004e20:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e38:	2b40      	cmp	r3, #64	@ 0x40
 8004e3a:	d007      	beq.n	8004e4c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e54:	d17e      	bne.n	8004f54 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <HAL_SPI_TransmitReceive+0xf6>
 8004e5e:	8afb      	ldrh	r3, [r7, #22]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d16c      	bne.n	8004f3e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e68:	881a      	ldrh	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e74:	1c9a      	adds	r2, r3, #2
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e88:	e059      	b.n	8004f3e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d11b      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x162>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d016      	beq.n	8004ed0 <HAL_SPI_TransmitReceive+0x162>
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d113      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eac:	881a      	ldrh	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb8:	1c9a      	adds	r2, r3, #2
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d119      	bne.n	8004f12 <HAL_SPI_TransmitReceive+0x1a4>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d014      	beq.n	8004f12 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef2:	b292      	uxth	r2, r2
 8004ef4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efa:	1c9a      	adds	r2, r3, #2
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f12:	f7fd f801 	bl	8001f18 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d80d      	bhi.n	8004f3e <HAL_SPI_TransmitReceive+0x1d0>
 8004f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f28:	d009      	beq.n	8004f3e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e0bc      	b.n	80050b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1a0      	bne.n	8004e8a <HAL_SPI_TransmitReceive+0x11c>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d19b      	bne.n	8004e8a <HAL_SPI_TransmitReceive+0x11c>
 8004f52:	e082      	b.n	800505a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <HAL_SPI_TransmitReceive+0x1f4>
 8004f5c:	8afb      	ldrh	r3, [r7, #22]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d171      	bne.n	8005046 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	330c      	adds	r3, #12
 8004f6c:	7812      	ldrb	r2, [r2, #0]
 8004f6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f88:	e05d      	b.n	8005046 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d11c      	bne.n	8004fd2 <HAL_SPI_TransmitReceive+0x264>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d017      	beq.n	8004fd2 <HAL_SPI_TransmitReceive+0x264>
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d114      	bne.n	8004fd2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	330c      	adds	r3, #12
 8004fb2:	7812      	ldrb	r2, [r2, #0]
 8004fb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d119      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x2a6>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d014      	beq.n	8005014 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005010:	2301      	movs	r3, #1
 8005012:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005014:	f7fc ff80 	bl	8001f18 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005020:	429a      	cmp	r2, r3
 8005022:	d803      	bhi.n	800502c <HAL_SPI_TransmitReceive+0x2be>
 8005024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502a:	d102      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x2c4>
 800502c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502e:	2b00      	cmp	r3, #0
 8005030:	d109      	bne.n	8005046 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e038      	b.n	80050b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d19c      	bne.n	8004f8a <HAL_SPI_TransmitReceive+0x21c>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d197      	bne.n	8004f8a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800505a:	6a3a      	ldr	r2, [r7, #32]
 800505c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f8b6 	bl	80051d0 <SPI_EndRxTxTransaction>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d008      	beq.n	800507c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e01d      	b.n	80050b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10a      	bne.n	800509a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005084:	2300      	movs	r3, #0
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80050b6:	2300      	movs	r3, #0
  }
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3728      	adds	r7, #40	@ 0x28
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	4613      	mov	r3, r2
 80050ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050d0:	f7fc ff22 	bl	8001f18 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d8:	1a9b      	subs	r3, r3, r2
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	4413      	add	r3, r2
 80050de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050e0:	f7fc ff1a 	bl	8001f18 <HAL_GetTick>
 80050e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050e6:	4b39      	ldr	r3, [pc, #228]	@ (80051cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	015b      	lsls	r3, r3, #5
 80050ec:	0d1b      	lsrs	r3, r3, #20
 80050ee:	69fa      	ldr	r2, [r7, #28]
 80050f0:	fb02 f303 	mul.w	r3, r2, r3
 80050f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050f6:	e054      	b.n	80051a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fe:	d050      	beq.n	80051a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005100:	f7fc ff0a 	bl	8001f18 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	429a      	cmp	r2, r3
 800510e:	d902      	bls.n	8005116 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d13d      	bne.n	8005192 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005124:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800512e:	d111      	bne.n	8005154 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005138:	d004      	beq.n	8005144 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005142:	d107      	bne.n	8005154 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005152:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800515c:	d10f      	bne.n	800517e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800517c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e017      	b.n	80051c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	3b01      	subs	r3, #1
 80051a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4013      	ands	r3, r2
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	bf0c      	ite	eq
 80051b2:	2301      	moveq	r3, #1
 80051b4:	2300      	movne	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d19b      	bne.n	80050f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	20000024 	.word	0x20000024

080051d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2201      	movs	r2, #1
 80051e4:	2102      	movs	r1, #2
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f7ff ff6a 	bl	80050c0 <SPI_WaitFlagStateUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d007      	beq.n	8005202 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f6:	f043 0220 	orr.w	r2, r3, #32
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e032      	b.n	8005268 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005202:	4b1b      	ldr	r3, [pc, #108]	@ (8005270 <SPI_EndRxTxTransaction+0xa0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1b      	ldr	r2, [pc, #108]	@ (8005274 <SPI_EndRxTxTransaction+0xa4>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	0d5b      	lsrs	r3, r3, #21
 800520e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005212:	fb02 f303 	mul.w	r3, r2, r3
 8005216:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005220:	d112      	bne.n	8005248 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2200      	movs	r2, #0
 800522a:	2180      	movs	r1, #128	@ 0x80
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7ff ff47 	bl	80050c0 <SPI_WaitFlagStateUntilTimeout>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d016      	beq.n	8005266 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800523c:	f043 0220 	orr.w	r2, r3, #32
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e00f      	b.n	8005268 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	3b01      	subs	r3, #1
 8005252:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800525e:	2b80      	cmp	r3, #128	@ 0x80
 8005260:	d0f2      	beq.n	8005248 <SPI_EndRxTxTransaction+0x78>
 8005262:	e000      	b.n	8005266 <SPI_EndRxTxTransaction+0x96>
        break;
 8005264:	bf00      	nop
  }

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20000024 	.word	0x20000024
 8005274:	165e9f81 	.word	0x165e9f81

08005278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e042      	b.n	8005310 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7fc fc8a 	bl	8001bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2224      	movs	r2, #36	@ 0x24
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fdbd 	bl	8005e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	695a      	ldr	r2, [r3, #20]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08a      	sub	sp, #40	@ 0x28
 800531c:	af02      	add	r7, sp, #8
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	4613      	mov	r3, r2
 8005326:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b20      	cmp	r3, #32
 8005336:	d175      	bne.n	8005424 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <HAL_UART_Transmit+0x2c>
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e06e      	b.n	8005426 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2221      	movs	r2, #33	@ 0x21
 8005352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005356:	f7fc fddf 	bl	8001f18 <HAL_GetTick>
 800535a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	88fa      	ldrh	r2, [r7, #6]
 8005360:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	88fa      	ldrh	r2, [r7, #6]
 8005366:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005370:	d108      	bne.n	8005384 <HAL_UART_Transmit+0x6c>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d104      	bne.n	8005384 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800537a:	2300      	movs	r3, #0
 800537c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	e003      	b.n	800538c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005388:	2300      	movs	r3, #0
 800538a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800538c:	e02e      	b.n	80053ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2200      	movs	r2, #0
 8005396:	2180      	movs	r1, #128	@ 0x80
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 fb1f 	bl	80059dc <UART_WaitOnFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e03a      	b.n	8005426 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10b      	bne.n	80053ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	3302      	adds	r3, #2
 80053ca:	61bb      	str	r3, [r7, #24]
 80053cc:	e007      	b.n	80053de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	781a      	ldrb	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	3301      	adds	r3, #1
 80053dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1cb      	bne.n	800538e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2200      	movs	r2, #0
 80053fe:	2140      	movs	r1, #64	@ 0x40
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 faeb 	bl	80059dc <UART_WaitOnFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d005      	beq.n	8005418 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e006      	b.n	8005426 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	e000      	b.n	8005426 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005424:	2302      	movs	r3, #2
  }
}
 8005426:	4618      	mov	r0, r3
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	4613      	mov	r3, r2
 800543a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b20      	cmp	r3, #32
 8005446:	d112      	bne.n	800546e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <HAL_UART_Receive_IT+0x26>
 800544e:	88fb      	ldrh	r3, [r7, #6]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e00b      	b.n	8005470 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	461a      	mov	r2, r3
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 fb12 	bl	8005a8e <UART_Start_Receive_IT>
 800546a:	4603      	mov	r3, r0
 800546c:	e000      	b.n	8005470 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800546e:	2302      	movs	r3, #2
  }
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b0ba      	sub	sp, #232	@ 0xe8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800549e:	2300      	movs	r3, #0
 80054a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80054b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10f      	bne.n	80054de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d009      	beq.n	80054de <HAL_UART_IRQHandler+0x66>
 80054ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fbf2 	bl	8005cc0 <UART_Receive_IT>
      return;
 80054dc:	e25b      	b.n	8005996 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 80de 	beq.w	80056a4 <HAL_UART_IRQHandler+0x22c>
 80054e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d106      	bne.n	8005502 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 80d1 	beq.w	80056a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00b      	beq.n	8005526 <HAL_UART_IRQHandler+0xae>
 800550e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005516:	2b00      	cmp	r3, #0
 8005518:	d005      	beq.n	8005526 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551e:	f043 0201 	orr.w	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00b      	beq.n	800554a <HAL_UART_IRQHandler+0xd2>
 8005532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d005      	beq.n	800554a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005542:	f043 0202 	orr.w	r2, r3, #2
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800554a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <HAL_UART_IRQHandler+0xf6>
 8005556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d005      	beq.n	800556e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005566:	f043 0204 	orr.w	r2, r3, #4
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800556e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d011      	beq.n	800559e <HAL_UART_IRQHandler+0x126>
 800557a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	d105      	bne.n	8005592 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d005      	beq.n	800559e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005596:	f043 0208 	orr.w	r2, r3, #8
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 81f2 	beq.w	800598c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d008      	beq.n	80055c6 <HAL_UART_IRQHandler+0x14e>
 80055b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fb7d 	bl	8005cc0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d0:	2b40      	cmp	r3, #64	@ 0x40
 80055d2:	bf0c      	ite	eq
 80055d4:	2301      	moveq	r3, #1
 80055d6:	2300      	movne	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d103      	bne.n	80055f2 <HAL_UART_IRQHandler+0x17a>
 80055ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d04f      	beq.n	8005692 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fa85 	bl	8005b02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005602:	2b40      	cmp	r3, #64	@ 0x40
 8005604:	d141      	bne.n	800568a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3314      	adds	r3, #20
 800560c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005614:	e853 3f00 	ldrex	r3, [r3]
 8005618:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800561c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005620:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005624:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3314      	adds	r3, #20
 800562e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005632:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005636:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800563e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800564a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1d9      	bne.n	8005606 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d013      	beq.n	8005682 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565e:	4a7e      	ldr	r2, [pc, #504]	@ (8005858 <HAL_UART_IRQHandler+0x3e0>)
 8005660:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005666:	4618      	mov	r0, r3
 8005668:	f7fc feb6 	bl	80023d8 <HAL_DMA_Abort_IT>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d016      	beq.n	80056a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800567c:	4610      	mov	r0, r2
 800567e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005680:	e00e      	b.n	80056a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f994 	bl	80059b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005688:	e00a      	b.n	80056a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f990 	bl	80059b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005690:	e006      	b.n	80056a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f98c 	bl	80059b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800569e:	e175      	b.n	800598c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a0:	bf00      	nop
    return;
 80056a2:	e173      	b.n	800598c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	f040 814f 	bne.w	800594c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80056ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 8148 	beq.w	800594c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80056bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 8141 	beq.w	800594c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056ca:	2300      	movs	r3, #0
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60bb      	str	r3, [r7, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	60bb      	str	r3, [r7, #8]
 80056de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ea:	2b40      	cmp	r3, #64	@ 0x40
 80056ec:	f040 80b6 	bne.w	800585c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 8145 	beq.w	8005990 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800570a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800570e:	429a      	cmp	r2, r3
 8005710:	f080 813e 	bcs.w	8005990 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800571a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005726:	f000 8088 	beq.w	800583a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	330c      	adds	r3, #12
 8005730:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005738:	e853 3f00 	ldrex	r3, [r3]
 800573c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005740:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005748:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	330c      	adds	r3, #12
 8005752:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005756:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800575a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005762:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800576e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1d9      	bne.n	800572a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3314      	adds	r3, #20
 800577c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005780:	e853 3f00 	ldrex	r3, [r3]
 8005784:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005786:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005788:	f023 0301 	bic.w	r3, r3, #1
 800578c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3314      	adds	r3, #20
 8005796:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800579a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800579e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80057ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e1      	bne.n	8005776 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3314      	adds	r3, #20
 80057b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80057c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3314      	adds	r3, #20
 80057d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80057d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80057d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80057dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80057e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e3      	bne.n	80057b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	330c      	adds	r3, #12
 80057fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800580a:	f023 0310 	bic.w	r3, r3, #16
 800580e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	330c      	adds	r3, #12
 8005818:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800581c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800581e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005820:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005822:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005824:	e841 2300 	strex	r3, r2, [r1]
 8005828:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800582a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1e3      	bne.n	80057f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005834:	4618      	mov	r0, r3
 8005836:	f7fc fd5f 	bl	80022f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2202      	movs	r2, #2
 800583e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005848:	b29b      	uxth	r3, r3
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	b29b      	uxth	r3, r3
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f8b7 	bl	80059c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005856:	e09b      	b.n	8005990 <HAL_UART_IRQHandler+0x518>
 8005858:	08005bc9 	.word	0x08005bc9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005864:	b29b      	uxth	r3, r3
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 808e 	beq.w	8005994 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005878:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 8089 	beq.w	8005994 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005898:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	330c      	adds	r3, #12
 80058a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80058a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80058a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058ae:	e841 2300 	strex	r3, r2, [r1]
 80058b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1e3      	bne.n	8005882 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	3314      	adds	r3, #20
 80058c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	623b      	str	r3, [r7, #32]
   return(result);
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	f023 0301 	bic.w	r3, r3, #1
 80058d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3314      	adds	r3, #20
 80058da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80058de:	633a      	str	r2, [r7, #48]	@ 0x30
 80058e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e3      	bne.n	80058ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	330c      	adds	r3, #12
 8005906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	e853 3f00 	ldrex	r3, [r3]
 800590e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0310 	bic.w	r3, r3, #16
 8005916:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	330c      	adds	r3, #12
 8005920:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005924:	61fa      	str	r2, [r7, #28]
 8005926:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	69b9      	ldr	r1, [r7, #24]
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	e841 2300 	strex	r3, r2, [r1]
 8005930:	617b      	str	r3, [r7, #20]
   return(result);
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1e3      	bne.n	8005900 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800593e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f83d 	bl	80059c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800594a:	e023      	b.n	8005994 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800594c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005954:	2b00      	cmp	r3, #0
 8005956:	d009      	beq.n	800596c <HAL_UART_IRQHandler+0x4f4>
 8005958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800595c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f943 	bl	8005bf0 <UART_Transmit_IT>
    return;
 800596a:	e014      	b.n	8005996 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800596c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00e      	beq.n	8005996 <HAL_UART_IRQHandler+0x51e>
 8005978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800597c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d008      	beq.n	8005996 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f983 	bl	8005c90 <UART_EndTransmit_IT>
    return;
 800598a:	e004      	b.n	8005996 <HAL_UART_IRQHandler+0x51e>
    return;
 800598c:	bf00      	nop
 800598e:	e002      	b.n	8005996 <HAL_UART_IRQHandler+0x51e>
      return;
 8005990:	bf00      	nop
 8005992:	e000      	b.n	8005996 <HAL_UART_IRQHandler+0x51e>
      return;
 8005994:	bf00      	nop
  }
}
 8005996:	37e8      	adds	r7, #232	@ 0xe8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ec:	e03b      	b.n	8005a66 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d037      	beq.n	8005a66 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f6:	f7fc fa8f 	bl	8001f18 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	6a3a      	ldr	r2, [r7, #32]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d302      	bcc.n	8005a0c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e03a      	b.n	8005a86 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d023      	beq.n	8005a66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b80      	cmp	r3, #128	@ 0x80
 8005a22:	d020      	beq.n	8005a66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2b40      	cmp	r3, #64	@ 0x40
 8005a28:	d01d      	beq.n	8005a66 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0308 	and.w	r3, r3, #8
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d116      	bne.n	8005a66 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 f857 	bl	8005b02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2208      	movs	r2, #8
 8005a58:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e00f      	b.n	8005a86 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	bf0c      	ite	eq
 8005a76:	2301      	moveq	r3, #1
 8005a78:	2300      	movne	r3, #0
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d0b4      	beq.n	80059ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	88fa      	ldrh	r2, [r7, #6]
 8005aa6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	88fa      	ldrh	r2, [r7, #6]
 8005aac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2222      	movs	r2, #34	@ 0x22
 8005ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ad2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695a      	ldr	r2, [r3, #20]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0220 	orr.w	r2, r2, #32
 8005af2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b095      	sub	sp, #84	@ 0x54
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	330c      	adds	r3, #12
 8005b10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b14:	e853 3f00 	ldrex	r3, [r3]
 8005b18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	330c      	adds	r3, #12
 8005b28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e5      	bne.n	8005b0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3314      	adds	r3, #20
 8005b44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	f023 0301 	bic.w	r3, r3, #1
 8005b54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3314      	adds	r3, #20
 8005b5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e5      	bne.n	8005b3e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d119      	bne.n	8005bae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	330c      	adds	r3, #12
 8005b80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	e853 3f00 	ldrex	r3, [r3]
 8005b88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f023 0310 	bic.w	r3, r3, #16
 8005b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	330c      	adds	r3, #12
 8005b98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b9a:	61ba      	str	r2, [r7, #24]
 8005b9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	6979      	ldr	r1, [r7, #20]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1e5      	bne.n	8005b7a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005bbc:	bf00      	nop
 8005bbe:	3754      	adds	r7, #84	@ 0x54
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7ff fee4 	bl	80059b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005be8:	bf00      	nop
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b21      	cmp	r3, #33	@ 0x21
 8005c02:	d13e      	bne.n	8005c82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c0c:	d114      	bne.n	8005c38 <UART_Transmit_IT+0x48>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d110      	bne.n	8005c38 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	1c9a      	adds	r2, r3, #2
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	621a      	str	r2, [r3, #32]
 8005c36:	e008      	b.n	8005c4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	1c59      	adds	r1, r3, #1
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6211      	str	r1, [r2, #32]
 8005c42:	781a      	ldrb	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	4619      	mov	r1, r3
 8005c58:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10f      	bne.n	8005c7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e000      	b.n	8005c84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c82:	2302      	movs	r3, #2
  }
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ca6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7ff fe73 	bl	800599c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08c      	sub	sp, #48	@ 0x30
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b22      	cmp	r3, #34	@ 0x22
 8005cd2:	f040 80ae 	bne.w	8005e32 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cde:	d117      	bne.n	8005d10 <UART_Receive_IT+0x50>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d113      	bne.n	8005d10 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d08:	1c9a      	adds	r2, r3, #2
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d0e:	e026      	b.n	8005d5e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d22:	d007      	beq.n	8005d34 <UART_Receive_IT+0x74>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <UART_Receive_IT+0x82>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d106      	bne.n	8005d42 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	e008      	b.n	8005d54 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d52:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d15d      	bne.n	8005e2e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68da      	ldr	r2, [r3, #12]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0220 	bic.w	r2, r2, #32
 8005d80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695a      	ldr	r2, [r3, #20]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0201 	bic.w	r2, r2, #1
 8005da0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d135      	bne.n	8005e24 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	330c      	adds	r3, #12
 8005dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f023 0310 	bic.w	r3, r3, #16
 8005dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	330c      	adds	r3, #12
 8005ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dde:	623a      	str	r2, [r7, #32]
 8005de0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	69f9      	ldr	r1, [r7, #28]
 8005de4:	6a3a      	ldr	r2, [r7, #32]
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e5      	bne.n	8005dbe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	2b10      	cmp	r3, #16
 8005dfe:	d10a      	bne.n	8005e16 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff fdd1 	bl	80059c4 <HAL_UARTEx_RxEventCallback>
 8005e22:	e002      	b.n	8005e2a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7fa fdb7 	bl	8000998 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e002      	b.n	8005e34 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e000      	b.n	8005e34 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e32:	2302      	movs	r3, #2
  }
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3730      	adds	r7, #48	@ 0x30
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e40:	b0c0      	sub	sp, #256	@ 0x100
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e58:	68d9      	ldr	r1, [r3, #12]
 8005e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	ea40 0301 	orr.w	r3, r0, r1
 8005e64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e94:	f021 010c 	bic.w	r1, r1, #12
 8005e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ea2:	430b      	orrs	r3, r1
 8005ea4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb6:	6999      	ldr	r1, [r3, #24]
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	ea40 0301 	orr.w	r3, r0, r1
 8005ec2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	4b8f      	ldr	r3, [pc, #572]	@ (8006108 <UART_SetConfig+0x2cc>)
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d005      	beq.n	8005edc <UART_SetConfig+0xa0>
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4b8d      	ldr	r3, [pc, #564]	@ (800610c <UART_SetConfig+0x2d0>)
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d104      	bne.n	8005ee6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005edc:	f7fe feaa 	bl	8004c34 <HAL_RCC_GetPCLK2Freq>
 8005ee0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005ee4:	e003      	b.n	8005eee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ee6:	f7fe fe91 	bl	8004c0c <HAL_RCC_GetPCLK1Freq>
 8005eea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ef8:	f040 810c 	bne.w	8006114 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f00:	2200      	movs	r2, #0
 8005f02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f0e:	4622      	mov	r2, r4
 8005f10:	462b      	mov	r3, r5
 8005f12:	1891      	adds	r1, r2, r2
 8005f14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f16:	415b      	adcs	r3, r3
 8005f18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f1e:	4621      	mov	r1, r4
 8005f20:	eb12 0801 	adds.w	r8, r2, r1
 8005f24:	4629      	mov	r1, r5
 8005f26:	eb43 0901 	adc.w	r9, r3, r1
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f3e:	4690      	mov	r8, r2
 8005f40:	4699      	mov	r9, r3
 8005f42:	4623      	mov	r3, r4
 8005f44:	eb18 0303 	adds.w	r3, r8, r3
 8005f48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f4c:	462b      	mov	r3, r5
 8005f4e:	eb49 0303 	adc.w	r3, r9, r3
 8005f52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	18db      	adds	r3, r3, r3
 8005f6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f70:	4613      	mov	r3, r2
 8005f72:	eb42 0303 	adc.w	r3, r2, r3
 8005f76:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f80:	f7fa f93c 	bl	80001fc <__aeabi_uldivmod>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4b61      	ldr	r3, [pc, #388]	@ (8006110 <UART_SetConfig+0x2d4>)
 8005f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f8e:	095b      	lsrs	r3, r3, #5
 8005f90:	011c      	lsls	r4, r3, #4
 8005f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005fa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005fa4:	4642      	mov	r2, r8
 8005fa6:	464b      	mov	r3, r9
 8005fa8:	1891      	adds	r1, r2, r2
 8005faa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005fac:	415b      	adcs	r3, r3
 8005fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005fb4:	4641      	mov	r1, r8
 8005fb6:	eb12 0a01 	adds.w	sl, r2, r1
 8005fba:	4649      	mov	r1, r9
 8005fbc:	eb43 0b01 	adc.w	fp, r3, r1
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fd4:	4692      	mov	sl, r2
 8005fd6:	469b      	mov	fp, r3
 8005fd8:	4643      	mov	r3, r8
 8005fda:	eb1a 0303 	adds.w	r3, sl, r3
 8005fde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	eb4b 0303 	adc.w	r3, fp, r3
 8005fe8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ff8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ffc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006000:	460b      	mov	r3, r1
 8006002:	18db      	adds	r3, r3, r3
 8006004:	643b      	str	r3, [r7, #64]	@ 0x40
 8006006:	4613      	mov	r3, r2
 8006008:	eb42 0303 	adc.w	r3, r2, r3
 800600c:	647b      	str	r3, [r7, #68]	@ 0x44
 800600e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006012:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006016:	f7fa f8f1 	bl	80001fc <__aeabi_uldivmod>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4611      	mov	r1, r2
 8006020:	4b3b      	ldr	r3, [pc, #236]	@ (8006110 <UART_SetConfig+0x2d4>)
 8006022:	fba3 2301 	umull	r2, r3, r3, r1
 8006026:	095b      	lsrs	r3, r3, #5
 8006028:	2264      	movs	r2, #100	@ 0x64
 800602a:	fb02 f303 	mul.w	r3, r2, r3
 800602e:	1acb      	subs	r3, r1, r3
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006036:	4b36      	ldr	r3, [pc, #216]	@ (8006110 <UART_SetConfig+0x2d4>)
 8006038:	fba3 2302 	umull	r2, r3, r3, r2
 800603c:	095b      	lsrs	r3, r3, #5
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006044:	441c      	add	r4, r3
 8006046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800604a:	2200      	movs	r2, #0
 800604c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006050:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006054:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006058:	4642      	mov	r2, r8
 800605a:	464b      	mov	r3, r9
 800605c:	1891      	adds	r1, r2, r2
 800605e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006060:	415b      	adcs	r3, r3
 8006062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006064:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006068:	4641      	mov	r1, r8
 800606a:	1851      	adds	r1, r2, r1
 800606c:	6339      	str	r1, [r7, #48]	@ 0x30
 800606e:	4649      	mov	r1, r9
 8006070:	414b      	adcs	r3, r1
 8006072:	637b      	str	r3, [r7, #52]	@ 0x34
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006080:	4659      	mov	r1, fp
 8006082:	00cb      	lsls	r3, r1, #3
 8006084:	4651      	mov	r1, sl
 8006086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800608a:	4651      	mov	r1, sl
 800608c:	00ca      	lsls	r2, r1, #3
 800608e:	4610      	mov	r0, r2
 8006090:	4619      	mov	r1, r3
 8006092:	4603      	mov	r3, r0
 8006094:	4642      	mov	r2, r8
 8006096:	189b      	adds	r3, r3, r2
 8006098:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800609c:	464b      	mov	r3, r9
 800609e:	460a      	mov	r2, r1
 80060a0:	eb42 0303 	adc.w	r3, r2, r3
 80060a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80060b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060bc:	460b      	mov	r3, r1
 80060be:	18db      	adds	r3, r3, r3
 80060c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060c2:	4613      	mov	r3, r2
 80060c4:	eb42 0303 	adc.w	r3, r2, r3
 80060c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80060d2:	f7fa f893 	bl	80001fc <__aeabi_uldivmod>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	4b0d      	ldr	r3, [pc, #52]	@ (8006110 <UART_SetConfig+0x2d4>)
 80060dc:	fba3 1302 	umull	r1, r3, r3, r2
 80060e0:	095b      	lsrs	r3, r3, #5
 80060e2:	2164      	movs	r1, #100	@ 0x64
 80060e4:	fb01 f303 	mul.w	r3, r1, r3
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	3332      	adds	r3, #50	@ 0x32
 80060ee:	4a08      	ldr	r2, [pc, #32]	@ (8006110 <UART_SetConfig+0x2d4>)
 80060f0:	fba2 2303 	umull	r2, r3, r2, r3
 80060f4:	095b      	lsrs	r3, r3, #5
 80060f6:	f003 0207 	and.w	r2, r3, #7
 80060fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4422      	add	r2, r4
 8006102:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006104:	e106      	b.n	8006314 <UART_SetConfig+0x4d8>
 8006106:	bf00      	nop
 8006108:	40011000 	.word	0x40011000
 800610c:	40011400 	.word	0x40011400
 8006110:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006118:	2200      	movs	r2, #0
 800611a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800611e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006122:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006126:	4642      	mov	r2, r8
 8006128:	464b      	mov	r3, r9
 800612a:	1891      	adds	r1, r2, r2
 800612c:	6239      	str	r1, [r7, #32]
 800612e:	415b      	adcs	r3, r3
 8006130:	627b      	str	r3, [r7, #36]	@ 0x24
 8006132:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006136:	4641      	mov	r1, r8
 8006138:	1854      	adds	r4, r2, r1
 800613a:	4649      	mov	r1, r9
 800613c:	eb43 0501 	adc.w	r5, r3, r1
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	00eb      	lsls	r3, r5, #3
 800614a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800614e:	00e2      	lsls	r2, r4, #3
 8006150:	4614      	mov	r4, r2
 8006152:	461d      	mov	r5, r3
 8006154:	4643      	mov	r3, r8
 8006156:	18e3      	adds	r3, r4, r3
 8006158:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800615c:	464b      	mov	r3, r9
 800615e:	eb45 0303 	adc.w	r3, r5, r3
 8006162:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006172:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006182:	4629      	mov	r1, r5
 8006184:	008b      	lsls	r3, r1, #2
 8006186:	4621      	mov	r1, r4
 8006188:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800618c:	4621      	mov	r1, r4
 800618e:	008a      	lsls	r2, r1, #2
 8006190:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006194:	f7fa f832 	bl	80001fc <__aeabi_uldivmod>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4b60      	ldr	r3, [pc, #384]	@ (8006320 <UART_SetConfig+0x4e4>)
 800619e:	fba3 2302 	umull	r2, r3, r3, r2
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	011c      	lsls	r4, r3, #4
 80061a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80061b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80061b8:	4642      	mov	r2, r8
 80061ba:	464b      	mov	r3, r9
 80061bc:	1891      	adds	r1, r2, r2
 80061be:	61b9      	str	r1, [r7, #24]
 80061c0:	415b      	adcs	r3, r3
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061c8:	4641      	mov	r1, r8
 80061ca:	1851      	adds	r1, r2, r1
 80061cc:	6139      	str	r1, [r7, #16]
 80061ce:	4649      	mov	r1, r9
 80061d0:	414b      	adcs	r3, r1
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061e0:	4659      	mov	r1, fp
 80061e2:	00cb      	lsls	r3, r1, #3
 80061e4:	4651      	mov	r1, sl
 80061e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ea:	4651      	mov	r1, sl
 80061ec:	00ca      	lsls	r2, r1, #3
 80061ee:	4610      	mov	r0, r2
 80061f0:	4619      	mov	r1, r3
 80061f2:	4603      	mov	r3, r0
 80061f4:	4642      	mov	r2, r8
 80061f6:	189b      	adds	r3, r3, r2
 80061f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061fc:	464b      	mov	r3, r9
 80061fe:	460a      	mov	r2, r1
 8006200:	eb42 0303 	adc.w	r3, r2, r3
 8006204:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006212:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006214:	f04f 0200 	mov.w	r2, #0
 8006218:	f04f 0300 	mov.w	r3, #0
 800621c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006220:	4649      	mov	r1, r9
 8006222:	008b      	lsls	r3, r1, #2
 8006224:	4641      	mov	r1, r8
 8006226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800622a:	4641      	mov	r1, r8
 800622c:	008a      	lsls	r2, r1, #2
 800622e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006232:	f7f9 ffe3 	bl	80001fc <__aeabi_uldivmod>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	4611      	mov	r1, r2
 800623c:	4b38      	ldr	r3, [pc, #224]	@ (8006320 <UART_SetConfig+0x4e4>)
 800623e:	fba3 2301 	umull	r2, r3, r3, r1
 8006242:	095b      	lsrs	r3, r3, #5
 8006244:	2264      	movs	r2, #100	@ 0x64
 8006246:	fb02 f303 	mul.w	r3, r2, r3
 800624a:	1acb      	subs	r3, r1, r3
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	3332      	adds	r3, #50	@ 0x32
 8006250:	4a33      	ldr	r2, [pc, #204]	@ (8006320 <UART_SetConfig+0x4e4>)
 8006252:	fba2 2303 	umull	r2, r3, r2, r3
 8006256:	095b      	lsrs	r3, r3, #5
 8006258:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800625c:	441c      	add	r4, r3
 800625e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006262:	2200      	movs	r2, #0
 8006264:	673b      	str	r3, [r7, #112]	@ 0x70
 8006266:	677a      	str	r2, [r7, #116]	@ 0x74
 8006268:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800626c:	4642      	mov	r2, r8
 800626e:	464b      	mov	r3, r9
 8006270:	1891      	adds	r1, r2, r2
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	415b      	adcs	r3, r3
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800627c:	4641      	mov	r1, r8
 800627e:	1851      	adds	r1, r2, r1
 8006280:	6039      	str	r1, [r7, #0]
 8006282:	4649      	mov	r1, r9
 8006284:	414b      	adcs	r3, r1
 8006286:	607b      	str	r3, [r7, #4]
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006294:	4659      	mov	r1, fp
 8006296:	00cb      	lsls	r3, r1, #3
 8006298:	4651      	mov	r1, sl
 800629a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800629e:	4651      	mov	r1, sl
 80062a0:	00ca      	lsls	r2, r1, #3
 80062a2:	4610      	mov	r0, r2
 80062a4:	4619      	mov	r1, r3
 80062a6:	4603      	mov	r3, r0
 80062a8:	4642      	mov	r2, r8
 80062aa:	189b      	adds	r3, r3, r2
 80062ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062ae:	464b      	mov	r3, r9
 80062b0:	460a      	mov	r2, r1
 80062b2:	eb42 0303 	adc.w	r3, r2, r3
 80062b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80062c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	f04f 0300 	mov.w	r3, #0
 80062cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80062d0:	4649      	mov	r1, r9
 80062d2:	008b      	lsls	r3, r1, #2
 80062d4:	4641      	mov	r1, r8
 80062d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062da:	4641      	mov	r1, r8
 80062dc:	008a      	lsls	r2, r1, #2
 80062de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80062e2:	f7f9 ff8b 	bl	80001fc <__aeabi_uldivmod>
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006320 <UART_SetConfig+0x4e4>)
 80062ec:	fba3 1302 	umull	r1, r3, r3, r2
 80062f0:	095b      	lsrs	r3, r3, #5
 80062f2:	2164      	movs	r1, #100	@ 0x64
 80062f4:	fb01 f303 	mul.w	r3, r1, r3
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	3332      	adds	r3, #50	@ 0x32
 80062fe:	4a08      	ldr	r2, [pc, #32]	@ (8006320 <UART_SetConfig+0x4e4>)
 8006300:	fba2 2303 	umull	r2, r3, r2, r3
 8006304:	095b      	lsrs	r3, r3, #5
 8006306:	f003 020f 	and.w	r2, r3, #15
 800630a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4422      	add	r2, r4
 8006312:	609a      	str	r2, [r3, #8]
}
 8006314:	bf00      	nop
 8006316:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800631a:	46bd      	mov	sp, r7
 800631c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006320:	51eb851f 	.word	0x51eb851f

08006324 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006324:	b084      	sub	sp, #16
 8006326:	b580      	push	{r7, lr}
 8006328:	b084      	sub	sp, #16
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	f107 001c 	add.w	r0, r7, #28
 8006332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006336:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800633a:	2b01      	cmp	r3, #1
 800633c:	d123      	bne.n	8006386 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006342:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006352:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006366:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800636a:	2b01      	cmp	r3, #1
 800636c:	d105      	bne.n	800637a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 fae8 	bl	8007950 <USB_CoreReset>
 8006380:	4603      	mov	r3, r0
 8006382:	73fb      	strb	r3, [r7, #15]
 8006384:	e01b      	b.n	80063be <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f001 fadc 	bl	8007950 <USB_CoreReset>
 8006398:	4603      	mov	r3, r0
 800639a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800639c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d106      	bne.n	80063b2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80063b0:	e005      	b.n	80063be <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063be:	7fbb      	ldrb	r3, [r7, #30]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d10b      	bne.n	80063dc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f043 0206 	orr.w	r2, r3, #6
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f043 0220 	orr.w	r2, r3, #32
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063e8:	b004      	add	sp, #16
 80063ea:	4770      	bx	lr

080063ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	4613      	mov	r3, r2
 80063f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d165      	bne.n	80064cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	4a41      	ldr	r2, [pc, #260]	@ (8006508 <USB_SetTurnaroundTime+0x11c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d906      	bls.n	8006416 <USB_SetTurnaroundTime+0x2a>
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	4a40      	ldr	r2, [pc, #256]	@ (800650c <USB_SetTurnaroundTime+0x120>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d202      	bcs.n	8006416 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006410:	230f      	movs	r3, #15
 8006412:	617b      	str	r3, [r7, #20]
 8006414:	e062      	b.n	80064dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	4a3c      	ldr	r2, [pc, #240]	@ (800650c <USB_SetTurnaroundTime+0x120>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d306      	bcc.n	800642c <USB_SetTurnaroundTime+0x40>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	4a3b      	ldr	r2, [pc, #236]	@ (8006510 <USB_SetTurnaroundTime+0x124>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d202      	bcs.n	800642c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006426:	230e      	movs	r3, #14
 8006428:	617b      	str	r3, [r7, #20]
 800642a:	e057      	b.n	80064dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4a38      	ldr	r2, [pc, #224]	@ (8006510 <USB_SetTurnaroundTime+0x124>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d306      	bcc.n	8006442 <USB_SetTurnaroundTime+0x56>
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4a37      	ldr	r2, [pc, #220]	@ (8006514 <USB_SetTurnaroundTime+0x128>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d202      	bcs.n	8006442 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800643c:	230d      	movs	r3, #13
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	e04c      	b.n	80064dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	4a33      	ldr	r2, [pc, #204]	@ (8006514 <USB_SetTurnaroundTime+0x128>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d306      	bcc.n	8006458 <USB_SetTurnaroundTime+0x6c>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	4a32      	ldr	r2, [pc, #200]	@ (8006518 <USB_SetTurnaroundTime+0x12c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d802      	bhi.n	8006458 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006452:	230c      	movs	r3, #12
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	e041      	b.n	80064dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4a2f      	ldr	r2, [pc, #188]	@ (8006518 <USB_SetTurnaroundTime+0x12c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d906      	bls.n	800646e <USB_SetTurnaroundTime+0x82>
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4a2e      	ldr	r2, [pc, #184]	@ (800651c <USB_SetTurnaroundTime+0x130>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d802      	bhi.n	800646e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006468:	230b      	movs	r3, #11
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	e036      	b.n	80064dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	4a2a      	ldr	r2, [pc, #168]	@ (800651c <USB_SetTurnaroundTime+0x130>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d906      	bls.n	8006484 <USB_SetTurnaroundTime+0x98>
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	4a29      	ldr	r2, [pc, #164]	@ (8006520 <USB_SetTurnaroundTime+0x134>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d802      	bhi.n	8006484 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800647e:	230a      	movs	r3, #10
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	e02b      	b.n	80064dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4a26      	ldr	r2, [pc, #152]	@ (8006520 <USB_SetTurnaroundTime+0x134>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d906      	bls.n	800649a <USB_SetTurnaroundTime+0xae>
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4a25      	ldr	r2, [pc, #148]	@ (8006524 <USB_SetTurnaroundTime+0x138>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d202      	bcs.n	800649a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006494:	2309      	movs	r3, #9
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	e020      	b.n	80064dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	4a21      	ldr	r2, [pc, #132]	@ (8006524 <USB_SetTurnaroundTime+0x138>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d306      	bcc.n	80064b0 <USB_SetTurnaroundTime+0xc4>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	4a20      	ldr	r2, [pc, #128]	@ (8006528 <USB_SetTurnaroundTime+0x13c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d802      	bhi.n	80064b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80064aa:	2308      	movs	r3, #8
 80064ac:	617b      	str	r3, [r7, #20]
 80064ae:	e015      	b.n	80064dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006528 <USB_SetTurnaroundTime+0x13c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d906      	bls.n	80064c6 <USB_SetTurnaroundTime+0xda>
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4a1c      	ldr	r2, [pc, #112]	@ (800652c <USB_SetTurnaroundTime+0x140>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d202      	bcs.n	80064c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80064c0:	2307      	movs	r3, #7
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	e00a      	b.n	80064dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80064c6:	2306      	movs	r3, #6
 80064c8:	617b      	str	r3, [r7, #20]
 80064ca:	e007      	b.n	80064dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80064cc:	79fb      	ldrb	r3, [r7, #7]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d102      	bne.n	80064d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80064d2:	2309      	movs	r3, #9
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	e001      	b.n	80064dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80064d8:	2309      	movs	r3, #9
 80064da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	029b      	lsls	r3, r3, #10
 80064f0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80064f4:	431a      	orrs	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	00d8acbf 	.word	0x00d8acbf
 800650c:	00e4e1c0 	.word	0x00e4e1c0
 8006510:	00f42400 	.word	0x00f42400
 8006514:	01067380 	.word	0x01067380
 8006518:	011a499f 	.word	0x011a499f
 800651c:	01312cff 	.word	0x01312cff
 8006520:	014ca43f 	.word	0x014ca43f
 8006524:	016e3600 	.word	0x016e3600
 8006528:	01a6ab1f 	.word	0x01a6ab1f
 800652c:	01e84800 	.word	0x01e84800

08006530 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f043 0201 	orr.w	r2, r3, #1
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f023 0201 	bic.w	r2, r3, #1
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d115      	bne.n	80065c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80065a2:	200a      	movs	r0, #10
 80065a4:	f7fb fcc4 	bl	8001f30 <HAL_Delay>
      ms += 10U;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	330a      	adds	r3, #10
 80065ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f001 f93f 	bl	8007832 <USB_GetMode>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d01e      	beq.n	80065f8 <USB_SetCurrentMode+0x84>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80065be:	d9f0      	bls.n	80065a2 <USB_SetCurrentMode+0x2e>
 80065c0:	e01a      	b.n	80065f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065c2:	78fb      	ldrb	r3, [r7, #3]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d115      	bne.n	80065f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80065d4:	200a      	movs	r0, #10
 80065d6:	f7fb fcab 	bl	8001f30 <HAL_Delay>
      ms += 10U;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	330a      	adds	r3, #10
 80065de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f001 f926 	bl	8007832 <USB_GetMode>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d005      	beq.n	80065f8 <USB_SetCurrentMode+0x84>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2bc7      	cmp	r3, #199	@ 0xc7
 80065f0:	d9f0      	bls.n	80065d4 <USB_SetCurrentMode+0x60>
 80065f2:	e001      	b.n	80065f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e005      	b.n	8006604 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2bc8      	cmp	r3, #200	@ 0xc8
 80065fc:	d101      	bne.n	8006602 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800660c:	b084      	sub	sp, #16
 800660e:	b580      	push	{r7, lr}
 8006610:	b086      	sub	sp, #24
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
 8006616:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800661a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006626:	2300      	movs	r3, #0
 8006628:	613b      	str	r3, [r7, #16]
 800662a:	e009      	b.n	8006640 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	3340      	adds	r3, #64	@ 0x40
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	2200      	movs	r2, #0
 8006638:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	3301      	adds	r3, #1
 800663e:	613b      	str	r3, [r7, #16]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	2b0e      	cmp	r3, #14
 8006644:	d9f2      	bls.n	800662c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006646:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800664a:	2b00      	cmp	r3, #0
 800664c:	d11c      	bne.n	8006688 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800665c:	f043 0302 	orr.w	r3, r3, #2
 8006660:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006666:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006672:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	639a      	str	r2, [r3, #56]	@ 0x38
 8006686:	e00b      	b.n	80066a0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006698:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066a6:	461a      	mov	r2, r3
 80066a8:	2300      	movs	r3, #0
 80066aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d10d      	bne.n	80066d0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80066b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d104      	bne.n	80066c6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066bc:	2100      	movs	r1, #0
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f968 	bl	8006994 <USB_SetDevSpeed>
 80066c4:	e008      	b.n	80066d8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066c6:	2101      	movs	r1, #1
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f963 	bl	8006994 <USB_SetDevSpeed>
 80066ce:	e003      	b.n	80066d8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066d0:	2103      	movs	r1, #3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f95e 	bl	8006994 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066d8:	2110      	movs	r1, #16
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f8fa 	bl	80068d4 <USB_FlushTxFifo>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f924 	bl	8006938 <USB_FlushRxFifo>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006700:	461a      	mov	r2, r3
 8006702:	2300      	movs	r3, #0
 8006704:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800670c:	461a      	mov	r2, r3
 800670e:	2300      	movs	r3, #0
 8006710:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006718:	461a      	mov	r2, r3
 800671a:	2300      	movs	r3, #0
 800671c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800671e:	2300      	movs	r3, #0
 8006720:	613b      	str	r3, [r7, #16]
 8006722:	e043      	b.n	80067ac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006736:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800673a:	d118      	bne.n	800676e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10a      	bne.n	8006758 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800674e:	461a      	mov	r2, r3
 8006750:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	e013      	b.n	8006780 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006764:	461a      	mov	r2, r3
 8006766:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	e008      	b.n	8006780 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800677a:	461a      	mov	r2, r3
 800677c:	2300      	movs	r3, #0
 800677e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800678c:	461a      	mov	r2, r3
 800678e:	2300      	movs	r3, #0
 8006790:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800679e:	461a      	mov	r2, r3
 80067a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	3301      	adds	r3, #1
 80067aa:	613b      	str	r3, [r7, #16]
 80067ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80067b0:	461a      	mov	r2, r3
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d3b5      	bcc.n	8006724 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067b8:	2300      	movs	r3, #0
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	e043      	b.n	8006846 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067d4:	d118      	bne.n	8006808 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10a      	bne.n	80067f2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e8:	461a      	mov	r2, r3
 80067ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	e013      	b.n	800681a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067fe:	461a      	mov	r2, r3
 8006800:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006804:	6013      	str	r3, [r2, #0]
 8006806:	e008      	b.n	800681a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006814:	461a      	mov	r2, r3
 8006816:	2300      	movs	r3, #0
 8006818:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4413      	add	r3, r2
 8006822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006826:	461a      	mov	r2, r3
 8006828:	2300      	movs	r3, #0
 800682a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006838:	461a      	mov	r2, r3
 800683a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800683e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	3301      	adds	r3, #1
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800684a:	461a      	mov	r2, r3
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	4293      	cmp	r3, r2
 8006850:	d3b5      	bcc.n	80067be <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006864:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006872:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006874:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006878:	2b00      	cmp	r3, #0
 800687a:	d105      	bne.n	8006888 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	f043 0210 	orr.w	r2, r3, #16
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	699a      	ldr	r2, [r3, #24]
 800688c:	4b10      	ldr	r3, [pc, #64]	@ (80068d0 <USB_DevInit+0x2c4>)
 800688e:	4313      	orrs	r3, r2
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006894:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	f043 0208 	orr.w	r2, r3, #8
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d107      	bne.n	80068c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068b8:	f043 0304 	orr.w	r3, r3, #4
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068cc:	b004      	add	sp, #16
 80068ce:	4770      	bx	lr
 80068d0:	803c3800 	.word	0x803c3800

080068d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3301      	adds	r3, #1
 80068e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068ee:	d901      	bls.n	80068f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e01b      	b.n	800692c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	daf2      	bge.n	80068e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	019b      	lsls	r3, r3, #6
 8006904:	f043 0220 	orr.w	r2, r3, #32
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3301      	adds	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006918:	d901      	bls.n	800691e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e006      	b.n	800692c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b20      	cmp	r3, #32
 8006928:	d0f0      	beq.n	800690c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	3301      	adds	r3, #1
 8006948:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006950:	d901      	bls.n	8006956 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e018      	b.n	8006988 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	daf2      	bge.n	8006944 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2210      	movs	r2, #16
 8006966:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	3301      	adds	r3, #1
 800696c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006974:	d901      	bls.n	800697a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e006      	b.n	8006988 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f003 0310 	and.w	r3, r3, #16
 8006982:	2b10      	cmp	r3, #16
 8006984:	d0f0      	beq.n	8006968 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	78fb      	ldrb	r3, [r7, #3]
 80069ae:	68f9      	ldr	r1, [r7, #12]
 80069b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069b4:	4313      	orrs	r3, r2
 80069b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b087      	sub	sp, #28
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 0306 	and.w	r3, r3, #6
 80069de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d102      	bne.n	80069ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80069e6:	2300      	movs	r3, #0
 80069e8:	75fb      	strb	r3, [r7, #23]
 80069ea:	e00a      	b.n	8006a02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d002      	beq.n	80069f8 <USB_GetDevSpeed+0x32>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b06      	cmp	r3, #6
 80069f6:	d102      	bne.n	80069fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80069f8:	2302      	movs	r3, #2
 80069fa:	75fb      	strb	r3, [r7, #23]
 80069fc:	e001      	b.n	8006a02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80069fe:	230f      	movs	r3, #15
 8006a00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	371c      	adds	r7, #28
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	785b      	ldrb	r3, [r3, #1]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d13a      	bne.n	8006aa2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a32:	69da      	ldr	r2, [r3, #28]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	f003 030f 	and.w	r3, r3, #15
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	68f9      	ldr	r1, [r7, #12]
 8006a46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d155      	bne.n	8006b10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	791b      	ldrb	r3, [r3, #4]
 8006a7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	059b      	lsls	r3, r3, #22
 8006a86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	0151      	lsls	r1, r2, #5
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	440a      	add	r2, r1
 8006a92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	e036      	b.n	8006b10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aa8:	69da      	ldr	r2, [r3, #28]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	f003 030f 	and.w	r3, r3, #15
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab8:	041b      	lsls	r3, r3, #16
 8006aba:	68f9      	ldr	r1, [r7, #12]
 8006abc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d11a      	bne.n	8006b10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	791b      	ldrb	r3, [r3, #4]
 8006af4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006af6:	430b      	orrs	r3, r1
 8006af8:	4313      	orrs	r3, r2
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	0151      	lsls	r1, r2, #5
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	440a      	add	r2, r1
 8006b02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
	...

08006b20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	785b      	ldrb	r3, [r3, #1]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d161      	bne.n	8006c00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b52:	d11f      	bne.n	8006b94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	0151      	lsls	r1, r2, #5
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	440a      	add	r2, r1
 8006b6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	0151      	lsls	r1, r2, #5
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	440a      	add	r2, r1
 8006b8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	f003 030f 	and.w	r3, r3, #15
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	43db      	mvns	r3, r3
 8006bae:	68f9      	ldr	r1, [r7, #12]
 8006bb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	f003 030f 	and.w	r3, r3, #15
 8006bc8:	2101      	movs	r1, #1
 8006bca:	fa01 f303 	lsl.w	r3, r1, r3
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	43db      	mvns	r3, r3
 8006bd2:	68f9      	ldr	r1, [r7, #12]
 8006bd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bd8:	4013      	ands	r3, r2
 8006bda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	0159      	lsls	r1, r3, #5
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	440b      	add	r3, r1
 8006bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	4b35      	ldr	r3, [pc, #212]	@ (8006cd0 <USB_DeactivateEndpoint+0x1b0>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	600b      	str	r3, [r1, #0]
 8006bfe:	e060      	b.n	8006cc2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c16:	d11f      	bne.n	8006c58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	0151      	lsls	r1, r2, #5
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	440a      	add	r2, r1
 8006c2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	0151      	lsls	r1, r2, #5
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	2101      	movs	r1, #1
 8006c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c6e:	041b      	lsls	r3, r3, #16
 8006c70:	43db      	mvns	r3, r3
 8006c72:	68f9      	ldr	r1, [r7, #12]
 8006c74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c78:	4013      	ands	r3, r2
 8006c7a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	f003 030f 	and.w	r3, r3, #15
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c92:	041b      	lsls	r3, r3, #16
 8006c94:	43db      	mvns	r3, r3
 8006c96:	68f9      	ldr	r1, [r7, #12]
 8006c98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	0159      	lsls	r1, r3, #5
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	440b      	add	r3, r1
 8006cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cba:	4619      	mov	r1, r3
 8006cbc:	4b05      	ldr	r3, [pc, #20]	@ (8006cd4 <USB_DeactivateEndpoint+0x1b4>)
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	ec337800 	.word	0xec337800
 8006cd4:	eff37800 	.word	0xeff37800

08006cd8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08a      	sub	sp, #40	@ 0x28
 8006cdc:	af02      	add	r7, sp, #8
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	785b      	ldrb	r3, [r3, #1]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	f040 817f 	bne.w	8006ff8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d132      	bne.n	8006d68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	0151      	lsls	r1, r2, #5
 8006d14:	69fa      	ldr	r2, [r7, #28]
 8006d16:	440a      	add	r2, r1
 8006d18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d1c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006d20:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006d24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	0151      	lsls	r1, r2, #5
 8006d38:	69fa      	ldr	r2, [r7, #28]
 8006d3a:	440a      	add	r2, r1
 8006d3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	0151      	lsls	r1, r2, #5
 8006d58:	69fa      	ldr	r2, [r7, #28]
 8006d5a:	440a      	add	r2, r1
 8006d5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d60:	0cdb      	lsrs	r3, r3, #19
 8006d62:	04db      	lsls	r3, r3, #19
 8006d64:	6113      	str	r3, [r2, #16]
 8006d66:	e097      	b.n	8006e98 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	0151      	lsls	r1, r2, #5
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	440a      	add	r2, r1
 8006d7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d82:	0cdb      	lsrs	r3, r3, #19
 8006d84:	04db      	lsls	r3, r3, #19
 8006d86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	0151      	lsls	r1, r2, #5
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	440a      	add	r2, r1
 8006d9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006da2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006da6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006daa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d11a      	bne.n	8006de8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	691a      	ldr	r2, [r3, #16]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d903      	bls.n	8006dc6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	0151      	lsls	r1, r2, #5
 8006dd8:	69fa      	ldr	r2, [r7, #28]
 8006dda:	440a      	add	r2, r1
 8006ddc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006de0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006de4:	6113      	str	r3, [r2, #16]
 8006de6:	e044      	b.n	8006e72 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	691a      	ldr	r2, [r3, #16]
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	4413      	add	r3, r2
 8006df2:	1e5a      	subs	r2, r3, #1
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e0a:	691a      	ldr	r2, [r3, #16]
 8006e0c:	8afb      	ldrh	r3, [r7, #22]
 8006e0e:	04d9      	lsls	r1, r3, #19
 8006e10:	4ba4      	ldr	r3, [pc, #656]	@ (80070a4 <USB_EPStartXfer+0x3cc>)
 8006e12:	400b      	ands	r3, r1
 8006e14:	69b9      	ldr	r1, [r7, #24]
 8006e16:	0148      	lsls	r0, r1, #5
 8006e18:	69f9      	ldr	r1, [r7, #28]
 8006e1a:	4401      	add	r1, r0
 8006e1c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006e20:	4313      	orrs	r3, r2
 8006e22:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	791b      	ldrb	r3, [r3, #4]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d122      	bne.n	8006e72 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	0151      	lsls	r1, r2, #5
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	440a      	add	r2, r1
 8006e42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e46:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006e4a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e58:	691a      	ldr	r2, [r3, #16]
 8006e5a:	8afb      	ldrh	r3, [r7, #22]
 8006e5c:	075b      	lsls	r3, r3, #29
 8006e5e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006e62:	69b9      	ldr	r1, [r7, #24]
 8006e64:	0148      	lsls	r0, r1, #5
 8006e66:	69f9      	ldr	r1, [r7, #28]
 8006e68:	4401      	add	r1, r0
 8006e6a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e88:	69b9      	ldr	r1, [r7, #24]
 8006e8a:	0148      	lsls	r0, r1, #5
 8006e8c:	69f9      	ldr	r1, [r7, #28]
 8006e8e:	4401      	add	r1, r0
 8006e90:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006e94:	4313      	orrs	r3, r2
 8006e96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e98:	79fb      	ldrb	r3, [r7, #7]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d14b      	bne.n	8006f36 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d009      	beq.n	8006eba <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	791b      	ldrb	r3, [r3, #4]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d128      	bne.n	8006f14 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d110      	bne.n	8006ef4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	0151      	lsls	r1, r2, #5
 8006ee4:	69fa      	ldr	r2, [r7, #28]
 8006ee6:	440a      	add	r2, r1
 8006ee8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	e00f      	b.n	8006f14 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	0151      	lsls	r1, r2, #5
 8006f06:	69fa      	ldr	r2, [r7, #28]
 8006f08:	440a      	add	r2, r1
 8006f0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f12:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	0151      	lsls	r1, r2, #5
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	440a      	add	r2, r1
 8006f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f2e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	e166      	b.n	8007204 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	0151      	lsls	r1, r2, #5
 8006f48:	69fa      	ldr	r2, [r7, #28]
 8006f4a:	440a      	add	r2, r1
 8006f4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f50:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f54:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	791b      	ldrb	r3, [r3, #4]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d015      	beq.n	8006f8a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 814e 	beq.w	8007204 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	f003 030f 	and.w	r3, r3, #15
 8006f78:	2101      	movs	r1, #1
 8006f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f7e:	69f9      	ldr	r1, [r7, #28]
 8006f80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f84:	4313      	orrs	r3, r2
 8006f86:	634b      	str	r3, [r1, #52]	@ 0x34
 8006f88:	e13c      	b.n	8007204 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d110      	bne.n	8006fbc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	0151      	lsls	r1, r2, #5
 8006fac:	69fa      	ldr	r2, [r7, #28]
 8006fae:	440a      	add	r2, r1
 8006fb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fb4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	e00f      	b.n	8006fdc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	0151      	lsls	r1, r2, #5
 8006fce:	69fa      	ldr	r2, [r7, #28]
 8006fd0:	440a      	add	r2, r1
 8006fd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fda:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	68d9      	ldr	r1, [r3, #12]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	781a      	ldrb	r2, [r3, #0]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	b298      	uxth	r0, r3
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	4603      	mov	r3, r0
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 f9b9 	bl	8007368 <USB_WritePacket>
 8006ff6:	e105      	b.n	8007204 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	0151      	lsls	r1, r2, #5
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	440a      	add	r2, r1
 800700e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007012:	0cdb      	lsrs	r3, r3, #19
 8007014:	04db      	lsls	r3, r3, #19
 8007016:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	440a      	add	r2, r1
 800702e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007032:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007036:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800703a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d132      	bne.n	80070a8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	689a      	ldr	r2, [r3, #8]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	689a      	ldr	r2, [r3, #8]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007066:	691a      	ldr	r2, [r3, #16]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007070:	69b9      	ldr	r1, [r7, #24]
 8007072:	0148      	lsls	r0, r1, #5
 8007074:	69f9      	ldr	r1, [r7, #28]
 8007076:	4401      	add	r1, r0
 8007078:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800707c:	4313      	orrs	r3, r2
 800707e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	69fa      	ldr	r2, [r7, #28]
 8007094:	440a      	add	r2, r1
 8007096:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800709a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800709e:	6113      	str	r3, [r2, #16]
 80070a0:	e062      	b.n	8007168 <USB_EPStartXfer+0x490>
 80070a2:	bf00      	nop
 80070a4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d123      	bne.n	80070f8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070bc:	691a      	ldr	r2, [r3, #16]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070c6:	69b9      	ldr	r1, [r7, #24]
 80070c8:	0148      	lsls	r0, r1, #5
 80070ca:	69f9      	ldr	r1, [r7, #28]
 80070cc:	4401      	add	r1, r0
 80070ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80070d2:	4313      	orrs	r3, r2
 80070d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	0151      	lsls	r1, r2, #5
 80070e8:	69fa      	ldr	r2, [r7, #28]
 80070ea:	440a      	add	r2, r1
 80070ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070f4:	6113      	str	r3, [r2, #16]
 80070f6:	e037      	b.n	8007168 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	691a      	ldr	r2, [r3, #16]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	4413      	add	r3, r2
 8007102:	1e5a      	subs	r2, r3, #1
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	fbb2 f3f3 	udiv	r3, r2, r3
 800710c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	8afa      	ldrh	r2, [r7, #22]
 8007114:	fb03 f202 	mul.w	r2, r3, r2
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007128:	691a      	ldr	r2, [r3, #16]
 800712a:	8afb      	ldrh	r3, [r7, #22]
 800712c:	04d9      	lsls	r1, r3, #19
 800712e:	4b38      	ldr	r3, [pc, #224]	@ (8007210 <USB_EPStartXfer+0x538>)
 8007130:	400b      	ands	r3, r1
 8007132:	69b9      	ldr	r1, [r7, #24]
 8007134:	0148      	lsls	r0, r1, #5
 8007136:	69f9      	ldr	r1, [r7, #28]
 8007138:	4401      	add	r1, r0
 800713a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800713e:	4313      	orrs	r3, r2
 8007140:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800714e:	691a      	ldr	r2, [r3, #16]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007158:	69b9      	ldr	r1, [r7, #24]
 800715a:	0148      	lsls	r0, r1, #5
 800715c:	69f9      	ldr	r1, [r7, #28]
 800715e:	4401      	add	r1, r0
 8007160:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007164:	4313      	orrs	r3, r2
 8007166:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007168:	79fb      	ldrb	r3, [r7, #7]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d10d      	bne.n	800718a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d009      	beq.n	800718a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	68d9      	ldr	r1, [r3, #12]
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007186:	460a      	mov	r2, r1
 8007188:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	791b      	ldrb	r3, [r3, #4]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d128      	bne.n	80071e4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d110      	bne.n	80071c4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	0151      	lsls	r1, r2, #5
 80071b4:	69fa      	ldr	r2, [r7, #28]
 80071b6:	440a      	add	r2, r1
 80071b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80071c0:	6013      	str	r3, [r2, #0]
 80071c2:	e00f      	b.n	80071e4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	0151      	lsls	r1, r2, #5
 80071d6:	69fa      	ldr	r2, [r7, #28]
 80071d8:	440a      	add	r2, r1
 80071da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	0151      	lsls	r1, r2, #5
 80071f6:	69fa      	ldr	r2, [r7, #28]
 80071f8:	440a      	add	r2, r1
 80071fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007202:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3720      	adds	r7, #32
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	1ff80000 	.word	0x1ff80000

08007214 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	785b      	ldrb	r3, [r3, #1]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d14a      	bne.n	80072c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007246:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800724a:	f040 8086 	bne.w	800735a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	7812      	ldrb	r2, [r2, #0]
 8007262:	0151      	lsls	r1, r2, #5
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	440a      	add	r2, r1
 8007268:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800726c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007270:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	7812      	ldrb	r2, [r2, #0]
 8007286:	0151      	lsls	r1, r2, #5
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	440a      	add	r2, r1
 800728c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007290:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007294:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3301      	adds	r3, #1
 800729a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d902      	bls.n	80072ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	75fb      	strb	r3, [r7, #23]
          break;
 80072aa:	e056      	b.n	800735a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072c4:	d0e7      	beq.n	8007296 <USB_EPStopXfer+0x82>
 80072c6:	e048      	b.n	800735a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072e0:	d13b      	bne.n	800735a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	7812      	ldrb	r2, [r2, #0]
 80072f6:	0151      	lsls	r1, r2, #5
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	440a      	add	r2, r1
 80072fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007300:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007304:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	7812      	ldrb	r2, [r2, #0]
 800731a:	0151      	lsls	r1, r2, #5
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	440a      	add	r2, r1
 8007320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007324:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007328:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3301      	adds	r3, #1
 800732e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007336:	4293      	cmp	r3, r2
 8007338:	d902      	bls.n	8007340 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	75fb      	strb	r3, [r7, #23]
          break;
 800733e:	e00c      	b.n	800735a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	4413      	add	r3, r2
 800734a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007354:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007358:	d0e7      	beq.n	800732a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800735a:	7dfb      	ldrb	r3, [r7, #23]
}
 800735c:	4618      	mov	r0, r3
 800735e:	371c      	adds	r7, #28
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007368:	b480      	push	{r7}
 800736a:	b089      	sub	sp, #36	@ 0x24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	4611      	mov	r1, r2
 8007374:	461a      	mov	r2, r3
 8007376:	460b      	mov	r3, r1
 8007378:	71fb      	strb	r3, [r7, #7]
 800737a:	4613      	mov	r3, r2
 800737c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007386:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800738a:	2b00      	cmp	r3, #0
 800738c:	d123      	bne.n	80073d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800738e:	88bb      	ldrh	r3, [r7, #4]
 8007390:	3303      	adds	r3, #3
 8007392:	089b      	lsrs	r3, r3, #2
 8007394:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007396:	2300      	movs	r3, #0
 8007398:	61bb      	str	r3, [r7, #24]
 800739a:	e018      	b.n	80073ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800739c:	79fb      	ldrb	r3, [r7, #7]
 800739e:	031a      	lsls	r2, r3, #12
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073a8:	461a      	mov	r2, r3
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	3301      	adds	r3, #1
 80073b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	3301      	adds	r3, #1
 80073ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	3301      	adds	r3, #1
 80073c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	3301      	adds	r3, #1
 80073c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	3301      	adds	r3, #1
 80073cc:	61bb      	str	r3, [r7, #24]
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d3e2      	bcc.n	800739c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3724      	adds	r7, #36	@ 0x24
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b08b      	sub	sp, #44	@ 0x2c
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	4613      	mov	r3, r2
 80073f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80073fa:	88fb      	ldrh	r3, [r7, #6]
 80073fc:	089b      	lsrs	r3, r3, #2
 80073fe:	b29b      	uxth	r3, r3
 8007400:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007402:	88fb      	ldrh	r3, [r7, #6]
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800740a:	2300      	movs	r3, #0
 800740c:	623b      	str	r3, [r7, #32]
 800740e:	e014      	b.n	800743a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741a:	601a      	str	r2, [r3, #0]
    pDest++;
 800741c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741e:	3301      	adds	r3, #1
 8007420:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007424:	3301      	adds	r3, #1
 8007426:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742a:	3301      	adds	r3, #1
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	3301      	adds	r3, #1
 8007432:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	3301      	adds	r3, #1
 8007438:	623b      	str	r3, [r7, #32]
 800743a:	6a3a      	ldr	r2, [r7, #32]
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	429a      	cmp	r2, r3
 8007440:	d3e6      	bcc.n	8007410 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007442:	8bfb      	ldrh	r3, [r7, #30]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d01e      	beq.n	8007486 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007452:	461a      	mov	r2, r3
 8007454:	f107 0310 	add.w	r3, r7, #16
 8007458:	6812      	ldr	r2, [r2, #0]
 800745a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	b2db      	uxtb	r3, r3
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	fa22 f303 	lsr.w	r3, r2, r3
 8007468:	b2da      	uxtb	r2, r3
 800746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746c:	701a      	strb	r2, [r3, #0]
      i++;
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	3301      	adds	r3, #1
 8007472:	623b      	str	r3, [r7, #32]
      pDest++;
 8007474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007476:	3301      	adds	r3, #1
 8007478:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800747a:	8bfb      	ldrh	r3, [r7, #30]
 800747c:	3b01      	subs	r3, #1
 800747e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007480:	8bfb      	ldrh	r3, [r7, #30]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1ea      	bne.n	800745c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007488:	4618      	mov	r0, r3
 800748a:	372c      	adds	r7, #44	@ 0x2c
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	785b      	ldrb	r3, [r3, #1]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d12c      	bne.n	800750a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	db12      	blt.n	80074e8 <USB_EPSetStall+0x54>
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00f      	beq.n	80074e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	0151      	lsls	r1, r2, #5
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	440a      	add	r2, r1
 80074de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80074e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007502:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	e02b      	b.n	8007562 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	db12      	blt.n	8007542 <USB_EPSetStall+0xae>
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00f      	beq.n	8007542 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	0151      	lsls	r1, r2, #5
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	440a      	add	r2, r1
 8007538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800753c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007540:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	0151      	lsls	r1, r2, #5
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	440a      	add	r2, r1
 8007558:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800755c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007560:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	785b      	ldrb	r3, [r3, #1]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d128      	bne.n	80075de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	0151      	lsls	r1, r2, #5
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	440a      	add	r2, r1
 80075a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80075aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	791b      	ldrb	r3, [r3, #4]
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d003      	beq.n	80075bc <USB_EPClearStall+0x4c>
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	791b      	ldrb	r3, [r3, #4]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d138      	bne.n	800762e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	0151      	lsls	r1, r2, #5
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	440a      	add	r2, r1
 80075d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075da:	6013      	str	r3, [r2, #0]
 80075dc:	e027      	b.n	800762e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	015a      	lsls	r2, r3, #5
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	0151      	lsls	r1, r2, #5
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	440a      	add	r2, r1
 80075f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80075fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	791b      	ldrb	r3, [r3, #4]
 8007602:	2b03      	cmp	r3, #3
 8007604:	d003      	beq.n	800760e <USB_EPClearStall+0x9e>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	791b      	ldrb	r3, [r3, #4]
 800760a:	2b02      	cmp	r3, #2
 800760c:	d10f      	bne.n	800762e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	0151      	lsls	r1, r2, #5
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	440a      	add	r2, r1
 8007624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800762c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800765a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800765e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	78fb      	ldrb	r3, [r7, #3]
 800766a:	011b      	lsls	r3, r3, #4
 800766c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007670:	68f9      	ldr	r1, [r7, #12]
 8007672:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007676:	4313      	orrs	r3, r2
 8007678:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80076a2:	f023 0303 	bic.w	r3, r3, #3
 80076a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076b6:	f023 0302 	bic.w	r3, r3, #2
 80076ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b085      	sub	sp, #20
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80076e4:	f023 0303 	bic.w	r3, r3, #3
 80076e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076f8:	f043 0302 	orr.w	r3, r3, #2
 80076fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	4013      	ands	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007724:	68fb      	ldr	r3, [r7, #12]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007732:	b480      	push	{r7}
 8007734:	b085      	sub	sp, #20
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	4013      	ands	r3, r2
 8007754:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	0c1b      	lsrs	r3, r3, #16
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007766:	b480      	push	{r7}
 8007768:	b085      	sub	sp, #20
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	4013      	ands	r3, r2
 8007788:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	b29b      	uxth	r3, r3
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800779a:	b480      	push	{r7}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	460b      	mov	r3, r1
 80077a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80077aa:	78fb      	ldrb	r3, [r7, #3]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	4013      	ands	r3, r2
 80077c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077c8:	68bb      	ldr	r3, [r7, #8]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b087      	sub	sp, #28
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	460b      	mov	r3, r1
 80077e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	f003 030f 	and.w	r3, r3, #15
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	fa22 f303 	lsr.w	r3, r2, r3
 8007806:	01db      	lsls	r3, r3, #7
 8007808:	b2db      	uxtb	r3, r3
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	4313      	orrs	r3, r2
 800780e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	4013      	ands	r3, r2
 8007822:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007824:	68bb      	ldr	r3, [r7, #8]
}
 8007826:	4618      	mov	r0, r3
 8007828:	371c      	adds	r7, #28
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007832:	b480      	push	{r7}
 8007834:	b083      	sub	sp, #12
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	f003 0301 	and.w	r3, r3, #1
}
 8007842:	4618      	mov	r0, r3
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800784e:	b480      	push	{r7}
 8007850:	b085      	sub	sp, #20
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007868:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800786c:	f023 0307 	bic.w	r3, r3, #7
 8007870:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007884:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	460b      	mov	r3, r1
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	333c      	adds	r3, #60	@ 0x3c
 80078aa:	3304      	adds	r3, #4
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	4a26      	ldr	r2, [pc, #152]	@ (800794c <USB_EP0_OutStart+0xb8>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d90a      	bls.n	80078ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078c8:	d101      	bne.n	80078ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	e037      	b.n	800793e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d4:	461a      	mov	r2, r3
 80078d6:	2300      	movs	r3, #0
 80078d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078fc:	f043 0318 	orr.w	r3, r3, #24
 8007900:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007910:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007914:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007916:	7afb      	ldrb	r3, [r7, #11]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d10f      	bne.n	800793c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007936:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800793a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	4f54300a 	.word	0x4f54300a

08007950 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3301      	adds	r3, #1
 8007960:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007968:	d901      	bls.n	800796e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e01b      	b.n	80079a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	2b00      	cmp	r3, #0
 8007974:	daf2      	bge.n	800795c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	f043 0201 	orr.w	r2, r3, #1
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3301      	adds	r3, #1
 800798a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007992:	d901      	bls.n	8007998 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e006      	b.n	80079a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d0f0      	beq.n	8007986 <USB_CoreReset+0x36>

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
	...

080079b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80079c0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80079c4:	f002 fccc 	bl	800a360 <USBD_static_malloc>
 80079c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d109      	bne.n	80079e4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	32b0      	adds	r2, #176	@ 0xb0
 80079da:	2100      	movs	r1, #0
 80079dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80079e0:	2302      	movs	r3, #2
 80079e2:	e0d4      	b.n	8007b8e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80079e4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80079e8:	2100      	movs	r1, #0
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f002 fcfc 	bl	800a3e8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	32b0      	adds	r2, #176	@ 0xb0
 80079fa:	68f9      	ldr	r1, [r7, #12]
 80079fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	32b0      	adds	r2, #176	@ 0xb0
 8007a0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	7c1b      	ldrb	r3, [r3, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d138      	bne.n	8007a8e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a1c:	4b5e      	ldr	r3, [pc, #376]	@ (8007b98 <USBD_CDC_Init+0x1e4>)
 8007a1e:	7819      	ldrb	r1, [r3, #0]
 8007a20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a24:	2202      	movs	r2, #2
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f002 fb77 	bl	800a11a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a2c:	4b5a      	ldr	r3, [pc, #360]	@ (8007b98 <USBD_CDC_Init+0x1e4>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	f003 020f 	and.w	r2, r3, #15
 8007a34:	6879      	ldr	r1, [r7, #4]
 8007a36:	4613      	mov	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	440b      	add	r3, r1
 8007a40:	3324      	adds	r3, #36	@ 0x24
 8007a42:	2201      	movs	r2, #1
 8007a44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a46:	4b55      	ldr	r3, [pc, #340]	@ (8007b9c <USBD_CDC_Init+0x1e8>)
 8007a48:	7819      	ldrb	r1, [r3, #0]
 8007a4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a4e:	2202      	movs	r2, #2
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f002 fb62 	bl	800a11a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a56:	4b51      	ldr	r3, [pc, #324]	@ (8007b9c <USBD_CDC_Init+0x1e8>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	f003 020f 	and.w	r2, r3, #15
 8007a5e:	6879      	ldr	r1, [r7, #4]
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	440b      	add	r3, r1
 8007a6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a6e:	2201      	movs	r2, #1
 8007a70:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007a72:	4b4b      	ldr	r3, [pc, #300]	@ (8007ba0 <USBD_CDC_Init+0x1ec>)
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	f003 020f 	and.w	r2, r3, #15
 8007a7a:	6879      	ldr	r1, [r7, #4]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	440b      	add	r3, r1
 8007a86:	3326      	adds	r3, #38	@ 0x26
 8007a88:	2210      	movs	r2, #16
 8007a8a:	801a      	strh	r2, [r3, #0]
 8007a8c:	e035      	b.n	8007afa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a8e:	4b42      	ldr	r3, [pc, #264]	@ (8007b98 <USBD_CDC_Init+0x1e4>)
 8007a90:	7819      	ldrb	r1, [r3, #0]
 8007a92:	2340      	movs	r3, #64	@ 0x40
 8007a94:	2202      	movs	r2, #2
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f002 fb3f 	bl	800a11a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a9c:	4b3e      	ldr	r3, [pc, #248]	@ (8007b98 <USBD_CDC_Init+0x1e4>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	f003 020f 	and.w	r2, r3, #15
 8007aa4:	6879      	ldr	r1, [r7, #4]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	440b      	add	r3, r1
 8007ab0:	3324      	adds	r3, #36	@ 0x24
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007ab6:	4b39      	ldr	r3, [pc, #228]	@ (8007b9c <USBD_CDC_Init+0x1e8>)
 8007ab8:	7819      	ldrb	r1, [r3, #0]
 8007aba:	2340      	movs	r3, #64	@ 0x40
 8007abc:	2202      	movs	r2, #2
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f002 fb2b 	bl	800a11a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007ac4:	4b35      	ldr	r3, [pc, #212]	@ (8007b9c <USBD_CDC_Init+0x1e8>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	f003 020f 	and.w	r2, r3, #15
 8007acc:	6879      	ldr	r1, [r7, #4]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	440b      	add	r3, r1
 8007ad8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007adc:	2201      	movs	r2, #1
 8007ade:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8007ba0 <USBD_CDC_Init+0x1ec>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	f003 020f 	and.w	r2, r3, #15
 8007ae8:	6879      	ldr	r1, [r7, #4]
 8007aea:	4613      	mov	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	440b      	add	r3, r1
 8007af4:	3326      	adds	r3, #38	@ 0x26
 8007af6:	2210      	movs	r2, #16
 8007af8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007afa:	4b29      	ldr	r3, [pc, #164]	@ (8007ba0 <USBD_CDC_Init+0x1ec>)
 8007afc:	7819      	ldrb	r1, [r3, #0]
 8007afe:	2308      	movs	r3, #8
 8007b00:	2203      	movs	r2, #3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f002 fb09 	bl	800a11a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007b08:	4b25      	ldr	r3, [pc, #148]	@ (8007ba0 <USBD_CDC_Init+0x1ec>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	f003 020f 	and.w	r2, r3, #15
 8007b10:	6879      	ldr	r1, [r7, #4]
 8007b12:	4613      	mov	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	440b      	add	r3, r1
 8007b1c:	3324      	adds	r3, #36	@ 0x24
 8007b1e:	2201      	movs	r2, #1
 8007b20:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	33b0      	adds	r3, #176	@ 0xb0
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	e018      	b.n	8007b8e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	7c1b      	ldrb	r3, [r3, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10a      	bne.n	8007b7a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b64:	4b0d      	ldr	r3, [pc, #52]	@ (8007b9c <USBD_CDC_Init+0x1e8>)
 8007b66:	7819      	ldrb	r1, [r3, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f002 fbc0 	bl	800a2f8 <USBD_LL_PrepareReceive>
 8007b78:	e008      	b.n	8007b8c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b7a:	4b08      	ldr	r3, [pc, #32]	@ (8007b9c <USBD_CDC_Init+0x1e8>)
 8007b7c:	7819      	ldrb	r1, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b84:	2340      	movs	r3, #64	@ 0x40
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f002 fbb6 	bl	800a2f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	200000b7 	.word	0x200000b7
 8007b9c:	200000b8 	.word	0x200000b8
 8007ba0:	200000b9 	.word	0x200000b9

08007ba4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007bb0:	4b3a      	ldr	r3, [pc, #232]	@ (8007c9c <USBD_CDC_DeInit+0xf8>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f002 fad5 	bl	800a166 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007bbc:	4b37      	ldr	r3, [pc, #220]	@ (8007c9c <USBD_CDC_DeInit+0xf8>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	f003 020f 	and.w	r2, r3, #15
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	440b      	add	r3, r1
 8007bd0:	3324      	adds	r3, #36	@ 0x24
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007bd6:	4b32      	ldr	r3, [pc, #200]	@ (8007ca0 <USBD_CDC_DeInit+0xfc>)
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f002 fac2 	bl	800a166 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007be2:	4b2f      	ldr	r3, [pc, #188]	@ (8007ca0 <USBD_CDC_DeInit+0xfc>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	f003 020f 	and.w	r2, r3, #15
 8007bea:	6879      	ldr	r1, [r7, #4]
 8007bec:	4613      	mov	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	440b      	add	r3, r1
 8007bf6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007bfe:	4b29      	ldr	r3, [pc, #164]	@ (8007ca4 <USBD_CDC_DeInit+0x100>)
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	4619      	mov	r1, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f002 faae 	bl	800a166 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007c0a:	4b26      	ldr	r3, [pc, #152]	@ (8007ca4 <USBD_CDC_DeInit+0x100>)
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	f003 020f 	and.w	r2, r3, #15
 8007c12:	6879      	ldr	r1, [r7, #4]
 8007c14:	4613      	mov	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	440b      	add	r3, r1
 8007c1e:	3324      	adds	r3, #36	@ 0x24
 8007c20:	2200      	movs	r2, #0
 8007c22:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007c24:	4b1f      	ldr	r3, [pc, #124]	@ (8007ca4 <USBD_CDC_DeInit+0x100>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	f003 020f 	and.w	r2, r3, #15
 8007c2c:	6879      	ldr	r1, [r7, #4]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	440b      	add	r3, r1
 8007c38:	3326      	adds	r3, #38	@ 0x26
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	32b0      	adds	r2, #176	@ 0xb0
 8007c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d01f      	beq.n	8007c90 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	33b0      	adds	r3, #176	@ 0xb0
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4413      	add	r3, r2
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	32b0      	adds	r2, #176	@ 0xb0
 8007c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f002 fb82 	bl	800a37c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	32b0      	adds	r2, #176	@ 0xb0
 8007c82:	2100      	movs	r1, #0
 8007c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	200000b7 	.word	0x200000b7
 8007ca0:	200000b8 	.word	0x200000b8
 8007ca4:	200000b9 	.word	0x200000b9

08007ca8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	32b0      	adds	r2, #176	@ 0xb0
 8007cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e0bf      	b.n	8007e58 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d050      	beq.n	8007d86 <USBD_CDC_Setup+0xde>
 8007ce4:	2b20      	cmp	r3, #32
 8007ce6:	f040 80af 	bne.w	8007e48 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	88db      	ldrh	r3, [r3, #6]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d03a      	beq.n	8007d68 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	b25b      	sxtb	r3, r3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	da1b      	bge.n	8007d34 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	33b0      	adds	r3, #176	@ 0xb0
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007d12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	88d2      	ldrh	r2, [r2, #6]
 8007d18:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	88db      	ldrh	r3, [r3, #6]
 8007d1e:	2b07      	cmp	r3, #7
 8007d20:	bf28      	it	cs
 8007d22:	2307      	movcs	r3, #7
 8007d24:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	89fa      	ldrh	r2, [r7, #14]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 fd93 	bl	8009858 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007d32:	e090      	b.n	8007e56 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	785a      	ldrb	r2, [r3, #1]
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	88db      	ldrh	r3, [r3, #6]
 8007d42:	2b3f      	cmp	r3, #63	@ 0x3f
 8007d44:	d803      	bhi.n	8007d4e <USBD_CDC_Setup+0xa6>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	88db      	ldrh	r3, [r3, #6]
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	e000      	b.n	8007d50 <USBD_CDC_Setup+0xa8>
 8007d4e:	2240      	movs	r2, #64	@ 0x40
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007d56:	6939      	ldr	r1, [r7, #16]
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007d5e:	461a      	mov	r2, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 fda5 	bl	80098b0 <USBD_CtlPrepareRx>
      break;
 8007d66:	e076      	b.n	8007e56 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	33b0      	adds	r3, #176	@ 0xb0
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	7850      	ldrb	r0, [r2, #1]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	4798      	blx	r3
      break;
 8007d84:	e067      	b.n	8007e56 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	785b      	ldrb	r3, [r3, #1]
 8007d8a:	2b0b      	cmp	r3, #11
 8007d8c:	d851      	bhi.n	8007e32 <USBD_CDC_Setup+0x18a>
 8007d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d94 <USBD_CDC_Setup+0xec>)
 8007d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d94:	08007dc5 	.word	0x08007dc5
 8007d98:	08007e41 	.word	0x08007e41
 8007d9c:	08007e33 	.word	0x08007e33
 8007da0:	08007e33 	.word	0x08007e33
 8007da4:	08007e33 	.word	0x08007e33
 8007da8:	08007e33 	.word	0x08007e33
 8007dac:	08007e33 	.word	0x08007e33
 8007db0:	08007e33 	.word	0x08007e33
 8007db4:	08007e33 	.word	0x08007e33
 8007db8:	08007e33 	.word	0x08007e33
 8007dbc:	08007def 	.word	0x08007def
 8007dc0:	08007e19 	.word	0x08007e19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d107      	bne.n	8007de0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007dd0:	f107 030a 	add.w	r3, r7, #10
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f001 fd3d 	bl	8009858 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dde:	e032      	b.n	8007e46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f001 fcbb 	bl	800975e <USBD_CtlError>
            ret = USBD_FAIL;
 8007de8:	2303      	movs	r3, #3
 8007dea:	75fb      	strb	r3, [r7, #23]
          break;
 8007dec:	e02b      	b.n	8007e46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d107      	bne.n	8007e0a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007dfa:	f107 030d 	add.w	r3, r7, #13
 8007dfe:	2201      	movs	r2, #1
 8007e00:	4619      	mov	r1, r3
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f001 fd28 	bl	8009858 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e08:	e01d      	b.n	8007e46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 fca6 	bl	800975e <USBD_CtlError>
            ret = USBD_FAIL;
 8007e12:	2303      	movs	r3, #3
 8007e14:	75fb      	strb	r3, [r7, #23]
          break;
 8007e16:	e016      	b.n	8007e46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d00f      	beq.n	8007e44 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 fc99 	bl	800975e <USBD_CtlError>
            ret = USBD_FAIL;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e30:	e008      	b.n	8007e44 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f001 fc92 	bl	800975e <USBD_CtlError>
          ret = USBD_FAIL;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e3e:	e002      	b.n	8007e46 <USBD_CDC_Setup+0x19e>
          break;
 8007e40:	bf00      	nop
 8007e42:	e008      	b.n	8007e56 <USBD_CDC_Setup+0x1ae>
          break;
 8007e44:	bf00      	nop
      }
      break;
 8007e46:	e006      	b.n	8007e56 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f001 fc87 	bl	800975e <USBD_CtlError>
      ret = USBD_FAIL;
 8007e50:	2303      	movs	r3, #3
 8007e52:	75fb      	strb	r3, [r7, #23]
      break;
 8007e54:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3718      	adds	r7, #24
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	32b0      	adds	r2, #176	@ 0xb0
 8007e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e065      	b.n	8007f56 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	32b0      	adds	r2, #176	@ 0xb0
 8007e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007e9a:	78fb      	ldrb	r3, [r7, #3]
 8007e9c:	f003 020f 	and.w	r2, r3, #15
 8007ea0:	6879      	ldr	r1, [r7, #4]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	440b      	add	r3, r1
 8007eac:	3318      	adds	r3, #24
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d02f      	beq.n	8007f14 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007eb4:	78fb      	ldrb	r3, [r7, #3]
 8007eb6:	f003 020f 	and.w	r2, r3, #15
 8007eba:	6879      	ldr	r1, [r7, #4]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	440b      	add	r3, r1
 8007ec6:	3318      	adds	r3, #24
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	78fb      	ldrb	r3, [r7, #3]
 8007ecc:	f003 010f 	and.w	r1, r3, #15
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	00db      	lsls	r3, r3, #3
 8007ed6:	440b      	add	r3, r1
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4403      	add	r3, r0
 8007edc:	331c      	adds	r3, #28
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ee4:	fb01 f303 	mul.w	r3, r1, r3
 8007ee8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d112      	bne.n	8007f14 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007eee:	78fb      	ldrb	r3, [r7, #3]
 8007ef0:	f003 020f 	and.w	r2, r3, #15
 8007ef4:	6879      	ldr	r1, [r7, #4]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	440b      	add	r3, r1
 8007f00:	3318      	adds	r3, #24
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f06:	78f9      	ldrb	r1, [r7, #3]
 8007f08:	2300      	movs	r3, #0
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f002 f9d2 	bl	800a2b6 <USBD_LL_Transmit>
 8007f12:	e01f      	b.n	8007f54 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	33b0      	adds	r3, #176	@ 0xb0
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d010      	beq.n	8007f54 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	33b0      	adds	r3, #176	@ 0xb0
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007f50:	78fa      	ldrb	r2, [r7, #3]
 8007f52:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	460b      	mov	r3, r1
 8007f68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	32b0      	adds	r2, #176	@ 0xb0
 8007f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	32b0      	adds	r2, #176	@ 0xb0
 8007f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d101      	bne.n	8007f90 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e01a      	b.n	8007fc6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f90:	78fb      	ldrb	r3, [r7, #3]
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f002 f9d0 	bl	800a33a <USBD_LL_GetRxDataSize>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	33b0      	adds	r3, #176	@ 0xb0
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b084      	sub	sp, #16
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	32b0      	adds	r2, #176	@ 0xb0
 8007fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e024      	b.n	800803a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	33b0      	adds	r3, #176	@ 0xb0
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d019      	beq.n	8008038 <USBD_CDC_EP0_RxReady+0x6a>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800800a:	2bff      	cmp	r3, #255	@ 0xff
 800800c:	d014      	beq.n	8008038 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	33b0      	adds	r3, #176	@ 0xb0
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008026:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800802e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	22ff      	movs	r2, #255	@ 0xff
 8008034:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800804c:	2182      	movs	r1, #130	@ 0x82
 800804e:	4818      	ldr	r0, [pc, #96]	@ (80080b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008050:	f000 fd4f 	bl	8008af2 <USBD_GetEpDesc>
 8008054:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008056:	2101      	movs	r1, #1
 8008058:	4815      	ldr	r0, [pc, #84]	@ (80080b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800805a:	f000 fd4a 	bl	8008af2 <USBD_GetEpDesc>
 800805e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008060:	2181      	movs	r1, #129	@ 0x81
 8008062:	4813      	ldr	r0, [pc, #76]	@ (80080b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008064:	f000 fd45 	bl	8008af2 <USBD_GetEpDesc>
 8008068:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2210      	movs	r2, #16
 8008074:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d006      	beq.n	800808a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	2200      	movs	r2, #0
 8008080:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008084:	711a      	strb	r2, [r3, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d006      	beq.n	800809e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008098:	711a      	strb	r2, [r3, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2243      	movs	r2, #67	@ 0x43
 80080a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80080a4:	4b02      	ldr	r3, [pc, #8]	@ (80080b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3718      	adds	r7, #24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20000074 	.word	0x20000074

080080b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080bc:	2182      	movs	r1, #130	@ 0x82
 80080be:	4818      	ldr	r0, [pc, #96]	@ (8008120 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80080c0:	f000 fd17 	bl	8008af2 <USBD_GetEpDesc>
 80080c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080c6:	2101      	movs	r1, #1
 80080c8:	4815      	ldr	r0, [pc, #84]	@ (8008120 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80080ca:	f000 fd12 	bl	8008af2 <USBD_GetEpDesc>
 80080ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80080d0:	2181      	movs	r1, #129	@ 0x81
 80080d2:	4813      	ldr	r0, [pc, #76]	@ (8008120 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80080d4:	f000 fd0d 	bl	8008af2 <USBD_GetEpDesc>
 80080d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	2210      	movs	r2, #16
 80080e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d006      	beq.n	80080fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	2200      	movs	r2, #0
 80080f0:	711a      	strb	r2, [r3, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f042 0202 	orr.w	r2, r2, #2
 80080f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d006      	beq.n	800810e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	711a      	strb	r2, [r3, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f042 0202 	orr.w	r2, r2, #2
 800810c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2243      	movs	r2, #67	@ 0x43
 8008112:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008114:	4b02      	ldr	r3, [pc, #8]	@ (8008120 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	20000074 	.word	0x20000074

08008124 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800812c:	2182      	movs	r1, #130	@ 0x82
 800812e:	4818      	ldr	r0, [pc, #96]	@ (8008190 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008130:	f000 fcdf 	bl	8008af2 <USBD_GetEpDesc>
 8008134:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008136:	2101      	movs	r1, #1
 8008138:	4815      	ldr	r0, [pc, #84]	@ (8008190 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800813a:	f000 fcda 	bl	8008af2 <USBD_GetEpDesc>
 800813e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008140:	2181      	movs	r1, #129	@ 0x81
 8008142:	4813      	ldr	r0, [pc, #76]	@ (8008190 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008144:	f000 fcd5 	bl	8008af2 <USBD_GetEpDesc>
 8008148:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2210      	movs	r2, #16
 8008154:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d006      	beq.n	800816a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	2200      	movs	r2, #0
 8008160:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008164:	711a      	strb	r2, [r3, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d006      	beq.n	800817e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008178:	711a      	strb	r2, [r3, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2243      	movs	r2, #67	@ 0x43
 8008182:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008184:	4b02      	ldr	r3, [pc, #8]	@ (8008190 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008186:	4618      	mov	r0, r3
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	20000074 	.word	0x20000074

08008194 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	220a      	movs	r2, #10
 80081a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80081a2:	4b03      	ldr	r3, [pc, #12]	@ (80081b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	20000030 	.word	0x20000030

080081b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e009      	b.n	80081dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	33b0      	adds	r3, #176	@ 0xb0
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	32b0      	adds	r2, #176	@ 0xb0
 80081fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008202:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800820a:	2303      	movs	r3, #3
 800820c:	e008      	b.n	8008220 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	371c      	adds	r7, #28
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	32b0      	adds	r2, #176	@ 0xb0
 8008240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008244:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d101      	bne.n	8008250 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800824c:	2303      	movs	r3, #3
 800824e:	e004      	b.n	800825a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
	...

08008268 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	32b0      	adds	r2, #176	@ 0xb0
 800827a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008280:	2301      	movs	r3, #1
 8008282:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800828a:	2303      	movs	r3, #3
 800828c:	e025      	b.n	80082da <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008294:	2b00      	cmp	r3, #0
 8008296:	d11f      	bne.n	80082d8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	2201      	movs	r2, #1
 800829c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80082a0:	4b10      	ldr	r3, [pc, #64]	@ (80082e4 <USBD_CDC_TransmitPacket+0x7c>)
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	f003 020f 	and.w	r2, r3, #15
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	4613      	mov	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4403      	add	r3, r0
 80082ba:	3318      	adds	r3, #24
 80082bc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80082be:	4b09      	ldr	r3, [pc, #36]	@ (80082e4 <USBD_CDC_TransmitPacket+0x7c>)
 80082c0:	7819      	ldrb	r1, [r3, #0]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f001 fff1 	bl	800a2b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	200000b7 	.word	0x200000b7

080082e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	32b0      	adds	r2, #176	@ 0xb0
 80082fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	32b0      	adds	r2, #176	@ 0xb0
 800830a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008312:	2303      	movs	r3, #3
 8008314:	e018      	b.n	8008348 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	7c1b      	ldrb	r3, [r3, #16]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10a      	bne.n	8008334 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800831e:	4b0c      	ldr	r3, [pc, #48]	@ (8008350 <USBD_CDC_ReceivePacket+0x68>)
 8008320:	7819      	ldrb	r1, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008328:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f001 ffe3 	bl	800a2f8 <USBD_LL_PrepareReceive>
 8008332:	e008      	b.n	8008346 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008334:	4b06      	ldr	r3, [pc, #24]	@ (8008350 <USBD_CDC_ReceivePacket+0x68>)
 8008336:	7819      	ldrb	r1, [r3, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800833e:	2340      	movs	r3, #64	@ 0x40
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f001 ffd9 	bl	800a2f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	200000b8 	.word	0x200000b8

08008354 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	4613      	mov	r3, r2
 8008360:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008368:	2303      	movs	r3, #3
 800836a:	e01f      	b.n	80083ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	79fa      	ldrb	r2, [r7, #7]
 800839e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f001 fe53 	bl	800a04c <USBD_LL_Init>
 80083a6:	4603      	mov	r3, r0
 80083a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083be:	2300      	movs	r3, #0
 80083c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d101      	bne.n	80083cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e025      	b.n	8008418 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	32ae      	adds	r2, #174	@ 0xae
 80083de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00f      	beq.n	8008408 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	32ae      	adds	r2, #174	@ 0xae
 80083f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f8:	f107 020e 	add.w	r2, r7, #14
 80083fc:	4610      	mov	r0, r2
 80083fe:	4798      	blx	r3
 8008400:	4602      	mov	r2, r0
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f001 fe5b 	bl	800a0e4 <USBD_LL_Start>
 800842e:	4603      	mov	r3, r0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008440:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008442:	4618      	mov	r0, r3
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	460b      	mov	r3, r1
 8008458:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008464:	2b00      	cmp	r3, #0
 8008466:	d009      	beq.n	800847c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	78fa      	ldrb	r2, [r7, #3]
 8008472:	4611      	mov	r1, r2
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	4798      	blx	r3
 8008478:	4603      	mov	r3, r0
 800847a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800847c:	7bfb      	ldrb	r3, [r7, #15]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b084      	sub	sp, #16
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	460b      	mov	r3, r1
 8008490:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	78fa      	ldrb	r2, [r7, #3]
 80084a0:	4611      	mov	r1, r2
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	4798      	blx	r3
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80084ac:	2303      	movs	r3, #3
 80084ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f001 f90c 	bl	80096ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80084e0:	461a      	mov	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80084ee:	f003 031f 	and.w	r3, r3, #31
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d01a      	beq.n	800852c <USBD_LL_SetupStage+0x72>
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d822      	bhi.n	8008540 <USBD_LL_SetupStage+0x86>
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d002      	beq.n	8008504 <USBD_LL_SetupStage+0x4a>
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d00a      	beq.n	8008518 <USBD_LL_SetupStage+0x5e>
 8008502:	e01d      	b.n	8008540 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fb63 	bl	8008bd8 <USBD_StdDevReq>
 8008512:	4603      	mov	r3, r0
 8008514:	73fb      	strb	r3, [r7, #15]
      break;
 8008516:	e020      	b.n	800855a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fbcb 	bl	8008cbc <USBD_StdItfReq>
 8008526:	4603      	mov	r3, r0
 8008528:	73fb      	strb	r3, [r7, #15]
      break;
 800852a:	e016      	b.n	800855a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fc2d 	bl	8008d94 <USBD_StdEPReq>
 800853a:	4603      	mov	r3, r0
 800853c:	73fb      	strb	r3, [r7, #15]
      break;
 800853e:	e00c      	b.n	800855a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008546:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800854a:	b2db      	uxtb	r3, r3
 800854c:	4619      	mov	r1, r3
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f001 fe28 	bl	800a1a4 <USBD_LL_StallEP>
 8008554:	4603      	mov	r3, r0
 8008556:	73fb      	strb	r3, [r7, #15]
      break;
 8008558:	bf00      	nop
  }

  return ret;
 800855a:	7bfb      	ldrb	r3, [r7, #15]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	460b      	mov	r3, r1
 800856e:	607a      	str	r2, [r7, #4]
 8008570:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008576:	7afb      	ldrb	r3, [r7, #11]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d16e      	bne.n	800865a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008582:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800858a:	2b03      	cmp	r3, #3
 800858c:	f040 8098 	bne.w	80086c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	429a      	cmp	r2, r3
 800859a:	d913      	bls.n	80085c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	689a      	ldr	r2, [r3, #8]
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	1ad2      	subs	r2, r2, r3
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	4293      	cmp	r3, r2
 80085b4:	bf28      	it	cs
 80085b6:	4613      	movcs	r3, r2
 80085b8:	461a      	mov	r2, r3
 80085ba:	6879      	ldr	r1, [r7, #4]
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f001 f994 	bl	80098ea <USBD_CtlContinueRx>
 80085c2:	e07d      	b.n	80086c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80085ca:	f003 031f 	and.w	r3, r3, #31
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d014      	beq.n	80085fc <USBD_LL_DataOutStage+0x98>
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d81d      	bhi.n	8008612 <USBD_LL_DataOutStage+0xae>
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d002      	beq.n	80085e0 <USBD_LL_DataOutStage+0x7c>
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d003      	beq.n	80085e6 <USBD_LL_DataOutStage+0x82>
 80085de:	e018      	b.n	8008612 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80085e0:	2300      	movs	r3, #0
 80085e2:	75bb      	strb	r3, [r7, #22]
            break;
 80085e4:	e018      	b.n	8008618 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	4619      	mov	r1, r3
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 fa64 	bl	8008abe <USBD_CoreFindIF>
 80085f6:	4603      	mov	r3, r0
 80085f8:	75bb      	strb	r3, [r7, #22]
            break;
 80085fa:	e00d      	b.n	8008618 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008602:	b2db      	uxtb	r3, r3
 8008604:	4619      	mov	r1, r3
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f000 fa66 	bl	8008ad8 <USBD_CoreFindEP>
 800860c:	4603      	mov	r3, r0
 800860e:	75bb      	strb	r3, [r7, #22]
            break;
 8008610:	e002      	b.n	8008618 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008612:	2300      	movs	r3, #0
 8008614:	75bb      	strb	r3, [r7, #22]
            break;
 8008616:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008618:	7dbb      	ldrb	r3, [r7, #22]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d119      	bne.n	8008652 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b03      	cmp	r3, #3
 8008628:	d113      	bne.n	8008652 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800862a:	7dba      	ldrb	r2, [r7, #22]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	32ae      	adds	r2, #174	@ 0xae
 8008630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00b      	beq.n	8008652 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800863a:	7dba      	ldrb	r2, [r7, #22]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008642:	7dba      	ldrb	r2, [r7, #22]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	32ae      	adds	r2, #174	@ 0xae
 8008648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f001 f95a 	bl	800990c <USBD_CtlSendStatus>
 8008658:	e032      	b.n	80086c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800865a:	7afb      	ldrb	r3, [r7, #11]
 800865c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008660:	b2db      	uxtb	r3, r3
 8008662:	4619      	mov	r1, r3
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 fa37 	bl	8008ad8 <USBD_CoreFindEP>
 800866a:	4603      	mov	r3, r0
 800866c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800866e:	7dbb      	ldrb	r3, [r7, #22]
 8008670:	2bff      	cmp	r3, #255	@ 0xff
 8008672:	d025      	beq.n	80086c0 <USBD_LL_DataOutStage+0x15c>
 8008674:	7dbb      	ldrb	r3, [r7, #22]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d122      	bne.n	80086c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b03      	cmp	r3, #3
 8008684:	d117      	bne.n	80086b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008686:	7dba      	ldrb	r2, [r7, #22]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	32ae      	adds	r2, #174	@ 0xae
 800868c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00f      	beq.n	80086b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008696:	7dba      	ldrb	r2, [r7, #22]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800869e:	7dba      	ldrb	r2, [r7, #22]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	32ae      	adds	r2, #174	@ 0xae
 80086a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	7afa      	ldrb	r2, [r7, #11]
 80086ac:	4611      	mov	r1, r2
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	4798      	blx	r3
 80086b2:	4603      	mov	r3, r0
 80086b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80086bc:	7dfb      	ldrb	r3, [r7, #23]
 80086be:	e000      	b.n	80086c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3718      	adds	r7, #24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b086      	sub	sp, #24
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	60f8      	str	r0, [r7, #12]
 80086d2:	460b      	mov	r3, r1
 80086d4:	607a      	str	r2, [r7, #4]
 80086d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80086d8:	7afb      	ldrb	r3, [r7, #11]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d16f      	bne.n	80087be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3314      	adds	r3, #20
 80086e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d15a      	bne.n	80087a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	689a      	ldr	r2, [r3, #8]
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d914      	bls.n	8008724 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	689a      	ldr	r2, [r3, #8]
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	1ad2      	subs	r2, r2, r3
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	461a      	mov	r2, r3
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f001 f8bc 	bl	800988e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008716:	2300      	movs	r3, #0
 8008718:	2200      	movs	r2, #0
 800871a:	2100      	movs	r1, #0
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f001 fdeb 	bl	800a2f8 <USBD_LL_PrepareReceive>
 8008722:	e03f      	b.n	80087a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	68da      	ldr	r2, [r3, #12]
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	429a      	cmp	r2, r3
 800872e:	d11c      	bne.n	800876a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008738:	429a      	cmp	r2, r3
 800873a:	d316      	bcc.n	800876a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	685a      	ldr	r2, [r3, #4]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008746:	429a      	cmp	r2, r3
 8008748:	d20f      	bcs.n	800876a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800874a:	2200      	movs	r2, #0
 800874c:	2100      	movs	r1, #0
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f001 f89d 	bl	800988e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800875c:	2300      	movs	r3, #0
 800875e:	2200      	movs	r2, #0
 8008760:	2100      	movs	r1, #0
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f001 fdc8 	bl	800a2f8 <USBD_LL_PrepareReceive>
 8008768:	e01c      	b.n	80087a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b03      	cmp	r3, #3
 8008774:	d10f      	bne.n	8008796 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d009      	beq.n	8008796 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008796:	2180      	movs	r1, #128	@ 0x80
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f001 fd03 	bl	800a1a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f001 f8c7 	bl	8009932 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d03a      	beq.n	8008824 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f7ff fe42 	bl	8008438 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80087bc:	e032      	b.n	8008824 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80087be:	7afb      	ldrb	r3, [r7, #11]
 80087c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	4619      	mov	r1, r3
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f000 f985 	bl	8008ad8 <USBD_CoreFindEP>
 80087ce:	4603      	mov	r3, r0
 80087d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
 80087d4:	2bff      	cmp	r3, #255	@ 0xff
 80087d6:	d025      	beq.n	8008824 <USBD_LL_DataInStage+0x15a>
 80087d8:	7dfb      	ldrb	r3, [r7, #23]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d122      	bne.n	8008824 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b03      	cmp	r3, #3
 80087e8:	d11c      	bne.n	8008824 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80087ea:	7dfa      	ldrb	r2, [r7, #23]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	32ae      	adds	r2, #174	@ 0xae
 80087f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d014      	beq.n	8008824 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80087fa:	7dfa      	ldrb	r2, [r7, #23]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008802:	7dfa      	ldrb	r2, [r7, #23]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	32ae      	adds	r2, #174	@ 0xae
 8008808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	7afa      	ldrb	r2, [r7, #11]
 8008810:	4611      	mov	r1, r2
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	4798      	blx	r3
 8008816:	4603      	mov	r3, r0
 8008818:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800881a:	7dbb      	ldrb	r3, [r7, #22]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008820:	7dbb      	ldrb	r3, [r7, #22]
 8008822:	e000      	b.n	8008826 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008866:	2b00      	cmp	r3, #0
 8008868:	d014      	beq.n	8008894 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00e      	beq.n	8008894 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6852      	ldr	r2, [r2, #4]
 8008882:	b2d2      	uxtb	r2, r2
 8008884:	4611      	mov	r1, r2
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	4798      	blx	r3
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008890:	2303      	movs	r3, #3
 8008892:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008894:	2340      	movs	r3, #64	@ 0x40
 8008896:	2200      	movs	r2, #0
 8008898:	2100      	movs	r1, #0
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f001 fc3d 	bl	800a11a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2240      	movs	r2, #64	@ 0x40
 80088ac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088b0:	2340      	movs	r3, #64	@ 0x40
 80088b2:	2200      	movs	r2, #0
 80088b4:	2180      	movs	r1, #128	@ 0x80
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f001 fc2f 	bl	800a11a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2240      	movs	r2, #64	@ 0x40
 80088c6:	621a      	str	r2, [r3, #32]

  return ret;
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b083      	sub	sp, #12
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	460b      	mov	r3, r1
 80088dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	78fa      	ldrb	r2, [r7, #3]
 80088e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b04      	cmp	r3, #4
 8008904:	d006      	beq.n	8008914 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800890c:	b2da      	uxtb	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2204      	movs	r2, #4
 8008918:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	370c      	adds	r7, #12
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800892a:	b480      	push	{r7}
 800892c:	b083      	sub	sp, #12
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b04      	cmp	r3, #4
 800893c:	d106      	bne.n	800894c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008944:	b2da      	uxtb	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	370c      	adds	r7, #12
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b082      	sub	sp, #8
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b03      	cmp	r3, #3
 800896c:	d110      	bne.n	8008990 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00b      	beq.n	8008990 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800897e:	69db      	ldr	r3, [r3, #28]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d005      	beq.n	8008990 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800898a:	69db      	ldr	r3, [r3, #28]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b082      	sub	sp, #8
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	32ae      	adds	r2, #174	@ 0xae
 80089b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e01c      	b.n	80089f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d115      	bne.n	80089f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	32ae      	adds	r2, #174	@ 0xae
 80089d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d6:	6a1b      	ldr	r3, [r3, #32]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	32ae      	adds	r2, #174	@ 0xae
 80089e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	78fa      	ldrb	r2, [r7, #3]
 80089ee:	4611      	mov	r1, r2
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b082      	sub	sp, #8
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	460b      	mov	r3, r1
 8008a08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	32ae      	adds	r2, #174	@ 0xae
 8008a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d101      	bne.n	8008a20 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	e01c      	b.n	8008a5a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d115      	bne.n	8008a58 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	32ae      	adds	r2, #174	@ 0xae
 8008a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00b      	beq.n	8008a58 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	32ae      	adds	r2, #174	@ 0xae
 8008a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a50:	78fa      	ldrb	r2, [r7, #3]
 8008a52:	4611      	mov	r1, r2
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b083      	sub	sp, #12
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00e      	beq.n	8008ab4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	6852      	ldr	r2, [r2, #4]
 8008aa2:	b2d2      	uxtb	r2, r2
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	4798      	blx	r3
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b083      	sub	sp, #12
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008aca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ae4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b086      	sub	sp, #24
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	460b      	mov	r3, r1
 8008afc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	885b      	ldrh	r3, [r3, #2]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	7812      	ldrb	r2, [r2, #0]
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d91f      	bls.n	8008b58 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008b1e:	e013      	b.n	8008b48 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008b20:	f107 030a 	add.w	r3, r7, #10
 8008b24:	4619      	mov	r1, r3
 8008b26:	6978      	ldr	r0, [r7, #20]
 8008b28:	f000 f81b 	bl	8008b62 <USBD_GetNextDesc>
 8008b2c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	785b      	ldrb	r3, [r3, #1]
 8008b32:	2b05      	cmp	r3, #5
 8008b34:	d108      	bne.n	8008b48 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	789b      	ldrb	r3, [r3, #2]
 8008b3e:	78fa      	ldrb	r2, [r7, #3]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d008      	beq.n	8008b56 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008b44:	2300      	movs	r3, #0
 8008b46:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	885b      	ldrh	r3, [r3, #2]
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	897b      	ldrh	r3, [r7, #10]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d8e5      	bhi.n	8008b20 <USBD_GetEpDesc+0x2e>
 8008b54:	e000      	b.n	8008b58 <USBD_GetEpDesc+0x66>
          break;
 8008b56:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008b58:	693b      	ldr	r3, [r7, #16]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b085      	sub	sp, #20
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	7812      	ldrb	r2, [r2, #0]
 8008b78:	4413      	add	r3, r2
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	461a      	mov	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4413      	add	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b087      	sub	sp, #28
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008bb8:	8a3b      	ldrh	r3, [r7, #16]
 8008bba:	021b      	lsls	r3, r3, #8
 8008bbc:	b21a      	sxth	r2, r3
 8008bbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	b21b      	sxth	r3, r3
 8008bc6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008bc8:	89fb      	ldrh	r3, [r7, #14]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	371c      	adds	r7, #28
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
	...

08008bd8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bee:	2b40      	cmp	r3, #64	@ 0x40
 8008bf0:	d005      	beq.n	8008bfe <USBD_StdDevReq+0x26>
 8008bf2:	2b40      	cmp	r3, #64	@ 0x40
 8008bf4:	d857      	bhi.n	8008ca6 <USBD_StdDevReq+0xce>
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00f      	beq.n	8008c1a <USBD_StdDevReq+0x42>
 8008bfa:	2b20      	cmp	r3, #32
 8008bfc:	d153      	bne.n	8008ca6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	32ae      	adds	r2, #174	@ 0xae
 8008c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	4798      	blx	r3
 8008c14:	4603      	mov	r3, r0
 8008c16:	73fb      	strb	r3, [r7, #15]
      break;
 8008c18:	e04a      	b.n	8008cb0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	785b      	ldrb	r3, [r3, #1]
 8008c1e:	2b09      	cmp	r3, #9
 8008c20:	d83b      	bhi.n	8008c9a <USBD_StdDevReq+0xc2>
 8008c22:	a201      	add	r2, pc, #4	@ (adr r2, 8008c28 <USBD_StdDevReq+0x50>)
 8008c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c28:	08008c7d 	.word	0x08008c7d
 8008c2c:	08008c91 	.word	0x08008c91
 8008c30:	08008c9b 	.word	0x08008c9b
 8008c34:	08008c87 	.word	0x08008c87
 8008c38:	08008c9b 	.word	0x08008c9b
 8008c3c:	08008c5b 	.word	0x08008c5b
 8008c40:	08008c51 	.word	0x08008c51
 8008c44:	08008c9b 	.word	0x08008c9b
 8008c48:	08008c73 	.word	0x08008c73
 8008c4c:	08008c65 	.word	0x08008c65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fa3c 	bl	80090d0 <USBD_GetDescriptor>
          break;
 8008c58:	e024      	b.n	8008ca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fba1 	bl	80093a4 <USBD_SetAddress>
          break;
 8008c62:	e01f      	b.n	8008ca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fbe0 	bl	800942c <USBD_SetConfig>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	73fb      	strb	r3, [r7, #15]
          break;
 8008c70:	e018      	b.n	8008ca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fc83 	bl	8009580 <USBD_GetConfig>
          break;
 8008c7a:	e013      	b.n	8008ca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fcb4 	bl	80095ec <USBD_GetStatus>
          break;
 8008c84:	e00e      	b.n	8008ca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fce3 	bl	8009654 <USBD_SetFeature>
          break;
 8008c8e:	e009      	b.n	8008ca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fd07 	bl	80096a6 <USBD_ClrFeature>
          break;
 8008c98:	e004      	b.n	8008ca4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fd5e 	bl	800975e <USBD_CtlError>
          break;
 8008ca2:	bf00      	nop
      }
      break;
 8008ca4:	e004      	b.n	8008cb0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fd58 	bl	800975e <USBD_CtlError>
      break;
 8008cae:	bf00      	nop
  }

  return ret;
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop

08008cbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008cd2:	2b40      	cmp	r3, #64	@ 0x40
 8008cd4:	d005      	beq.n	8008ce2 <USBD_StdItfReq+0x26>
 8008cd6:	2b40      	cmp	r3, #64	@ 0x40
 8008cd8:	d852      	bhi.n	8008d80 <USBD_StdItfReq+0xc4>
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <USBD_StdItfReq+0x26>
 8008cde:	2b20      	cmp	r3, #32
 8008ce0:	d14e      	bne.n	8008d80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	3b01      	subs	r3, #1
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d840      	bhi.n	8008d72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	889b      	ldrh	r3, [r3, #4]
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d836      	bhi.n	8008d68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	889b      	ldrh	r3, [r3, #4]
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7ff fedb 	bl	8008abe <USBD_CoreFindIF>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d0c:	7bbb      	ldrb	r3, [r7, #14]
 8008d0e:	2bff      	cmp	r3, #255	@ 0xff
 8008d10:	d01d      	beq.n	8008d4e <USBD_StdItfReq+0x92>
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d11a      	bne.n	8008d4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008d18:	7bba      	ldrb	r2, [r7, #14]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	32ae      	adds	r2, #174	@ 0xae
 8008d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00f      	beq.n	8008d48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008d28:	7bba      	ldrb	r2, [r7, #14]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d30:	7bba      	ldrb	r2, [r7, #14]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	32ae      	adds	r2, #174	@ 0xae
 8008d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	4798      	blx	r3
 8008d42:	4603      	mov	r3, r0
 8008d44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d46:	e004      	b.n	8008d52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d4c:	e001      	b.n	8008d52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	88db      	ldrh	r3, [r3, #6]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d110      	bne.n	8008d7c <USBD_StdItfReq+0xc0>
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10d      	bne.n	8008d7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fdd3 	bl	800990c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d66:	e009      	b.n	8008d7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fcf7 	bl	800975e <USBD_CtlError>
          break;
 8008d70:	e004      	b.n	8008d7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fcf2 	bl	800975e <USBD_CtlError>
          break;
 8008d7a:	e000      	b.n	8008d7e <USBD_StdItfReq+0xc2>
          break;
 8008d7c:	bf00      	nop
      }
      break;
 8008d7e:	e004      	b.n	8008d8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fceb 	bl	800975e <USBD_CtlError>
      break;
 8008d88:	bf00      	nop
  }

  return ret;
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	889b      	ldrh	r3, [r3, #4]
 8008da6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008db0:	2b40      	cmp	r3, #64	@ 0x40
 8008db2:	d007      	beq.n	8008dc4 <USBD_StdEPReq+0x30>
 8008db4:	2b40      	cmp	r3, #64	@ 0x40
 8008db6:	f200 817f 	bhi.w	80090b8 <USBD_StdEPReq+0x324>
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d02a      	beq.n	8008e14 <USBD_StdEPReq+0x80>
 8008dbe:	2b20      	cmp	r3, #32
 8008dc0:	f040 817a 	bne.w	80090b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7ff fe85 	bl	8008ad8 <USBD_CoreFindEP>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008dd2:	7b7b      	ldrb	r3, [r7, #13]
 8008dd4:	2bff      	cmp	r3, #255	@ 0xff
 8008dd6:	f000 8174 	beq.w	80090c2 <USBD_StdEPReq+0x32e>
 8008dda:	7b7b      	ldrb	r3, [r7, #13]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f040 8170 	bne.w	80090c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008de2:	7b7a      	ldrb	r2, [r7, #13]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008dea:	7b7a      	ldrb	r2, [r7, #13]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	32ae      	adds	r2, #174	@ 0xae
 8008df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 8163 	beq.w	80090c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008dfc:	7b7a      	ldrb	r2, [r7, #13]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	32ae      	adds	r2, #174	@ 0xae
 8008e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	4798      	blx	r3
 8008e0e:	4603      	mov	r3, r0
 8008e10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008e12:	e156      	b.n	80090c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	785b      	ldrb	r3, [r3, #1]
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	d008      	beq.n	8008e2e <USBD_StdEPReq+0x9a>
 8008e1c:	2b03      	cmp	r3, #3
 8008e1e:	f300 8145 	bgt.w	80090ac <USBD_StdEPReq+0x318>
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 809b 	beq.w	8008f5e <USBD_StdEPReq+0x1ca>
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d03c      	beq.n	8008ea6 <USBD_StdEPReq+0x112>
 8008e2c:	e13e      	b.n	80090ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d002      	beq.n	8008e40 <USBD_StdEPReq+0xac>
 8008e3a:	2b03      	cmp	r3, #3
 8008e3c:	d016      	beq.n	8008e6c <USBD_StdEPReq+0xd8>
 8008e3e:	e02c      	b.n	8008e9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e40:	7bbb      	ldrb	r3, [r7, #14]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00d      	beq.n	8008e62 <USBD_StdEPReq+0xce>
 8008e46:	7bbb      	ldrb	r3, [r7, #14]
 8008e48:	2b80      	cmp	r3, #128	@ 0x80
 8008e4a:	d00a      	beq.n	8008e62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e4c:	7bbb      	ldrb	r3, [r7, #14]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f001 f9a7 	bl	800a1a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e56:	2180      	movs	r1, #128	@ 0x80
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f001 f9a3 	bl	800a1a4 <USBD_LL_StallEP>
 8008e5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e60:	e020      	b.n	8008ea4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fc7a 	bl	800975e <USBD_CtlError>
              break;
 8008e6a:	e01b      	b.n	8008ea4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	885b      	ldrh	r3, [r3, #2]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10e      	bne.n	8008e92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e74:	7bbb      	ldrb	r3, [r7, #14]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00b      	beq.n	8008e92 <USBD_StdEPReq+0xfe>
 8008e7a:	7bbb      	ldrb	r3, [r7, #14]
 8008e7c:	2b80      	cmp	r3, #128	@ 0x80
 8008e7e:	d008      	beq.n	8008e92 <USBD_StdEPReq+0xfe>
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	88db      	ldrh	r3, [r3, #6]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d104      	bne.n	8008e92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f001 f989 	bl	800a1a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fd3a 	bl	800990c <USBD_CtlSendStatus>

              break;
 8008e98:	e004      	b.n	8008ea4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fc5e 	bl	800975e <USBD_CtlError>
              break;
 8008ea2:	bf00      	nop
          }
          break;
 8008ea4:	e107      	b.n	80090b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d002      	beq.n	8008eb8 <USBD_StdEPReq+0x124>
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	d016      	beq.n	8008ee4 <USBD_StdEPReq+0x150>
 8008eb6:	e04b      	b.n	8008f50 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00d      	beq.n	8008eda <USBD_StdEPReq+0x146>
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	2b80      	cmp	r3, #128	@ 0x80
 8008ec2:	d00a      	beq.n	8008eda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f001 f96b 	bl	800a1a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ece:	2180      	movs	r1, #128	@ 0x80
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f001 f967 	bl	800a1a4 <USBD_LL_StallEP>
 8008ed6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ed8:	e040      	b.n	8008f5c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 fc3e 	bl	800975e <USBD_CtlError>
              break;
 8008ee2:	e03b      	b.n	8008f5c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	885b      	ldrh	r3, [r3, #2]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d136      	bne.n	8008f5a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
 8008eee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d004      	beq.n	8008f00 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ef6:	7bbb      	ldrb	r3, [r7, #14]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f001 f971 	bl	800a1e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fd03 	bl	800990c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff fde4 	bl	8008ad8 <USBD_CoreFindEP>
 8008f10:	4603      	mov	r3, r0
 8008f12:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f14:	7b7b      	ldrb	r3, [r7, #13]
 8008f16:	2bff      	cmp	r3, #255	@ 0xff
 8008f18:	d01f      	beq.n	8008f5a <USBD_StdEPReq+0x1c6>
 8008f1a:	7b7b      	ldrb	r3, [r7, #13]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d11c      	bne.n	8008f5a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008f20:	7b7a      	ldrb	r2, [r7, #13]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008f28:	7b7a      	ldrb	r2, [r7, #13]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	32ae      	adds	r2, #174	@ 0xae
 8008f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d010      	beq.n	8008f5a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f38:	7b7a      	ldrb	r2, [r7, #13]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	32ae      	adds	r2, #174	@ 0xae
 8008f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	4798      	blx	r3
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008f4e:	e004      	b.n	8008f5a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fc03 	bl	800975e <USBD_CtlError>
              break;
 8008f58:	e000      	b.n	8008f5c <USBD_StdEPReq+0x1c8>
              break;
 8008f5a:	bf00      	nop
          }
          break;
 8008f5c:	e0ab      	b.n	80090b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d002      	beq.n	8008f70 <USBD_StdEPReq+0x1dc>
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d032      	beq.n	8008fd4 <USBD_StdEPReq+0x240>
 8008f6e:	e097      	b.n	80090a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d007      	beq.n	8008f86 <USBD_StdEPReq+0x1f2>
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
 8008f78:	2b80      	cmp	r3, #128	@ 0x80
 8008f7a:	d004      	beq.n	8008f86 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008f7c:	6839      	ldr	r1, [r7, #0]
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 fbed 	bl	800975e <USBD_CtlError>
                break;
 8008f84:	e091      	b.n	80090aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	da0b      	bge.n	8008fa6 <USBD_StdEPReq+0x212>
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f94:	4613      	mov	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4413      	add	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	3310      	adds	r3, #16
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	3304      	adds	r3, #4
 8008fa4:	e00b      	b.n	8008fbe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fa6:	7bbb      	ldrb	r3, [r7, #14]
 8008fa8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fac:	4613      	mov	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	4413      	add	r3, r2
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	2202      	movs	r2, #2
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fc43 	bl	8009858 <USBD_CtlSendData>
              break;
 8008fd2:	e06a      	b.n	80090aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	da11      	bge.n	8009000 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	f003 020f 	and.w	r2, r3, #15
 8008fe2:	6879      	ldr	r1, [r7, #4]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4413      	add	r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	440b      	add	r3, r1
 8008fee:	3324      	adds	r3, #36	@ 0x24
 8008ff0:	881b      	ldrh	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d117      	bne.n	8009026 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008ff6:	6839      	ldr	r1, [r7, #0]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 fbb0 	bl	800975e <USBD_CtlError>
                  break;
 8008ffe:	e054      	b.n	80090aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009000:	7bbb      	ldrb	r3, [r7, #14]
 8009002:	f003 020f 	and.w	r2, r3, #15
 8009006:	6879      	ldr	r1, [r7, #4]
 8009008:	4613      	mov	r3, r2
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4413      	add	r3, r2
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	440b      	add	r3, r1
 8009012:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d104      	bne.n	8009026 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fb9d 	bl	800975e <USBD_CtlError>
                  break;
 8009024:	e041      	b.n	80090aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009026:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800902a:	2b00      	cmp	r3, #0
 800902c:	da0b      	bge.n	8009046 <USBD_StdEPReq+0x2b2>
 800902e:	7bbb      	ldrb	r3, [r7, #14]
 8009030:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009034:	4613      	mov	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	3310      	adds	r3, #16
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	4413      	add	r3, r2
 8009042:	3304      	adds	r3, #4
 8009044:	e00b      	b.n	800905e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009046:	7bbb      	ldrb	r3, [r7, #14]
 8009048:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800904c:	4613      	mov	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4413      	add	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	4413      	add	r3, r2
 800905c:	3304      	adds	r3, #4
 800905e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009060:	7bbb      	ldrb	r3, [r7, #14]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d002      	beq.n	800906c <USBD_StdEPReq+0x2d8>
 8009066:	7bbb      	ldrb	r3, [r7, #14]
 8009068:	2b80      	cmp	r3, #128	@ 0x80
 800906a:	d103      	bne.n	8009074 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	2200      	movs	r2, #0
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	e00e      	b.n	8009092 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009074:	7bbb      	ldrb	r3, [r7, #14]
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f001 f8d1 	bl	800a220 <USBD_LL_IsStallEP>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d003      	beq.n	800908c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	2201      	movs	r2, #1
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	e002      	b.n	8009092 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	2200      	movs	r2, #0
 8009090:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	2202      	movs	r2, #2
 8009096:	4619      	mov	r1, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fbdd 	bl	8009858 <USBD_CtlSendData>
              break;
 800909e:	e004      	b.n	80090aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fb5b 	bl	800975e <USBD_CtlError>
              break;
 80090a8:	bf00      	nop
          }
          break;
 80090aa:	e004      	b.n	80090b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fb55 	bl	800975e <USBD_CtlError>
          break;
 80090b4:	bf00      	nop
      }
      break;
 80090b6:	e005      	b.n	80090c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fb4f 	bl	800975e <USBD_CtlError>
      break;
 80090c0:	e000      	b.n	80090c4 <USBD_StdEPReq+0x330>
      break;
 80090c2:	bf00      	nop
  }

  return ret;
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80090e2:	2300      	movs	r3, #0
 80090e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	885b      	ldrh	r3, [r3, #2]
 80090ea:	0a1b      	lsrs	r3, r3, #8
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	3b01      	subs	r3, #1
 80090f0:	2b06      	cmp	r3, #6
 80090f2:	f200 8128 	bhi.w	8009346 <USBD_GetDescriptor+0x276>
 80090f6:	a201      	add	r2, pc, #4	@ (adr r2, 80090fc <USBD_GetDescriptor+0x2c>)
 80090f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fc:	08009119 	.word	0x08009119
 8009100:	08009131 	.word	0x08009131
 8009104:	08009171 	.word	0x08009171
 8009108:	08009347 	.word	0x08009347
 800910c:	08009347 	.word	0x08009347
 8009110:	080092e7 	.word	0x080092e7
 8009114:	08009313 	.word	0x08009313
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	7c12      	ldrb	r2, [r2, #16]
 8009124:	f107 0108 	add.w	r1, r7, #8
 8009128:	4610      	mov	r0, r2
 800912a:	4798      	blx	r3
 800912c:	60f8      	str	r0, [r7, #12]
      break;
 800912e:	e112      	b.n	8009356 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	7c1b      	ldrb	r3, [r3, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10d      	bne.n	8009154 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800913e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009140:	f107 0208 	add.w	r2, r7, #8
 8009144:	4610      	mov	r0, r2
 8009146:	4798      	blx	r3
 8009148:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	3301      	adds	r3, #1
 800914e:	2202      	movs	r2, #2
 8009150:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009152:	e100      	b.n	8009356 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800915a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915c:	f107 0208 	add.w	r2, r7, #8
 8009160:	4610      	mov	r0, r2
 8009162:	4798      	blx	r3
 8009164:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3301      	adds	r3, #1
 800916a:	2202      	movs	r2, #2
 800916c:	701a      	strb	r2, [r3, #0]
      break;
 800916e:	e0f2      	b.n	8009356 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	885b      	ldrh	r3, [r3, #2]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b05      	cmp	r3, #5
 8009178:	f200 80ac 	bhi.w	80092d4 <USBD_GetDescriptor+0x204>
 800917c:	a201      	add	r2, pc, #4	@ (adr r2, 8009184 <USBD_GetDescriptor+0xb4>)
 800917e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009182:	bf00      	nop
 8009184:	0800919d 	.word	0x0800919d
 8009188:	080091d1 	.word	0x080091d1
 800918c:	08009205 	.word	0x08009205
 8009190:	08009239 	.word	0x08009239
 8009194:	0800926d 	.word	0x0800926d
 8009198:	080092a1 	.word	0x080092a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00b      	beq.n	80091c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	7c12      	ldrb	r2, [r2, #16]
 80091b4:	f107 0108 	add.w	r1, r7, #8
 80091b8:	4610      	mov	r0, r2
 80091ba:	4798      	blx	r3
 80091bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091be:	e091      	b.n	80092e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 facb 	bl	800975e <USBD_CtlError>
            err++;
 80091c8:	7afb      	ldrb	r3, [r7, #11]
 80091ca:	3301      	adds	r3, #1
 80091cc:	72fb      	strb	r3, [r7, #11]
          break;
 80091ce:	e089      	b.n	80092e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00b      	beq.n	80091f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	7c12      	ldrb	r2, [r2, #16]
 80091e8:	f107 0108 	add.w	r1, r7, #8
 80091ec:	4610      	mov	r0, r2
 80091ee:	4798      	blx	r3
 80091f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091f2:	e077      	b.n	80092e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fab1 	bl	800975e <USBD_CtlError>
            err++;
 80091fc:	7afb      	ldrb	r3, [r7, #11]
 80091fe:	3301      	adds	r3, #1
 8009200:	72fb      	strb	r3, [r7, #11]
          break;
 8009202:	e06f      	b.n	80092e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00b      	beq.n	8009228 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	7c12      	ldrb	r2, [r2, #16]
 800921c:	f107 0108 	add.w	r1, r7, #8
 8009220:	4610      	mov	r0, r2
 8009222:	4798      	blx	r3
 8009224:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009226:	e05d      	b.n	80092e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fa97 	bl	800975e <USBD_CtlError>
            err++;
 8009230:	7afb      	ldrb	r3, [r7, #11]
 8009232:	3301      	adds	r3, #1
 8009234:	72fb      	strb	r3, [r7, #11]
          break;
 8009236:	e055      	b.n	80092e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00b      	beq.n	800925c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	7c12      	ldrb	r2, [r2, #16]
 8009250:	f107 0108 	add.w	r1, r7, #8
 8009254:	4610      	mov	r0, r2
 8009256:	4798      	blx	r3
 8009258:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800925a:	e043      	b.n	80092e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fa7d 	bl	800975e <USBD_CtlError>
            err++;
 8009264:	7afb      	ldrb	r3, [r7, #11]
 8009266:	3301      	adds	r3, #1
 8009268:	72fb      	strb	r3, [r7, #11]
          break;
 800926a:	e03b      	b.n	80092e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009272:	695b      	ldr	r3, [r3, #20]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00b      	beq.n	8009290 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800927e:	695b      	ldr	r3, [r3, #20]
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	7c12      	ldrb	r2, [r2, #16]
 8009284:	f107 0108 	add.w	r1, r7, #8
 8009288:	4610      	mov	r0, r2
 800928a:	4798      	blx	r3
 800928c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800928e:	e029      	b.n	80092e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009290:	6839      	ldr	r1, [r7, #0]
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 fa63 	bl	800975e <USBD_CtlError>
            err++;
 8009298:	7afb      	ldrb	r3, [r7, #11]
 800929a:	3301      	adds	r3, #1
 800929c:	72fb      	strb	r3, [r7, #11]
          break;
 800929e:	e021      	b.n	80092e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00b      	beq.n	80092c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092b2:	699b      	ldr	r3, [r3, #24]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	7c12      	ldrb	r2, [r2, #16]
 80092b8:	f107 0108 	add.w	r1, r7, #8
 80092bc:	4610      	mov	r0, r2
 80092be:	4798      	blx	r3
 80092c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092c2:	e00f      	b.n	80092e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fa49 	bl	800975e <USBD_CtlError>
            err++;
 80092cc:	7afb      	ldrb	r3, [r7, #11]
 80092ce:	3301      	adds	r3, #1
 80092d0:	72fb      	strb	r3, [r7, #11]
          break;
 80092d2:	e007      	b.n	80092e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fa41 	bl	800975e <USBD_CtlError>
          err++;
 80092dc:	7afb      	ldrb	r3, [r7, #11]
 80092de:	3301      	adds	r3, #1
 80092e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80092e2:	bf00      	nop
      }
      break;
 80092e4:	e037      	b.n	8009356 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	7c1b      	ldrb	r3, [r3, #16]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d109      	bne.n	8009302 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092f6:	f107 0208 	add.w	r2, r7, #8
 80092fa:	4610      	mov	r0, r2
 80092fc:	4798      	blx	r3
 80092fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009300:	e029      	b.n	8009356 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fa2a 	bl	800975e <USBD_CtlError>
        err++;
 800930a:	7afb      	ldrb	r3, [r7, #11]
 800930c:	3301      	adds	r3, #1
 800930e:	72fb      	strb	r3, [r7, #11]
      break;
 8009310:	e021      	b.n	8009356 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	7c1b      	ldrb	r3, [r3, #16]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10d      	bne.n	8009336 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009322:	f107 0208 	add.w	r2, r7, #8
 8009326:	4610      	mov	r0, r2
 8009328:	4798      	blx	r3
 800932a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	3301      	adds	r3, #1
 8009330:	2207      	movs	r2, #7
 8009332:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009334:	e00f      	b.n	8009356 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fa10 	bl	800975e <USBD_CtlError>
        err++;
 800933e:	7afb      	ldrb	r3, [r7, #11]
 8009340:	3301      	adds	r3, #1
 8009342:	72fb      	strb	r3, [r7, #11]
      break;
 8009344:	e007      	b.n	8009356 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009346:	6839      	ldr	r1, [r7, #0]
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fa08 	bl	800975e <USBD_CtlError>
      err++;
 800934e:	7afb      	ldrb	r3, [r7, #11]
 8009350:	3301      	adds	r3, #1
 8009352:	72fb      	strb	r3, [r7, #11]
      break;
 8009354:	bf00      	nop
  }

  if (err != 0U)
 8009356:	7afb      	ldrb	r3, [r7, #11]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d11e      	bne.n	800939a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	88db      	ldrh	r3, [r3, #6]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d016      	beq.n	8009392 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009364:	893b      	ldrh	r3, [r7, #8]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00e      	beq.n	8009388 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	88da      	ldrh	r2, [r3, #6]
 800936e:	893b      	ldrh	r3, [r7, #8]
 8009370:	4293      	cmp	r3, r2
 8009372:	bf28      	it	cs
 8009374:	4613      	movcs	r3, r2
 8009376:	b29b      	uxth	r3, r3
 8009378:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800937a:	893b      	ldrh	r3, [r7, #8]
 800937c:	461a      	mov	r2, r3
 800937e:	68f9      	ldr	r1, [r7, #12]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fa69 	bl	8009858 <USBD_CtlSendData>
 8009386:	e009      	b.n	800939c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f9e7 	bl	800975e <USBD_CtlError>
 8009390:	e004      	b.n	800939c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 faba 	bl	800990c <USBD_CtlSendStatus>
 8009398:	e000      	b.n	800939c <USBD_GetDescriptor+0x2cc>
    return;
 800939a:	bf00      	nop
  }
}
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop

080093a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	889b      	ldrh	r3, [r3, #4]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d131      	bne.n	800941a <USBD_SetAddress+0x76>
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	88db      	ldrh	r3, [r3, #6]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d12d      	bne.n	800941a <USBD_SetAddress+0x76>
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	885b      	ldrh	r3, [r3, #2]
 80093c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80093c4:	d829      	bhi.n	800941a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	885b      	ldrh	r3, [r3, #2]
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b03      	cmp	r3, #3
 80093dc:	d104      	bne.n	80093e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 f9bc 	bl	800975e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093e6:	e01d      	b.n	8009424 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	7bfa      	ldrb	r2, [r7, #15]
 80093ec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
 80093f2:	4619      	mov	r1, r3
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 ff3f 	bl	800a278 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fa86 	bl	800990c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009400:	7bfb      	ldrb	r3, [r7, #15]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d004      	beq.n	8009410 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2202      	movs	r2, #2
 800940a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800940e:	e009      	b.n	8009424 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009418:	e004      	b.n	8009424 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f99e 	bl	800975e <USBD_CtlError>
  }
}
 8009422:	bf00      	nop
 8009424:	bf00      	nop
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	885b      	ldrh	r3, [r3, #2]
 800943e:	b2da      	uxtb	r2, r3
 8009440:	4b4e      	ldr	r3, [pc, #312]	@ (800957c <USBD_SetConfig+0x150>)
 8009442:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009444:	4b4d      	ldr	r3, [pc, #308]	@ (800957c <USBD_SetConfig+0x150>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d905      	bls.n	8009458 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f985 	bl	800975e <USBD_CtlError>
    return USBD_FAIL;
 8009454:	2303      	movs	r3, #3
 8009456:	e08c      	b.n	8009572 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b02      	cmp	r3, #2
 8009462:	d002      	beq.n	800946a <USBD_SetConfig+0x3e>
 8009464:	2b03      	cmp	r3, #3
 8009466:	d029      	beq.n	80094bc <USBD_SetConfig+0x90>
 8009468:	e075      	b.n	8009556 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800946a:	4b44      	ldr	r3, [pc, #272]	@ (800957c <USBD_SetConfig+0x150>)
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d020      	beq.n	80094b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009472:	4b42      	ldr	r3, [pc, #264]	@ (800957c <USBD_SetConfig+0x150>)
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800947c:	4b3f      	ldr	r3, [pc, #252]	@ (800957c <USBD_SetConfig+0x150>)
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	4619      	mov	r1, r3
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f7fe ffe3 	bl	800844e <USBD_SetClassConfig>
 8009488:	4603      	mov	r3, r0
 800948a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800948c:	7bfb      	ldrb	r3, [r7, #15]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d008      	beq.n	80094a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f962 	bl	800975e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2202      	movs	r2, #2
 800949e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094a2:	e065      	b.n	8009570 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fa31 	bl	800990c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2203      	movs	r2, #3
 80094ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80094b2:	e05d      	b.n	8009570 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fa29 	bl	800990c <USBD_CtlSendStatus>
      break;
 80094ba:	e059      	b.n	8009570 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80094bc:	4b2f      	ldr	r3, [pc, #188]	@ (800957c <USBD_SetConfig+0x150>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d112      	bne.n	80094ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2202      	movs	r2, #2
 80094c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80094cc:	4b2b      	ldr	r3, [pc, #172]	@ (800957c <USBD_SetConfig+0x150>)
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	461a      	mov	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094d6:	4b29      	ldr	r3, [pc, #164]	@ (800957c <USBD_SetConfig+0x150>)
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7fe ffd2 	bl	8008486 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fa12 	bl	800990c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094e8:	e042      	b.n	8009570 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80094ea:	4b24      	ldr	r3, [pc, #144]	@ (800957c <USBD_SetConfig+0x150>)
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	461a      	mov	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d02a      	beq.n	800954e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7fe ffc0 	bl	8008486 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009506:	4b1d      	ldr	r3, [pc, #116]	@ (800957c <USBD_SetConfig+0x150>)
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009510:	4b1a      	ldr	r3, [pc, #104]	@ (800957c <USBD_SetConfig+0x150>)
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7fe ff99 	bl	800844e <USBD_SetClassConfig>
 800951c:	4603      	mov	r3, r0
 800951e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00f      	beq.n	8009546 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f918 	bl	800975e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	b2db      	uxtb	r3, r3
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7fe ffa5 	bl	8008486 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2202      	movs	r2, #2
 8009540:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009544:	e014      	b.n	8009570 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f9e0 	bl	800990c <USBD_CtlSendStatus>
      break;
 800954c:	e010      	b.n	8009570 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f9dc 	bl	800990c <USBD_CtlSendStatus>
      break;
 8009554:	e00c      	b.n	8009570 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f900 	bl	800975e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800955e:	4b07      	ldr	r3, [pc, #28]	@ (800957c <USBD_SetConfig+0x150>)
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7fe ff8e 	bl	8008486 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800956a:	2303      	movs	r3, #3
 800956c:	73fb      	strb	r3, [r7, #15]
      break;
 800956e:	bf00      	nop
  }

  return ret;
 8009570:	7bfb      	ldrb	r3, [r7, #15]
}
 8009572:	4618      	mov	r0, r3
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	2000043c 	.word	0x2000043c

08009580 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	88db      	ldrh	r3, [r3, #6]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d004      	beq.n	800959c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f8e2 	bl	800975e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800959a:	e023      	b.n	80095e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	dc02      	bgt.n	80095ae <USBD_GetConfig+0x2e>
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	dc03      	bgt.n	80095b4 <USBD_GetConfig+0x34>
 80095ac:	e015      	b.n	80095da <USBD_GetConfig+0x5a>
 80095ae:	2b03      	cmp	r3, #3
 80095b0:	d00b      	beq.n	80095ca <USBD_GetConfig+0x4a>
 80095b2:	e012      	b.n	80095da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	3308      	adds	r3, #8
 80095be:	2201      	movs	r2, #1
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f948 	bl	8009858 <USBD_CtlSendData>
        break;
 80095c8:	e00c      	b.n	80095e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	3304      	adds	r3, #4
 80095ce:	2201      	movs	r2, #1
 80095d0:	4619      	mov	r1, r3
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f940 	bl	8009858 <USBD_CtlSendData>
        break;
 80095d8:	e004      	b.n	80095e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80095da:	6839      	ldr	r1, [r7, #0]
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 f8be 	bl	800975e <USBD_CtlError>
        break;
 80095e2:	bf00      	nop
}
 80095e4:	bf00      	nop
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	3b01      	subs	r3, #1
 8009600:	2b02      	cmp	r3, #2
 8009602:	d81e      	bhi.n	8009642 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	88db      	ldrh	r3, [r3, #6]
 8009608:	2b02      	cmp	r3, #2
 800960a:	d004      	beq.n	8009616 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f8a5 	bl	800975e <USBD_CtlError>
        break;
 8009614:	e01a      	b.n	800964c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2201      	movs	r2, #1
 800961a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009622:	2b00      	cmp	r3, #0
 8009624:	d005      	beq.n	8009632 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	f043 0202 	orr.w	r2, r3, #2
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	330c      	adds	r3, #12
 8009636:	2202      	movs	r2, #2
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f90c 	bl	8009858 <USBD_CtlSendData>
      break;
 8009640:	e004      	b.n	800964c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f88a 	bl	800975e <USBD_CtlError>
      break;
 800964a:	bf00      	nop
  }
}
 800964c:	bf00      	nop
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	885b      	ldrh	r3, [r3, #2]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d107      	bne.n	8009676 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f94c 	bl	800990c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009674:	e013      	b.n	800969e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	885b      	ldrh	r3, [r3, #2]
 800967a:	2b02      	cmp	r3, #2
 800967c:	d10b      	bne.n	8009696 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	889b      	ldrh	r3, [r3, #4]
 8009682:	0a1b      	lsrs	r3, r3, #8
 8009684:	b29b      	uxth	r3, r3
 8009686:	b2da      	uxtb	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 f93c 	bl	800990c <USBD_CtlSendStatus>
}
 8009694:	e003      	b.n	800969e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f860 	bl	800975e <USBD_CtlError>
}
 800969e:	bf00      	nop
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b082      	sub	sp, #8
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	3b01      	subs	r3, #1
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d80b      	bhi.n	80096d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	885b      	ldrh	r3, [r3, #2]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d10c      	bne.n	80096e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f91c 	bl	800990c <USBD_CtlSendStatus>
      }
      break;
 80096d4:	e004      	b.n	80096e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 f840 	bl	800975e <USBD_CtlError>
      break;
 80096de:	e000      	b.n	80096e2 <USBD_ClrFeature+0x3c>
      break;
 80096e0:	bf00      	nop
  }
}
 80096e2:	bf00      	nop
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	781a      	ldrb	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	3301      	adds	r3, #1
 8009704:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	781a      	ldrb	r2, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	3301      	adds	r3, #1
 8009712:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f7ff fa40 	bl	8008b9a <SWAPBYTE>
 800971a:	4603      	mov	r3, r0
 800971c:	461a      	mov	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3301      	adds	r3, #1
 8009726:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	3301      	adds	r3, #1
 800972c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f7ff fa33 	bl	8008b9a <SWAPBYTE>
 8009734:	4603      	mov	r3, r0
 8009736:	461a      	mov	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	3301      	adds	r3, #1
 8009740:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	3301      	adds	r3, #1
 8009746:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f7ff fa26 	bl	8008b9a <SWAPBYTE>
 800974e:	4603      	mov	r3, r0
 8009750:	461a      	mov	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	80da      	strh	r2, [r3, #6]
}
 8009756:	bf00      	nop
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b082      	sub	sp, #8
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009768:	2180      	movs	r1, #128	@ 0x80
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fd1a 	bl	800a1a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009770:	2100      	movs	r1, #0
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fd16 	bl	800a1a4 <USBD_LL_StallEP>
}
 8009778:	bf00      	nop
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800978c:	2300      	movs	r3, #0
 800978e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d042      	beq.n	800981c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800979a:	6938      	ldr	r0, [r7, #16]
 800979c:	f000 f842 	bl	8009824 <USBD_GetLen>
 80097a0:	4603      	mov	r3, r0
 80097a2:	3301      	adds	r3, #1
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097aa:	d808      	bhi.n	80097be <USBD_GetString+0x3e>
 80097ac:	6938      	ldr	r0, [r7, #16]
 80097ae:	f000 f839 	bl	8009824 <USBD_GetLen>
 80097b2:	4603      	mov	r3, r0
 80097b4:	3301      	adds	r3, #1
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	005b      	lsls	r3, r3, #1
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	e001      	b.n	80097c2 <USBD_GetString+0x42>
 80097be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80097c6:	7dfb      	ldrb	r3, [r7, #23]
 80097c8:	68ba      	ldr	r2, [r7, #8]
 80097ca:	4413      	add	r3, r2
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	7812      	ldrb	r2, [r2, #0]
 80097d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
 80097d4:	3301      	adds	r3, #1
 80097d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80097d8:	7dfb      	ldrb	r3, [r7, #23]
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	4413      	add	r3, r2
 80097de:	2203      	movs	r2, #3
 80097e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80097e2:	7dfb      	ldrb	r3, [r7, #23]
 80097e4:	3301      	adds	r3, #1
 80097e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80097e8:	e013      	b.n	8009812 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80097ea:	7dfb      	ldrb	r3, [r7, #23]
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	4413      	add	r3, r2
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	7812      	ldrb	r2, [r2, #0]
 80097f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	3301      	adds	r3, #1
 80097fa:	613b      	str	r3, [r7, #16]
    idx++;
 80097fc:	7dfb      	ldrb	r3, [r7, #23]
 80097fe:	3301      	adds	r3, #1
 8009800:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009802:	7dfb      	ldrb	r3, [r7, #23]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	4413      	add	r3, r2
 8009808:	2200      	movs	r2, #0
 800980a:	701a      	strb	r2, [r3, #0]
    idx++;
 800980c:	7dfb      	ldrb	r3, [r7, #23]
 800980e:	3301      	adds	r3, #1
 8009810:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1e7      	bne.n	80097ea <USBD_GetString+0x6a>
 800981a:	e000      	b.n	800981e <USBD_GetString+0x9e>
    return;
 800981c:	bf00      	nop
  }
}
 800981e:	3718      	adds	r7, #24
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800982c:	2300      	movs	r3, #0
 800982e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009834:	e005      	b.n	8009842 <USBD_GetLen+0x1e>
  {
    len++;
 8009836:	7bfb      	ldrb	r3, [r7, #15]
 8009838:	3301      	adds	r3, #1
 800983a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	3301      	adds	r3, #1
 8009840:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1f5      	bne.n	8009836 <USBD_GetLen+0x12>
  }

  return len;
 800984a:	7bfb      	ldrb	r3, [r7, #15]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3714      	adds	r7, #20
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2202      	movs	r2, #2
 8009868:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	2100      	movs	r1, #0
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f000 fd19 	bl	800a2b6 <USBD_LL_Transmit>

  return USBD_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	60b9      	str	r1, [r7, #8]
 8009898:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	2100      	movs	r1, #0
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f000 fd08 	bl	800a2b6 <USBD_LL_Transmit>

  return USBD_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2203      	movs	r2, #3
 80098c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	2100      	movs	r1, #0
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f000 fd0c 	bl	800a2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b084      	sub	sp, #16
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	60f8      	str	r0, [r7, #12]
 80098f2:	60b9      	str	r1, [r7, #8]
 80098f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	2100      	movs	r1, #0
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 fcfb 	bl	800a2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2204      	movs	r2, #4
 8009918:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800991c:	2300      	movs	r3, #0
 800991e:	2200      	movs	r2, #0
 8009920:	2100      	movs	r1, #0
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fcc7 	bl	800a2b6 <USBD_LL_Transmit>

  return USBD_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b082      	sub	sp, #8
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2205      	movs	r2, #5
 800993e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009942:	2300      	movs	r3, #0
 8009944:	2200      	movs	r2, #0
 8009946:	2100      	movs	r1, #0
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fcd5 	bl	800a2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800995c:	2200      	movs	r2, #0
 800995e:	4912      	ldr	r1, [pc, #72]	@ (80099a8 <MX_USB_DEVICE_Init+0x50>)
 8009960:	4812      	ldr	r0, [pc, #72]	@ (80099ac <MX_USB_DEVICE_Init+0x54>)
 8009962:	f7fe fcf7 	bl	8008354 <USBD_Init>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d001      	beq.n	8009970 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800996c:	f7f7 fb64 	bl	8001038 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009970:	490f      	ldr	r1, [pc, #60]	@ (80099b0 <MX_USB_DEVICE_Init+0x58>)
 8009972:	480e      	ldr	r0, [pc, #56]	@ (80099ac <MX_USB_DEVICE_Init+0x54>)
 8009974:	f7fe fd1e 	bl	80083b4 <USBD_RegisterClass>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800997e:	f7f7 fb5b 	bl	8001038 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009982:	490c      	ldr	r1, [pc, #48]	@ (80099b4 <MX_USB_DEVICE_Init+0x5c>)
 8009984:	4809      	ldr	r0, [pc, #36]	@ (80099ac <MX_USB_DEVICE_Init+0x54>)
 8009986:	f7fe fc15 	bl	80081b4 <USBD_CDC_RegisterInterface>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009990:	f7f7 fb52 	bl	8001038 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009994:	4805      	ldr	r0, [pc, #20]	@ (80099ac <MX_USB_DEVICE_Init+0x54>)
 8009996:	f7fe fd43 	bl	8008420 <USBD_Start>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099a0:	f7f7 fb4a 	bl	8001038 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099a4:	bf00      	nop
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	200000d0 	.word	0x200000d0
 80099ac:	20000440 	.word	0x20000440
 80099b0:	2000003c 	.word	0x2000003c
 80099b4:	200000bc 	.word	0x200000bc

080099b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80099bc:	2200      	movs	r2, #0
 80099be:	4905      	ldr	r1, [pc, #20]	@ (80099d4 <CDC_Init_FS+0x1c>)
 80099c0:	4805      	ldr	r0, [pc, #20]	@ (80099d8 <CDC_Init_FS+0x20>)
 80099c2:	f7fe fc11 	bl	80081e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80099c6:	4905      	ldr	r1, [pc, #20]	@ (80099dc <CDC_Init_FS+0x24>)
 80099c8:	4803      	ldr	r0, [pc, #12]	@ (80099d8 <CDC_Init_FS+0x20>)
 80099ca:	f7fe fc2f 	bl	800822c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80099ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	20000f1c 	.word	0x20000f1c
 80099d8:	20000440 	.word	0x20000440
 80099dc:	2000071c 	.word	0x2000071c

080099e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80099e0:	b480      	push	{r7}
 80099e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80099e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	4603      	mov	r3, r0
 80099f8:	6039      	str	r1, [r7, #0]
 80099fa:	71fb      	strb	r3, [r7, #7]
 80099fc:	4613      	mov	r3, r2
 80099fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a00:	79fb      	ldrb	r3, [r7, #7]
 8009a02:	2b23      	cmp	r3, #35	@ 0x23
 8009a04:	d84a      	bhi.n	8009a9c <CDC_Control_FS+0xac>
 8009a06:	a201      	add	r2, pc, #4	@ (adr r2, 8009a0c <CDC_Control_FS+0x1c>)
 8009a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0c:	08009a9d 	.word	0x08009a9d
 8009a10:	08009a9d 	.word	0x08009a9d
 8009a14:	08009a9d 	.word	0x08009a9d
 8009a18:	08009a9d 	.word	0x08009a9d
 8009a1c:	08009a9d 	.word	0x08009a9d
 8009a20:	08009a9d 	.word	0x08009a9d
 8009a24:	08009a9d 	.word	0x08009a9d
 8009a28:	08009a9d 	.word	0x08009a9d
 8009a2c:	08009a9d 	.word	0x08009a9d
 8009a30:	08009a9d 	.word	0x08009a9d
 8009a34:	08009a9d 	.word	0x08009a9d
 8009a38:	08009a9d 	.word	0x08009a9d
 8009a3c:	08009a9d 	.word	0x08009a9d
 8009a40:	08009a9d 	.word	0x08009a9d
 8009a44:	08009a9d 	.word	0x08009a9d
 8009a48:	08009a9d 	.word	0x08009a9d
 8009a4c:	08009a9d 	.word	0x08009a9d
 8009a50:	08009a9d 	.word	0x08009a9d
 8009a54:	08009a9d 	.word	0x08009a9d
 8009a58:	08009a9d 	.word	0x08009a9d
 8009a5c:	08009a9d 	.word	0x08009a9d
 8009a60:	08009a9d 	.word	0x08009a9d
 8009a64:	08009a9d 	.word	0x08009a9d
 8009a68:	08009a9d 	.word	0x08009a9d
 8009a6c:	08009a9d 	.word	0x08009a9d
 8009a70:	08009a9d 	.word	0x08009a9d
 8009a74:	08009a9d 	.word	0x08009a9d
 8009a78:	08009a9d 	.word	0x08009a9d
 8009a7c:	08009a9d 	.word	0x08009a9d
 8009a80:	08009a9d 	.word	0x08009a9d
 8009a84:	08009a9d 	.word	0x08009a9d
 8009a88:	08009a9d 	.word	0x08009a9d
 8009a8c:	08009a9d 	.word	0x08009a9d
 8009a90:	08009a9d 	.word	0x08009a9d
 8009a94:	08009a9d 	.word	0x08009a9d
 8009a98:	08009a9d 	.word	0x08009a9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a9c:	bf00      	nop
  }

  return (USBD_OK);
 8009a9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009aac:	b590      	push	{r4, r7, lr}
 8009aae:	b089      	sub	sp, #36	@ 0x24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009ab6:	6879      	ldr	r1, [r7, #4]
 8009ab8:	481d      	ldr	r0, [pc, #116]	@ (8009b30 <CDC_Receive_FS+0x84>)
 8009aba:	f7fe fbb7 	bl	800822c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009abe:	481c      	ldr	r0, [pc, #112]	@ (8009b30 <CDC_Receive_FS+0x84>)
 8009ac0:	f7fe fc12 	bl	80082e8 <USBD_CDC_ReceivePacket>

  uint8_t DataToSend[] = {"PAL_Linia_X_XX"};
 8009ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8009b34 <CDC_Receive_FS+0x88>)
 8009ac6:	f107 040c 	add.w	r4, r7, #12
 8009aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009acc:	c407      	stmia	r4!, {r0, r1, r2}
 8009ace:	8023      	strh	r3, [r4, #0]
 8009ad0:	3402      	adds	r4, #2
 8009ad2:	0c1b      	lsrs	r3, r3, #16
 8009ad4:	7023      	strb	r3, [r4, #0]
  DataToSend[10] = send_buffer[20];
 8009ad6:	4b18      	ldr	r3, [pc, #96]	@ (8009b38 <CDC_Receive_FS+0x8c>)
 8009ad8:	7d1b      	ldrb	r3, [r3, #20]
 8009ada:	75bb      	strb	r3, [r7, #22]
  DataToSend[12] = send_buffer[22];
 8009adc:	4b16      	ldr	r3, [pc, #88]	@ (8009b38 <CDC_Receive_FS+0x8c>)
 8009ade:	7d9b      	ldrb	r3, [r3, #22]
 8009ae0:	763b      	strb	r3, [r7, #24]
  DataToSend[13] = send_buffer[23];
 8009ae2:	4b15      	ldr	r3, [pc, #84]	@ (8009b38 <CDC_Receive_FS+0x8c>)
 8009ae4:	7ddb      	ldrb	r3, [r3, #23]
 8009ae6:	767b      	strb	r3, [r7, #25]
  uint8_t MessageLength = 14;
 8009ae8:	230e      	movs	r3, #14
 8009aea:	77fb      	strb	r3, [r7, #31]

  if (strncmp(Buf, "RFID0001", 8) == 0) {
 8009aec:	2208      	movs	r2, #8
 8009aee:	4913      	ldr	r1, [pc, #76]	@ (8009b3c <CDC_Receive_FS+0x90>)
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fc81 	bl	800a3f8 <strncmp>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d108      	bne.n	8009b0e <CDC_Receive_FS+0x62>
	  	  CDC_Transmit_FS(DataToSend, MessageLength);
 8009afc:	7ffb      	ldrb	r3, [r7, #31]
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	f107 030c 	add.w	r3, r7, #12
 8009b04:	4611      	mov	r1, r2
 8009b06:	4618      	mov	r0, r3
 8009b08:	f000 f81c 	bl	8009b44 <CDC_Transmit_FS>
 8009b0c:	e00b      	b.n	8009b26 <CDC_Receive_FS+0x7a>
      } else {
    	  uint8_t DataToSend1[] = {"ERR"};
 8009b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b40 <CDC_Receive_FS+0x94>)
 8009b10:	60bb      	str	r3, [r7, #8]
    	  uint8_t MessageLength1 = 3;
 8009b12:	2303      	movs	r3, #3
 8009b14:	77bb      	strb	r3, [r7, #30]

    	  CDC_Transmit_FS(DataToSend1, MessageLength1);
 8009b16:	7fbb      	ldrb	r3, [r7, #30]
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	f107 0308 	add.w	r3, r7, #8
 8009b1e:	4611      	mov	r1, r2
 8009b20:	4618      	mov	r0, r3
 8009b22:	f000 f80f 	bl	8009b44 <CDC_Transmit_FS>
      }

  return (USBD_OK);
 8009b26:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3724      	adds	r7, #36	@ 0x24
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd90      	pop	{r4, r7, pc}
 8009b30:	20000440 	.word	0x20000440
 8009b34:	0800a57c 	.word	0x0800a57c
 8009b38:	20000008 	.word	0x20000008
 8009b3c:	0800a570 	.word	0x0800a570
 8009b40:	00525245 	.word	0x00525245

08009b44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009b54:	4b0d      	ldr	r3, [pc, #52]	@ (8009b8c <CDC_Transmit_FS+0x48>)
 8009b56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b5a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d001      	beq.n	8009b6a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e00b      	b.n	8009b82 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009b6a:	887b      	ldrh	r3, [r7, #2]
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	6879      	ldr	r1, [r7, #4]
 8009b70:	4806      	ldr	r0, [pc, #24]	@ (8009b8c <CDC_Transmit_FS+0x48>)
 8009b72:	f7fe fb39 	bl	80081e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009b76:	4805      	ldr	r0, [pc, #20]	@ (8009b8c <CDC_Transmit_FS+0x48>)
 8009b78:	f7fe fb76 	bl	8008268 <USBD_CDC_TransmitPacket>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20000440 	.word	0x20000440

08009b90 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b087      	sub	sp, #28
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	371c      	adds	r7, #28
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
	...

08009bb4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	4603      	mov	r3, r0
 8009bbc:	6039      	str	r1, [r7, #0]
 8009bbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	2212      	movs	r2, #18
 8009bc4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009bc6:	4b03      	ldr	r3, [pc, #12]	@ (8009bd4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr
 8009bd4:	200000ec 	.word	0x200000ec

08009bd8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	6039      	str	r1, [r7, #0]
 8009be2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2204      	movs	r2, #4
 8009be8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009bea:	4b03      	ldr	r3, [pc, #12]	@ (8009bf8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	20000100 	.word	0x20000100

08009bfc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	4603      	mov	r3, r0
 8009c04:	6039      	str	r1, [r7, #0]
 8009c06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c08:	79fb      	ldrb	r3, [r7, #7]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d105      	bne.n	8009c1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	4907      	ldr	r1, [pc, #28]	@ (8009c30 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c12:	4808      	ldr	r0, [pc, #32]	@ (8009c34 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c14:	f7ff fdb4 	bl	8009780 <USBD_GetString>
 8009c18:	e004      	b.n	8009c24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	4904      	ldr	r1, [pc, #16]	@ (8009c30 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c1e:	4805      	ldr	r0, [pc, #20]	@ (8009c34 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c20:	f7ff fdae 	bl	8009780 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c24:	4b02      	ldr	r3, [pc, #8]	@ (8009c30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	2000171c 	.word	0x2000171c
 8009c34:	0800a58c 	.word	0x0800a58c

08009c38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	4603      	mov	r3, r0
 8009c40:	6039      	str	r1, [r7, #0]
 8009c42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c44:	683a      	ldr	r2, [r7, #0]
 8009c46:	4904      	ldr	r1, [pc, #16]	@ (8009c58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c48:	4804      	ldr	r0, [pc, #16]	@ (8009c5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c4a:	f7ff fd99 	bl	8009780 <USBD_GetString>
  return USBD_StrDesc;
 8009c4e:	4b02      	ldr	r3, [pc, #8]	@ (8009c58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	2000171c 	.word	0x2000171c
 8009c5c:	0800a5a4 	.word	0x0800a5a4

08009c60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	4603      	mov	r3, r0
 8009c68:	6039      	str	r1, [r7, #0]
 8009c6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	221a      	movs	r2, #26
 8009c70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c72:	f000 f843 	bl	8009cfc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c76:	4b02      	ldr	r3, [pc, #8]	@ (8009c80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	20000104 	.word	0x20000104

08009c84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	6039      	str	r1, [r7, #0]
 8009c8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c90:	79fb      	ldrb	r3, [r7, #7]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d105      	bne.n	8009ca2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c96:	683a      	ldr	r2, [r7, #0]
 8009c98:	4907      	ldr	r1, [pc, #28]	@ (8009cb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c9a:	4808      	ldr	r0, [pc, #32]	@ (8009cbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c9c:	f7ff fd70 	bl	8009780 <USBD_GetString>
 8009ca0:	e004      	b.n	8009cac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	4904      	ldr	r1, [pc, #16]	@ (8009cb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ca6:	4805      	ldr	r0, [pc, #20]	@ (8009cbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ca8:	f7ff fd6a 	bl	8009780 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cac:	4b02      	ldr	r3, [pc, #8]	@ (8009cb8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	2000171c 	.word	0x2000171c
 8009cbc:	0800a5b8 	.word	0x0800a5b8

08009cc0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	6039      	str	r1, [r7, #0]
 8009cca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ccc:	79fb      	ldrb	r3, [r7, #7]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d105      	bne.n	8009cde <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cd2:	683a      	ldr	r2, [r7, #0]
 8009cd4:	4907      	ldr	r1, [pc, #28]	@ (8009cf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cd6:	4808      	ldr	r0, [pc, #32]	@ (8009cf8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cd8:	f7ff fd52 	bl	8009780 <USBD_GetString>
 8009cdc:	e004      	b.n	8009ce8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	4904      	ldr	r1, [pc, #16]	@ (8009cf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ce2:	4805      	ldr	r0, [pc, #20]	@ (8009cf8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ce4:	f7ff fd4c 	bl	8009780 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ce8:	4b02      	ldr	r3, [pc, #8]	@ (8009cf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	2000171c 	.word	0x2000171c
 8009cf8:	0800a5c4 	.word	0x0800a5c4

08009cfc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d02:	4b0f      	ldr	r3, [pc, #60]	@ (8009d40 <Get_SerialNum+0x44>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d08:	4b0e      	ldr	r3, [pc, #56]	@ (8009d44 <Get_SerialNum+0x48>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8009d48 <Get_SerialNum+0x4c>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4413      	add	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d009      	beq.n	8009d36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d22:	2208      	movs	r2, #8
 8009d24:	4909      	ldr	r1, [pc, #36]	@ (8009d4c <Get_SerialNum+0x50>)
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 f814 	bl	8009d54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d2c:	2204      	movs	r2, #4
 8009d2e:	4908      	ldr	r1, [pc, #32]	@ (8009d50 <Get_SerialNum+0x54>)
 8009d30:	68b8      	ldr	r0, [r7, #8]
 8009d32:	f000 f80f 	bl	8009d54 <IntToUnicode>
  }
}
 8009d36:	bf00      	nop
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	1fff7a10 	.word	0x1fff7a10
 8009d44:	1fff7a14 	.word	0x1fff7a14
 8009d48:	1fff7a18 	.word	0x1fff7a18
 8009d4c:	20000106 	.word	0x20000106
 8009d50:	20000116 	.word	0x20000116

08009d54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b087      	sub	sp, #28
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d62:	2300      	movs	r3, #0
 8009d64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d66:	2300      	movs	r3, #0
 8009d68:	75fb      	strb	r3, [r7, #23]
 8009d6a:	e027      	b.n	8009dbc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	0f1b      	lsrs	r3, r3, #28
 8009d70:	2b09      	cmp	r3, #9
 8009d72:	d80b      	bhi.n	8009d8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	0f1b      	lsrs	r3, r3, #28
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	7dfb      	ldrb	r3, [r7, #23]
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	4619      	mov	r1, r3
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	440b      	add	r3, r1
 8009d84:	3230      	adds	r2, #48	@ 0x30
 8009d86:	b2d2      	uxtb	r2, r2
 8009d88:	701a      	strb	r2, [r3, #0]
 8009d8a:	e00a      	b.n	8009da2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	0f1b      	lsrs	r3, r3, #28
 8009d90:	b2da      	uxtb	r2, r3
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
 8009d94:	005b      	lsls	r3, r3, #1
 8009d96:	4619      	mov	r1, r3
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	440b      	add	r3, r1
 8009d9c:	3237      	adds	r2, #55	@ 0x37
 8009d9e:	b2d2      	uxtb	r2, r2
 8009da0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	011b      	lsls	r3, r3, #4
 8009da6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009da8:	7dfb      	ldrb	r3, [r7, #23]
 8009daa:	005b      	lsls	r3, r3, #1
 8009dac:	3301      	adds	r3, #1
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	4413      	add	r3, r2
 8009db2:	2200      	movs	r2, #0
 8009db4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009db6:	7dfb      	ldrb	r3, [r7, #23]
 8009db8:	3301      	adds	r3, #1
 8009dba:	75fb      	strb	r3, [r7, #23]
 8009dbc:	7dfa      	ldrb	r2, [r7, #23]
 8009dbe:	79fb      	ldrb	r3, [r7, #7]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d3d3      	bcc.n	8009d6c <IntToUnicode+0x18>
  }
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop
 8009dc8:	371c      	adds	r7, #28
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
	...

08009dd4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b08a      	sub	sp, #40	@ 0x28
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ddc:	f107 0314 	add.w	r3, r7, #20
 8009de0:	2200      	movs	r2, #0
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	605a      	str	r2, [r3, #4]
 8009de6:	609a      	str	r2, [r3, #8]
 8009de8:	60da      	str	r2, [r3, #12]
 8009dea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009df4:	d13a      	bne.n	8009e6c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009df6:	2300      	movs	r3, #0
 8009df8:	613b      	str	r3, [r7, #16]
 8009dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8009e74 <HAL_PCD_MspInit+0xa0>)
 8009dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8009e74 <HAL_PCD_MspInit+0xa0>)
 8009e00:	f043 0301 	orr.w	r3, r3, #1
 8009e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e06:	4b1b      	ldr	r3, [pc, #108]	@ (8009e74 <HAL_PCD_MspInit+0xa0>)
 8009e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	613b      	str	r3, [r7, #16]
 8009e10:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009e12:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e18:	2302      	movs	r3, #2
 8009e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e20:	2303      	movs	r3, #3
 8009e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e24:	230a      	movs	r3, #10
 8009e26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e28:	f107 0314 	add.w	r3, r7, #20
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	4812      	ldr	r0, [pc, #72]	@ (8009e78 <HAL_PCD_MspInit+0xa4>)
 8009e30:	f7f8 fd30 	bl	8002894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e34:	4b0f      	ldr	r3, [pc, #60]	@ (8009e74 <HAL_PCD_MspInit+0xa0>)
 8009e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e38:	4a0e      	ldr	r2, [pc, #56]	@ (8009e74 <HAL_PCD_MspInit+0xa0>)
 8009e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e3e:	6353      	str	r3, [r2, #52]	@ 0x34
 8009e40:	2300      	movs	r3, #0
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	4b0b      	ldr	r3, [pc, #44]	@ (8009e74 <HAL_PCD_MspInit+0xa0>)
 8009e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e48:	4a0a      	ldr	r2, [pc, #40]	@ (8009e74 <HAL_PCD_MspInit+0xa0>)
 8009e4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009e4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8009e50:	4b08      	ldr	r3, [pc, #32]	@ (8009e74 <HAL_PCD_MspInit+0xa0>)
 8009e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e58:	60fb      	str	r3, [r7, #12]
 8009e5a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	2100      	movs	r1, #0
 8009e60:	2043      	movs	r0, #67	@ 0x43
 8009e62:	f7f8 f964 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009e66:	2043      	movs	r0, #67	@ 0x43
 8009e68:	f7f8 f97d 	bl	8002166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009e6c:	bf00      	nop
 8009e6e:	3728      	adds	r7, #40	@ 0x28
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	40023800 	.word	0x40023800
 8009e78:	40020000 	.word	0x40020000

08009e7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009e90:	4619      	mov	r1, r3
 8009e92:	4610      	mov	r0, r2
 8009e94:	f7fe fb11 	bl	80084ba <USBD_LL_SetupStage>
}
 8009e98:	bf00      	nop
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009eb2:	78fa      	ldrb	r2, [r7, #3]
 8009eb4:	6879      	ldr	r1, [r7, #4]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	00db      	lsls	r3, r3, #3
 8009eba:	4413      	add	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	440b      	add	r3, r1
 8009ec0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	78fb      	ldrb	r3, [r7, #3]
 8009ec8:	4619      	mov	r1, r3
 8009eca:	f7fe fb4b 	bl	8008564 <USBD_LL_DataOutStage>
}
 8009ece:	bf00      	nop
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	460b      	mov	r3, r1
 8009ee0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009ee8:	78fa      	ldrb	r2, [r7, #3]
 8009eea:	6879      	ldr	r1, [r7, #4]
 8009eec:	4613      	mov	r3, r2
 8009eee:	00db      	lsls	r3, r3, #3
 8009ef0:	4413      	add	r3, r2
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	440b      	add	r3, r1
 8009ef6:	3320      	adds	r3, #32
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	78fb      	ldrb	r3, [r7, #3]
 8009efc:	4619      	mov	r1, r3
 8009efe:	f7fe fbe4 	bl	80086ca <USBD_LL_DataInStage>
}
 8009f02:	bf00      	nop
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b082      	sub	sp, #8
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fe fd1e 	bl	800895a <USBD_LL_SOF>
}
 8009f1e:	bf00      	nop
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b084      	sub	sp, #16
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	79db      	ldrb	r3, [r3, #7]
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d001      	beq.n	8009f3e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009f3a:	f7f7 f87d 	bl	8001038 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f44:	7bfa      	ldrb	r2, [r7, #15]
 8009f46:	4611      	mov	r1, r2
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7fe fcc2 	bl	80088d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fe fc6a 	bl	800882e <USBD_LL_Reset>
}
 8009f5a:	bf00      	nop
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
	...

08009f64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe fcbd 	bl	80088f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	6812      	ldr	r2, [r2, #0]
 8009f86:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009f8a:	f043 0301 	orr.w	r3, r3, #1
 8009f8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	7adb      	ldrb	r3, [r3, #11]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d005      	beq.n	8009fa4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f98:	4b04      	ldr	r3, [pc, #16]	@ (8009fac <HAL_PCD_SuspendCallback+0x48>)
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	4a03      	ldr	r2, [pc, #12]	@ (8009fac <HAL_PCD_SuspendCallback+0x48>)
 8009f9e:	f043 0306 	orr.w	r3, r3, #6
 8009fa2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	e000ed00 	.word	0xe000ed00

08009fb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fe fcb3 	bl	800892a <USBD_LL_Resume>
}
 8009fc4:	bf00      	nop
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009fde:	78fa      	ldrb	r2, [r7, #3]
 8009fe0:	4611      	mov	r1, r2
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7fe fd0b 	bl	80089fe <USBD_LL_IsoOUTIncomplete>
}
 8009fe8:	bf00      	nop
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a002:	78fa      	ldrb	r2, [r7, #3]
 800a004:	4611      	mov	r1, r2
 800a006:	4618      	mov	r0, r3
 800a008:	f7fe fcc7 	bl	800899a <USBD_LL_IsoINIncomplete>
}
 800a00c:	bf00      	nop
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a022:	4618      	mov	r0, r3
 800a024:	f7fe fd1d 	bl	8008a62 <USBD_LL_DevConnected>
}
 800a028:	bf00      	nop
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe fd1a 	bl	8008a78 <USBD_LL_DevDisconnected>
}
 800a044:	bf00      	nop
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d13c      	bne.n	800a0d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a05c:	4a20      	ldr	r2, [pc, #128]	@ (800a0e0 <USBD_LL_Init+0x94>)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a1e      	ldr	r2, [pc, #120]	@ (800a0e0 <USBD_LL_Init+0x94>)
 800a068:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a06c:	4b1c      	ldr	r3, [pc, #112]	@ (800a0e0 <USBD_LL_Init+0x94>)
 800a06e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a072:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a074:	4b1a      	ldr	r3, [pc, #104]	@ (800a0e0 <USBD_LL_Init+0x94>)
 800a076:	2204      	movs	r2, #4
 800a078:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a07a:	4b19      	ldr	r3, [pc, #100]	@ (800a0e0 <USBD_LL_Init+0x94>)
 800a07c:	2202      	movs	r2, #2
 800a07e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a080:	4b17      	ldr	r3, [pc, #92]	@ (800a0e0 <USBD_LL_Init+0x94>)
 800a082:	2200      	movs	r2, #0
 800a084:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a086:	4b16      	ldr	r3, [pc, #88]	@ (800a0e0 <USBD_LL_Init+0x94>)
 800a088:	2202      	movs	r2, #2
 800a08a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a08c:	4b14      	ldr	r3, [pc, #80]	@ (800a0e0 <USBD_LL_Init+0x94>)
 800a08e:	2200      	movs	r2, #0
 800a090:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a092:	4b13      	ldr	r3, [pc, #76]	@ (800a0e0 <USBD_LL_Init+0x94>)
 800a094:	2200      	movs	r2, #0
 800a096:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a098:	4b11      	ldr	r3, [pc, #68]	@ (800a0e0 <USBD_LL_Init+0x94>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a09e:	4b10      	ldr	r3, [pc, #64]	@ (800a0e0 <USBD_LL_Init+0x94>)
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a0a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a0e0 <USBD_LL_Init+0x94>)
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a0aa:	480d      	ldr	r0, [pc, #52]	@ (800a0e0 <USBD_LL_Init+0x94>)
 800a0ac:	f7f8 feec 	bl	8002e88 <HAL_PCD_Init>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a0b6:	f7f6 ffbf 	bl	8001038 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a0ba:	2180      	movs	r1, #128	@ 0x80
 800a0bc:	4808      	ldr	r0, [pc, #32]	@ (800a0e0 <USBD_LL_Init+0x94>)
 800a0be:	f7fa f918 	bl	80042f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a0c2:	2240      	movs	r2, #64	@ 0x40
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	4806      	ldr	r0, [pc, #24]	@ (800a0e0 <USBD_LL_Init+0x94>)
 800a0c8:	f7fa f8cc 	bl	8004264 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a0cc:	2280      	movs	r2, #128	@ 0x80
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	4803      	ldr	r0, [pc, #12]	@ (800a0e0 <USBD_LL_Init+0x94>)
 800a0d2:	f7fa f8c7 	bl	8004264 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	2000191c 	.word	0x2000191c

0800a0e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7f8 ffd3 	bl	80030a6 <HAL_PCD_Start>
 800a100:	4603      	mov	r3, r0
 800a102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	4618      	mov	r0, r3
 800a108:	f000 f942 	bl	800a390 <USBD_Get_USB_Status>
 800a10c:	4603      	mov	r3, r0
 800a10e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a110:	7bbb      	ldrb	r3, [r7, #14]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	4608      	mov	r0, r1
 800a124:	4611      	mov	r1, r2
 800a126:	461a      	mov	r2, r3
 800a128:	4603      	mov	r3, r0
 800a12a:	70fb      	strb	r3, [r7, #3]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70bb      	strb	r3, [r7, #2]
 800a130:	4613      	mov	r3, r2
 800a132:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a138:	2300      	movs	r3, #0
 800a13a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a142:	78bb      	ldrb	r3, [r7, #2]
 800a144:	883a      	ldrh	r2, [r7, #0]
 800a146:	78f9      	ldrb	r1, [r7, #3]
 800a148:	f7f9 fca7 	bl	8003a9a <HAL_PCD_EP_Open>
 800a14c:	4603      	mov	r3, r0
 800a14e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	4618      	mov	r0, r3
 800a154:	f000 f91c 	bl	800a390 <USBD_Get_USB_Status>
 800a158:	4603      	mov	r3, r0
 800a15a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a15c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b084      	sub	sp, #16
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	460b      	mov	r3, r1
 800a170:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a180:	78fa      	ldrb	r2, [r7, #3]
 800a182:	4611      	mov	r1, r2
 800a184:	4618      	mov	r0, r3
 800a186:	f7f9 fcf2 	bl	8003b6e <HAL_PCD_EP_Close>
 800a18a:	4603      	mov	r3, r0
 800a18c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a18e:	7bfb      	ldrb	r3, [r7, #15]
 800a190:	4618      	mov	r0, r3
 800a192:	f000 f8fd 	bl	800a390 <USBD_Get_USB_Status>
 800a196:	4603      	mov	r3, r0
 800a198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a19a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a1be:	78fa      	ldrb	r2, [r7, #3]
 800a1c0:	4611      	mov	r1, r2
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7f9 fdaa 	bl	8003d1c <HAL_PCD_EP_SetStall>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 f8de 	bl	800a390 <USBD_Get_USB_Status>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b084      	sub	sp, #16
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a1fc:	78fa      	ldrb	r2, [r7, #3]
 800a1fe:	4611      	mov	r1, r2
 800a200:	4618      	mov	r0, r3
 800a202:	f7f9 fdee 	bl	8003de2 <HAL_PCD_EP_ClrStall>
 800a206:	4603      	mov	r3, r0
 800a208:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a20a:	7bfb      	ldrb	r3, [r7, #15]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 f8bf 	bl	800a390 <USBD_Get_USB_Status>
 800a212:	4603      	mov	r3, r0
 800a214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a216:	7bbb      	ldrb	r3, [r7, #14]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	460b      	mov	r3, r1
 800a22a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a232:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	da0b      	bge.n	800a254 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a23c:	78fb      	ldrb	r3, [r7, #3]
 800a23e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a242:	68f9      	ldr	r1, [r7, #12]
 800a244:	4613      	mov	r3, r2
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	4413      	add	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	440b      	add	r3, r1
 800a24e:	3316      	adds	r3, #22
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	e00b      	b.n	800a26c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a25a:	68f9      	ldr	r1, [r7, #12]
 800a25c:	4613      	mov	r3, r2
 800a25e:	00db      	lsls	r3, r3, #3
 800a260:	4413      	add	r3, r2
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	440b      	add	r3, r1
 800a266:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a26a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3714      	adds	r7, #20
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a292:	78fa      	ldrb	r2, [r7, #3]
 800a294:	4611      	mov	r1, r2
 800a296:	4618      	mov	r0, r3
 800a298:	f7f9 fbdb 	bl	8003a52 <HAL_PCD_SetAddress>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 f874 	bl	800a390 <USBD_Get_USB_Status>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b086      	sub	sp, #24
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	60f8      	str	r0, [r7, #12]
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	603b      	str	r3, [r7, #0]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a2d4:	7af9      	ldrb	r1, [r7, #11]
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	f7f9 fce5 	bl	8003ca8 <HAL_PCD_EP_Transmit>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e2:	7dfb      	ldrb	r3, [r7, #23]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 f853 	bl	800a390 <USBD_Get_USB_Status>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3718      	adds	r7, #24
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	607a      	str	r2, [r7, #4]
 800a302:	603b      	str	r3, [r7, #0]
 800a304:	460b      	mov	r3, r1
 800a306:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a316:	7af9      	ldrb	r1, [r7, #11]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	f7f9 fc71 	bl	8003c02 <HAL_PCD_EP_Receive>
 800a320:	4603      	mov	r3, r0
 800a322:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a324:	7dfb      	ldrb	r3, [r7, #23]
 800a326:	4618      	mov	r0, r3
 800a328:	f000 f832 	bl	800a390 <USBD_Get_USB_Status>
 800a32c:	4603      	mov	r3, r0
 800a32e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a330:	7dbb      	ldrb	r3, [r7, #22]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3718      	adds	r7, #24
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b082      	sub	sp, #8
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	460b      	mov	r3, r1
 800a344:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a34c:	78fa      	ldrb	r2, [r7, #3]
 800a34e:	4611      	mov	r1, r2
 800a350:	4618      	mov	r0, r3
 800a352:	f7f9 fc91 	bl	8003c78 <HAL_PCD_EP_GetRxCount>
 800a356:	4603      	mov	r3, r0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a368:	4b03      	ldr	r3, [pc, #12]	@ (800a378 <USBD_static_malloc+0x18>)
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	20001e00 	.word	0x20001e00

0800a37c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]

}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a39a:	2300      	movs	r3, #0
 800a39c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a39e:	79fb      	ldrb	r3, [r7, #7]
 800a3a0:	2b03      	cmp	r3, #3
 800a3a2:	d817      	bhi.n	800a3d4 <USBD_Get_USB_Status+0x44>
 800a3a4:	a201      	add	r2, pc, #4	@ (adr r2, 800a3ac <USBD_Get_USB_Status+0x1c>)
 800a3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3aa:	bf00      	nop
 800a3ac:	0800a3bd 	.word	0x0800a3bd
 800a3b0:	0800a3c3 	.word	0x0800a3c3
 800a3b4:	0800a3c9 	.word	0x0800a3c9
 800a3b8:	0800a3cf 	.word	0x0800a3cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c0:	e00b      	b.n	800a3da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c6:	e008      	b.n	800a3da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a3cc:	e005      	b.n	800a3da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d2:	e002      	b.n	800a3da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d8:	bf00      	nop
  }
  return usb_status;
 800a3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <memset>:
 800a3e8:	4402      	add	r2, r0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d100      	bne.n	800a3f2 <memset+0xa>
 800a3f0:	4770      	bx	lr
 800a3f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a3f6:	e7f9      	b.n	800a3ec <memset+0x4>

0800a3f8 <strncmp>:
 800a3f8:	b510      	push	{r4, lr}
 800a3fa:	b16a      	cbz	r2, 800a418 <strncmp+0x20>
 800a3fc:	3901      	subs	r1, #1
 800a3fe:	1884      	adds	r4, r0, r2
 800a400:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a404:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a408:	429a      	cmp	r2, r3
 800a40a:	d103      	bne.n	800a414 <strncmp+0x1c>
 800a40c:	42a0      	cmp	r0, r4
 800a40e:	d001      	beq.n	800a414 <strncmp+0x1c>
 800a410:	2a00      	cmp	r2, #0
 800a412:	d1f5      	bne.n	800a400 <strncmp+0x8>
 800a414:	1ad0      	subs	r0, r2, r3
 800a416:	bd10      	pop	{r4, pc}
 800a418:	4610      	mov	r0, r2
 800a41a:	e7fc      	b.n	800a416 <strncmp+0x1e>

0800a41c <__libc_init_array>:
 800a41c:	b570      	push	{r4, r5, r6, lr}
 800a41e:	4d0d      	ldr	r5, [pc, #52]	@ (800a454 <__libc_init_array+0x38>)
 800a420:	4c0d      	ldr	r4, [pc, #52]	@ (800a458 <__libc_init_array+0x3c>)
 800a422:	1b64      	subs	r4, r4, r5
 800a424:	10a4      	asrs	r4, r4, #2
 800a426:	2600      	movs	r6, #0
 800a428:	42a6      	cmp	r6, r4
 800a42a:	d109      	bne.n	800a440 <__libc_init_array+0x24>
 800a42c:	4d0b      	ldr	r5, [pc, #44]	@ (800a45c <__libc_init_array+0x40>)
 800a42e:	4c0c      	ldr	r4, [pc, #48]	@ (800a460 <__libc_init_array+0x44>)
 800a430:	f000 f818 	bl	800a464 <_init>
 800a434:	1b64      	subs	r4, r4, r5
 800a436:	10a4      	asrs	r4, r4, #2
 800a438:	2600      	movs	r6, #0
 800a43a:	42a6      	cmp	r6, r4
 800a43c:	d105      	bne.n	800a44a <__libc_init_array+0x2e>
 800a43e:	bd70      	pop	{r4, r5, r6, pc}
 800a440:	f855 3b04 	ldr.w	r3, [r5], #4
 800a444:	4798      	blx	r3
 800a446:	3601      	adds	r6, #1
 800a448:	e7ee      	b.n	800a428 <__libc_init_array+0xc>
 800a44a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a44e:	4798      	blx	r3
 800a450:	3601      	adds	r6, #1
 800a452:	e7f2      	b.n	800a43a <__libc_init_array+0x1e>
 800a454:	0800a5fc 	.word	0x0800a5fc
 800a458:	0800a5fc 	.word	0x0800a5fc
 800a45c:	0800a5fc 	.word	0x0800a5fc
 800a460:	0800a600 	.word	0x0800a600

0800a464 <_init>:
 800a464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a466:	bf00      	nop
 800a468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a46a:	bc08      	pop	{r3}
 800a46c:	469e      	mov	lr, r3
 800a46e:	4770      	bx	lr

0800a470 <_fini>:
 800a470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a472:	bf00      	nop
 800a474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a476:	bc08      	pop	{r3}
 800a478:	469e      	mov	lr, r3
 800a47a:	4770      	bx	lr
