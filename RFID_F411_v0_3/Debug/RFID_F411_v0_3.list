
RFID_F411_v0_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d40  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004ed8  08004ed8  00005ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fec  08004fec  00006030  2**0
                  CONTENTS
  4 .ARM          00000008  08004fec  08004fec  00005fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ff4  08004ff4  00006030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ff4  08004ff4  00005ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ff8  08004ff8  00005ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08004ffc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000030  0800502c  00006030  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  2000034c  0800502c  0000634c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef6a  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b7  00000000  00000000  00014fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00017888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a31  00000000  00000000  000185b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001732e  00000000  00000000  00018fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130da  00000000  00000000  00030317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa7c  00000000  00000000  000433f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cde6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000353c  00000000  00000000  000cdeb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000d13ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000030 	.word	0x20000030
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004ec0 	.word	0x08004ec0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000034 	.word	0x20000034
 80001d4:	08004ec0 	.word	0x08004ec0

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	4b10      	ldr	r3, [pc, #64]	@ (8000538 <MX_DMA_Init+0x4c>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000538 <MX_DMA_Init+0x4c>)
 80004fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000500:	6313      	str	r3, [r2, #48]	@ 0x30
 8000502:	4b0d      	ldr	r3, [pc, #52]	@ (8000538 <MX_DMA_Init+0x4c>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	2039      	movs	r0, #57	@ 0x39
 8000514:	f001 fdff 	bl	8002116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000518:	2039      	movs	r0, #57	@ 0x39
 800051a:	f001 fe18 	bl	800214e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	2045      	movs	r0, #69	@ 0x45
 8000524:	f001 fdf7 	bl	8002116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000528:	2045      	movs	r0, #69	@ 0x45
 800052a:	f001 fe10 	bl	800214e <HAL_NVIC_EnableIRQ>

}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40023800 	.word	0x40023800

0800053c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	@ 0x28
 8000540:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
 8000556:	4b60      	ldr	r3, [pc, #384]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a5f      	ldr	r2, [pc, #380]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 800055c:	f043 0304 	orr.w	r3, r3, #4
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b5d      	ldr	r3, [pc, #372]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	4b59      	ldr	r3, [pc, #356]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	4a58      	ldr	r2, [pc, #352]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 8000578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800057c:	6313      	str	r3, [r2, #48]	@ 0x30
 800057e:	4b56      	ldr	r3, [pc, #344]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	4b52      	ldr	r3, [pc, #328]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	4a51      	ldr	r2, [pc, #324]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6313      	str	r3, [r2, #48]	@ 0x30
 800059a:	4b4f      	ldr	r3, [pc, #316]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4b4b      	ldr	r3, [pc, #300]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a4a      	ldr	r2, [pc, #296]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 80005b0:	f043 0302 	orr.w	r3, r3, #2
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b48      	ldr	r3, [pc, #288]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0302 	and.w	r3, r3, #2
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	4b44      	ldr	r3, [pc, #272]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a43      	ldr	r2, [pc, #268]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 80005cc:	f043 0308 	orr.w	r3, r3, #8
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b41      	ldr	r3, [pc, #260]	@ (80006d8 <MX_GPIO_Init+0x19c>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0308 	and.w	r3, r3, #8
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|BL1_Pin|ST_BLUE_Pin|ST_GREEN_Pin
 80005de:	2200      	movs	r2, #0
 80005e0:	f643 4110 	movw	r1, #15376	@ 0x3c10
 80005e4:	483d      	ldr	r0, [pc, #244]	@ (80006dc <MX_GPIO_Init+0x1a0>)
 80005e6:	f002 fae5 	bl	8002bb4 <HAL_GPIO_WritePin>
                          |ST_YELLOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|Hirata_NG_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f248 0110 	movw	r1, #32784	@ 0x8010
 80005f0:	483b      	ldr	r0, [pc, #236]	@ (80006e0 <MX_GPIO_Init+0x1a4>)
 80005f2:	f002 fadf 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|D32_Pin|BL2_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f243 0101 	movw	r1, #12289	@ 0x3001
 80005fc:	4839      	ldr	r0, [pc, #228]	@ (80006e4 <MX_GPIO_Init+0x1a8>)
 80005fe:	f002 fad9 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST_RED_GPIO_Port, ST_RED_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2104      	movs	r1, #4
 8000606:	4838      	ldr	r0, [pc, #224]	@ (80006e8 <MX_GPIO_Init+0x1ac>)
 8000608:	f002 fad4 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|BL1_Pin|ST_BLUE_Pin|ST_GREEN_Pin
 800060c:	f643 4310 	movw	r3, #15376	@ 0x3c10
 8000610:	617b      	str	r3, [r7, #20]
                          |ST_YELLOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	482d      	ldr	r0, [pc, #180]	@ (80006dc <MX_GPIO_Init+0x1a0>)
 8000626:	f002 f929 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = P_Sensor_Pin|PASS_SW_Pin;
 800062a:	2303      	movs	r3, #3
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	4828      	ldr	r0, [pc, #160]	@ (80006e0 <MX_GPIO_Init+0x1a4>)
 800063e:	f002 f91d 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000642:	2310      	movs	r3, #16
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	4821      	ldr	r0, [pc, #132]	@ (80006e0 <MX_GPIO_Init+0x1a4>)
 800065a:	f002 f90f 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|D32_Pin|BL2_Pin;
 800065e:	f243 0301 	movw	r3, #12289	@ 0x3001
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	481b      	ldr	r0, [pc, #108]	@ (80006e4 <MX_GPIO_Init+0x1a8>)
 8000678:	f002 f900 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ADDR4_Pin|ADDR3_Pin|ADDR2_Pin|ADDR1_Pin
 800067c:	f44f 734d 	mov.w	r3, #820	@ 0x334
 8000680:	617b      	str	r3, [r7, #20]
                          |ADDR0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	4814      	ldr	r0, [pc, #80]	@ (80006e4 <MX_GPIO_Init+0x1a8>)
 8000692:	f002 f8f3 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Hirata_NG_Pin;
 8000696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Hirata_NG_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	480c      	ldr	r0, [pc, #48]	@ (80006e0 <MX_GPIO_Init+0x1a4>)
 80006b0:	f002 f8e4 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ST_RED_Pin;
 80006b4:	2304      	movs	r3, #4
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST_RED_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	4807      	ldr	r0, [pc, #28]	@ (80006e8 <MX_GPIO_Init+0x1ac>)
 80006cc:	f002 f8d6 	bl	800287c <HAL_GPIO_Init>

}
 80006d0:	bf00      	nop
 80006d2:	3728      	adds	r7, #40	@ 0x28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40020000 	.word	0x40020000
 80006e4:	40020400 	.word	0x40020400
 80006e8:	40020c00 	.word	0x40020c00

080006ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <MX_I2C1_Init+0x50>)
 80006f2:	4a13      	ldr	r2, [pc, #76]	@ (8000740 <MX_I2C1_Init+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_I2C1_Init+0x50>)
 80006f8:	4a12      	ldr	r2, [pc, #72]	@ (8000744 <MX_I2C1_Init+0x58>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_I2C1_Init+0x50>)
 800070a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	@ (800073c <MX_I2C1_Init+0x50>)
 800072a:	f002 fa5d 	bl	8002be8 <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 fc7e 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000004c 	.word	0x2000004c
 8000740:	40005400 	.word	0x40005400
 8000744:	000186a0 	.word	0x000186a0

08000748 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	@ 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a19      	ldr	r2, [pc, #100]	@ (80007cc <HAL_I2C_MspInit+0x84>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d12b      	bne.n	80007c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a17      	ldr	r2, [pc, #92]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000786:	23c0      	movs	r3, #192	@ 0xc0
 8000788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800078a:	2312      	movs	r3, #18
 800078c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000796:	2304      	movs	r3, #4
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <HAL_I2C_MspInit+0x8c>)
 80007a2:	f002 f86b 	bl	800287c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ae:	4a08      	ldr	r2, [pc, #32]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 80007b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	@ 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40005400 	.word	0x40005400
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020400 	.word	0x40020400

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007dc:	f001 fb2a 	bl	8001e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e0:	f000 f870 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e4:	f7ff feaa 	bl	800053c <MX_GPIO_Init>
  MX_DMA_Init();
 80007e8:	f7ff fe80 	bl	80004ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007ec:	f001 f984 	bl	8001af8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80007f0:	f001 f84c 	bl	800188c <MX_SPI1_Init>
  MX_I2C1_Init();
 80007f4:	f7ff ff7a 	bl	80006ec <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80007f8:	f001 f954 	bl	8001aa4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80007fc:	f001 f9a6 	bl	8001b4c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //ledy wylaczone
  HAL_GPIO_WritePin(ST_RED_GPIO_Port, ST_RED_Pin, GPIO_PIN_SET);	//error
 8000800:	2201      	movs	r2, #1
 8000802:	2104      	movs	r1, #4
 8000804:	4823      	ldr	r0, [pc, #140]	@ (8000894 <main+0xbc>)
 8000806:	f002 f9d5 	bl	8002bb4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(ST_BLUE_GPIO_Port, ST_BLUE_Pin, GPIO_PIN_SET);	//other
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000810:	4821      	ldr	r0, [pc, #132]	@ (8000898 <main+0xc0>)
 8000812:	f002 f9cf 	bl	8002bb4 <HAL_GPIO_WritePin>

  UART_Log("RFID ver. 0.3\n\r");
 8000816:	4821      	ldr	r0, [pc, #132]	@ (800089c <main+0xc4>)
 8000818:	f000 f8ec 	bl	80009f4 <UART_Log>
  ADDR_Check();
 800081c:	f000 f98a 	bl	8000b34 <ADDR_Check>
  send_buffer[3] = slave_addr[0];
 8000820:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <main+0xc8>)
 8000822:	781a      	ldrb	r2, [r3, #0]
 8000824:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <main+0xcc>)
 8000826:	70da      	strb	r2, [r3, #3]
  send_buffer[4] = slave_addr[1];
 8000828:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <main+0xc8>)
 800082a:	785a      	ldrb	r2, [r3, #1]
 800082c:	4b1d      	ldr	r3, [pc, #116]	@ (80008a4 <main+0xcc>)
 800082e:	711a      	strb	r2, [r3, #4]
  HAL_Delay(1500);
 8000830:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000834:	f001 fb70 	bl	8001f18 <HAL_Delay>

  HAL_GPIO_WritePin(ST_RED_GPIO_Port, ST_RED_Pin, GPIO_PIN_RESET);	//error
 8000838:	2200      	movs	r2, #0
 800083a:	2104      	movs	r1, #4
 800083c:	4815      	ldr	r0, [pc, #84]	@ (8000894 <main+0xbc>)
 800083e:	f002 f9b9 	bl	8002bb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ST_BLUE_GPIO_Port, ST_BLUE_Pin, GPIO_PIN_RESET);	//other
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000848:	4813      	ldr	r0, [pc, #76]	@ (8000898 <main+0xc0>)
 800084a:	f002 f9b3 	bl	8002bb4 <HAL_GPIO_WritePin>



  //send_status_buffer = "AT_00_"

  HAL_UART_Receive_IT(&huart6, &rx_data_temp, 1);
 800084e:	2201      	movs	r2, #1
 8000850:	4915      	ldr	r1, [pc, #84]	@ (80008a8 <main+0xd0>)
 8000852:	4816      	ldr	r0, [pc, #88]	@ (80008ac <main+0xd4>)
 8000854:	f003 fb8d 	bl	8003f72 <HAL_UART_Receive_IT>
  //send_buffer[24] = ('\n');
  UART_Log("INIT OK...\n\r");
 8000858:	4815      	ldr	r0, [pc, #84]	@ (80008b0 <main+0xd8>)
 800085a:	f000 f8cb 	bl	80009f4 <UART_Log>
	  //if(sw_pass_s == true)
	  //{
		  //pass
		  //HAL_UART_Receive_DMA(&huart6, &rx_data, 4);
		  //UART_Log("SW_PASS status = PASS\n\r");
		  send_buffer[6] = 'P';
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <main+0xcc>)
 8000860:	2250      	movs	r2, #80	@ 0x50
 8000862:	719a      	strb	r2, [r3, #6]
		  read_flag = 1;
 8000864:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <main+0xdc>)
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
		  RFID_Read();
 800086a:	f000 f8ef 	bl	8000a4c <RFID_Read>
			 // {
				//  sw_status = 0; //BYPASS
				 // send_buffer[6] = 'B';
				 // UART_Log("SW_PASS status = BYPASS\n\r");

				  if(ReceviedLines > 0)
 800086e:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <main+0xe0>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0f3      	beq.n	800085e <main+0x86>
				 	  {
				 		  // Take one line from the Ring Buffer to work-buffer
				 		  Parser_TakeLine(&rx_data, ReceivedData);
 8000876:	4911      	ldr	r1, [pc, #68]	@ (80008bc <main+0xe4>)
 8000878:	4811      	ldr	r0, [pc, #68]	@ (80008c0 <main+0xe8>)
 800087a:	f000 fc0d 	bl	8001098 <Parser_TakeLine>

				 		  // Decrement complete lines counter
				 		  ReceviedLines--;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <main+0xe0>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	3b01      	subs	r3, #1
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <main+0xe0>)
 8000888:	701a      	strb	r2, [r3, #0]

				 		  // Run the parser with work-buffer
				 		  Parser_Parse(ReceivedData);
 800088a:	480c      	ldr	r0, [pc, #48]	@ (80008bc <main+0xe4>)
 800088c:	f000 fc2a 	bl	80010e4 <Parser_Parse>
		  send_buffer[6] = 'P';
 8000890:	e7e5      	b.n	800085e <main+0x86>
 8000892:	bf00      	nop
 8000894:	40020c00 	.word	0x40020c00
 8000898:	40020800 	.word	0x40020800
 800089c:	08004ed8 	.word	0x08004ed8
 80008a0:	200000d0 	.word	0x200000d0
 80008a4:	20000008 	.word	0x20000008
 80008a8:	20000114 	.word	0x20000114
 80008ac:	20000240 	.word	0x20000240
 80008b0:	08004ee8 	.word	0x08004ee8
 80008b4:	20000006 	.word	0x20000006
 80008b8:	20000115 	.word	0x20000115
 80008bc:	20000118 	.word	0x20000118
 80008c0:	200000d4 	.word	0x200000d4

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	@ 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	2230      	movs	r2, #48	@ 0x30
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 fac8 	bl	8004e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	4b27      	ldr	r3, [pc, #156]	@ (800098c <SystemClock_Config+0xc8>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	4a26      	ldr	r2, [pc, #152]	@ (800098c <SystemClock_Config+0xc8>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f8:	4b24      	ldr	r3, [pc, #144]	@ (800098c <SystemClock_Config+0xc8>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <SystemClock_Config+0xcc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a20      	ldr	r2, [pc, #128]	@ (8000990 <SystemClock_Config+0xcc>)
 800090e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <SystemClock_Config+0xcc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000920:	2301      	movs	r3, #1
 8000922:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000924:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092a:	2302      	movs	r3, #2
 800092c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000934:	2304      	movs	r3, #4
 8000936:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000938:	23a8      	movs	r3, #168	@ 0xa8
 800093a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800093c:	2304      	movs	r3, #4
 800093e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000940:	2307      	movs	r3, #7
 8000942:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 0320 	add.w	r3, r7, #32
 8000948:	4618      	mov	r0, r3
 800094a:	f002 fa91 	bl	8002e70 <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000954:	f000 fb6e 	bl	8001034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095c:	2302      	movs	r3, #2
 800095e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000964:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	2102      	movs	r1, #2
 8000974:	4618      	mov	r0, r3
 8000976:	f002 fcf3 	bl	8003360 <HAL_RCC_ClockConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000980:	f000 fb58 	bl	8001034 <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	3750      	adds	r7, #80	@ 0x50
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	40007000 	.word	0x40007000

08000994 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART6)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0f      	ldr	r2, [pc, #60]	@ (80009e0 <HAL_UART_RxCpltCallback+0x4c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d117      	bne.n	80009d6 <HAL_UART_RxCpltCallback+0x42>
		//RB_Write(&rx_data, rx_data_temp);
		//HAL_UART_Receive_IT(&huart6, &rx_data_temp, 1);


		// Try to write into the Ring Buffer
		if(RB_OK == RB_Write(&rx_data, rx_data_temp))
 80009a6:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <HAL_UART_RxCpltCallback+0x50>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	4619      	mov	r1, r3
 80009ac:	480e      	ldr	r0, [pc, #56]	@ (80009e8 <HAL_UART_RxCpltCallback+0x54>)
 80009ae:	f000 ff32 	bl	8001816 <RB_Write>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d109      	bne.n	80009cc <HAL_UART_RxCpltCallback+0x38>
		{
			// Check if current byte is the endline char
			if(rx_data_temp == ENDLINE)
 80009b8:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <HAL_UART_RxCpltCallback+0x50>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b0a      	cmp	r3, #10
 80009be:	d105      	bne.n	80009cc <HAL_UART_RxCpltCallback+0x38>
			{
				// Increment complete lines
				ReceviedLines++;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <HAL_UART_RxCpltCallback+0x58>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	3301      	adds	r3, #1
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <HAL_UART_RxCpltCallback+0x58>)
 80009ca:	701a      	strb	r2, [r3, #0]
		//if(rx_data[31] != 0)
		//{
		//	RB_Flush(&rx_data);
		//}
		// Start to listening UART again - important!
		HAL_UART_Receive_IT(&huart6, &rx_data_temp, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	4905      	ldr	r1, [pc, #20]	@ (80009e4 <HAL_UART_RxCpltCallback+0x50>)
 80009d0:	4807      	ldr	r0, [pc, #28]	@ (80009f0 <HAL_UART_RxCpltCallback+0x5c>)
 80009d2:	f003 face 	bl	8003f72 <HAL_UART_Receive_IT>


	}
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40011400 	.word	0x40011400
 80009e4:	20000114 	.word	0x20000114
 80009e8:	200000d4 	.word	0x200000d4
 80009ec:	20000115 	.word	0x20000115
 80009f0:	20000240 	.word	0x20000240

080009f4 <UART_Log>:

void UART_Log(char* Message1)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)Message1, strlen(Message1), 1000);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff fbf5 	bl	80001ec <strlen>
 8000a02:	4603      	mov	r3, r0
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	4803      	ldr	r0, [pc, #12]	@ (8000a1c <UART_Log+0x28>)
 8000a0e:	f003 fa25 	bl	8003e5c <HAL_UART_Transmit>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200001f8 	.word	0x200001f8

08000a20 <RS_Transmit>:


void RS_Transmit(char* Message)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit_IT(&huart6, (uint8_t*)Message, strlen(Message));
	HAL_UART_Transmit(&huart6, (uint8_t*)Message, strlen(Message), 1000);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff fbdf 	bl	80001ec <strlen>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <RS_Transmit+0x28>)
 8000a3a:	f003 fa0f 	bl	8003e5c <HAL_UART_Transmit>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000240 	.word	0x20000240

08000a4c <RFID_Read>:


void RFID_Read()
{
 8000a4c:	b598      	push	{r3, r4, r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	  MFRC522_Init();
 8000a50:	f000 fc2a 	bl	80012a8 <MFRC522_Init>
	  	HAL_Delay(5);
 8000a54:	2005      	movs	r0, #5
 8000a56:	f001 fa5f 	bl	8001f18 <HAL_Delay>
	request_status = MFRC522_Request(PICC_REQIDL, str);
 8000a5a:	492b      	ldr	r1, [pc, #172]	@ (8000b08 <RFID_Read+0xbc>)
 8000a5c:	2026      	movs	r0, #38	@ 0x26
 8000a5e:	f000 fd1a 	bl	8001496 <MFRC522_Request>
 8000a62:	4603      	mov	r3, r0
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b29      	ldr	r3, [pc, #164]	@ (8000b0c <RFID_Read+0xc0>)
 8000a68:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(5);

	if(request_status == 0){
 8000a6a:	4b28      	ldr	r3, [pc, #160]	@ (8000b0c <RFID_Read+0xc0>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d148      	bne.n	8000b04 <RFID_Read+0xb8>
		request_status = 2;
 8000a72:	4b26      	ldr	r3, [pc, #152]	@ (8000b0c <RFID_Read+0xc0>)
 8000a74:	2202      	movs	r2, #2
 8000a76:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(ST_BLUE_GPIO_Port, ST_BLUE_Pin, GPIO_PIN_SET);	//other
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a7e:	4824      	ldr	r0, [pc, #144]	@ (8000b10 <RFID_Read+0xc4>)
 8000a80:	f002 f898 	bl	8002bb4 <HAL_GPIO_WritePin>
		//HAL_Delay(5);
	anticoll_status = MFRC522_Anticoll(str);
 8000a84:	4820      	ldr	r0, [pc, #128]	@ (8000b08 <RFID_Read+0xbc>)
 8000a86:	f000 fd2b 	bl	80014e0 <MFRC522_Anticoll>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b21      	ldr	r3, [pc, #132]	@ (8000b14 <RFID_Read+0xc8>)
 8000a90:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(5);
	selecttag_status = MFRC522_SelectTag(str);
 8000a92:	481d      	ldr	r0, [pc, #116]	@ (8000b08 <RFID_Read+0xbc>)
 8000a94:	f000 fdaa 	bl	80015ec <MFRC522_SelectTag>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b18 <RFID_Read+0xcc>)
 8000a9e:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(5);

	auth_status = MFRC522_Auth(0x60,20,sectorkey,str);
 8000aa0:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <RFID_Read+0xbc>)
 8000aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b1c <RFID_Read+0xd0>)
 8000aa4:	2114      	movs	r1, #20
 8000aa6:	2060      	movs	r0, #96	@ 0x60
 8000aa8:	f000 fde2 	bl	8001670 <MFRC522_Auth>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <RFID_Read+0xd4>)
 8000ab2:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(5);

	//if(auth_status == 0){
	read_status = MFRC522_Read(20, rec);
 8000ab4:	491b      	ldr	r1, [pc, #108]	@ (8000b24 <RFID_Read+0xd8>)
 8000ab6:	2014      	movs	r0, #20
 8000ab8:	f000 fe3d 	bl	8001736 <MFRC522_Read>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <RFID_Read+0xdc>)
 8000ac2:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(5);
	MFRC522_Halt();
 8000ac4:	f000 fe63 	bl	800178e <MFRC522_Halt>



	//if(read_status == 0)
	//	{
		 HAL_GPIO_WritePin(ST_BLUE_GPIO_Port, ST_BLUE_Pin, GPIO_PIN_SET);	//other
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ace:	4810      	ldr	r0, [pc, #64]	@ (8000b10 <RFID_Read+0xc4>)
 8000ad0:	f002 f870 	bl	8002bb4 <HAL_GPIO_WritePin>
			memcpy(rec_data, rec, 14);
 8000ad4:	4a15      	ldr	r2, [pc, #84]	@ (8000b2c <RFID_Read+0xe0>)
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <RFID_Read+0xd8>)
 8000ad8:	4614      	mov	r4, r2
 8000ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000adc:	c407      	stmia	r4!, {r0, r1, r2}
 8000ade:	8023      	strh	r3, [r4, #0]
			//UART_Log("Read Tag: ");
			//UART_Log(rec_data);
			//UART_Log("\n\r");

			send_buffer[20] = rec_data[10];
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <RFID_Read+0xe0>)
 8000ae2:	7a9a      	ldrb	r2, [r3, #10]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <RFID_Read+0xe4>)
 8000ae6:	751a      	strb	r2, [r3, #20]
			send_buffer[22] = rec_data[12];
 8000ae8:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <RFID_Read+0xe0>)
 8000aea:	7b1a      	ldrb	r2, [r3, #12]
 8000aec:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <RFID_Read+0xe4>)
 8000aee:	759a      	strb	r2, [r3, #22]
			send_buffer[23] = rec_data[13];
 8000af0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <RFID_Read+0xe0>)
 8000af2:	7b5a      	ldrb	r2, [r3, #13]
 8000af4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <RFID_Read+0xe4>)
 8000af6:	75da      	strb	r2, [r3, #23]
//			send_buffer[12] = rec_data[10];
//			send_buffer[13] = rec_data[11];
//			send_buffer[14] = rec_data[12];
//			send_buffer[15] = rec_data[13];
			// HAL_GPIO_WritePin(ST_BLUE_GPIO_Port, ST_BLUE_Pin, GPIO_PIN_RESET);	//other
			HAL_GPIO_WritePin(ST_BLUE_GPIO_Port, ST_BLUE_Pin, GPIO_PIN_RESET);	//other
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000afe:	4804      	ldr	r0, [pc, #16]	@ (8000b10 <RFID_Read+0xc4>)
 8000b00:	f002 f858 	bl	8002bb4 <HAL_GPIO_WritePin>
		}
	//MFRC522_Halt();
		//HAL_Delay(1);

}
 8000b04:	bf00      	nop
 8000b06:	bd98      	pop	{r3, r4, r7, pc}
 8000b08:	200000a8 	.word	0x200000a8
 8000b0c:	200000a0 	.word	0x200000a0
 8000b10:	40020800 	.word	0x40020800
 8000b14:	200000a1 	.word	0x200000a1
 8000b18:	200000a2 	.word	0x200000a2
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	200000a3 	.word	0x200000a3
 8000b24:	200000ac 	.word	0x200000ac
 8000b28:	200000a4 	.word	0x200000a4
 8000b2c:	200000bc 	.word	0x200000bc
 8000b30:	20000008 	.word	0x20000008

08000b34 <ADDR_Check>:

void ADDR_Check()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	  addr_d[0] = HAL_GPIO_ReadPin(ADDR0_GPIO_Port, ADDR0_Pin);
 8000b38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b3c:	4891      	ldr	r0, [pc, #580]	@ (8000d84 <ADDR_Check+0x250>)
 8000b3e:	f002 f821 	bl	8002b84 <HAL_GPIO_ReadPin>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	bf14      	ite	ne
 8000b48:	2301      	movne	r3, #1
 8000b4a:	2300      	moveq	r3, #0
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b8e      	ldr	r3, [pc, #568]	@ (8000d88 <ADDR_Check+0x254>)
 8000b50:	701a      	strb	r2, [r3, #0]
	  addr_d[1] = HAL_GPIO_ReadPin(ADDR1_GPIO_Port, ADDR1_Pin);
 8000b52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b56:	488b      	ldr	r0, [pc, #556]	@ (8000d84 <ADDR_Check+0x250>)
 8000b58:	f002 f814 	bl	8002b84 <HAL_GPIO_ReadPin>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	bf14      	ite	ne
 8000b62:	2301      	movne	r3, #1
 8000b64:	2300      	moveq	r3, #0
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	4b87      	ldr	r3, [pc, #540]	@ (8000d88 <ADDR_Check+0x254>)
 8000b6a:	705a      	strb	r2, [r3, #1]
	  addr_d[2] = HAL_GPIO_ReadPin(ADDR2_GPIO_Port, ADDR2_Pin);
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	4885      	ldr	r0, [pc, #532]	@ (8000d84 <ADDR_Check+0x250>)
 8000b70:	f002 f808 	bl	8002b84 <HAL_GPIO_ReadPin>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bf14      	ite	ne
 8000b7a:	2301      	movne	r3, #1
 8000b7c:	2300      	moveq	r3, #0
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	4b81      	ldr	r3, [pc, #516]	@ (8000d88 <ADDR_Check+0x254>)
 8000b82:	709a      	strb	r2, [r3, #2]
	  addr_d[3] = HAL_GPIO_ReadPin(ADDR3_GPIO_Port, ADDR3_Pin);
 8000b84:	2110      	movs	r1, #16
 8000b86:	487f      	ldr	r0, [pc, #508]	@ (8000d84 <ADDR_Check+0x250>)
 8000b88:	f001 fffc 	bl	8002b84 <HAL_GPIO_ReadPin>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bf14      	ite	ne
 8000b92:	2301      	movne	r3, #1
 8000b94:	2300      	moveq	r3, #0
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b7b      	ldr	r3, [pc, #492]	@ (8000d88 <ADDR_Check+0x254>)
 8000b9a:	70da      	strb	r2, [r3, #3]

	  UART_Log("Addr: ");
 8000b9c:	487b      	ldr	r0, [pc, #492]	@ (8000d8c <ADDR_Check+0x258>)
 8000b9e:	f7ff ff29 	bl	80009f4 <UART_Log>

	  if(addr_d[0] == liczba0[3] && addr_d[1] == liczba0[2] && addr_d[2] == liczba0[1] && addr_d[3] == liczba0[0])
 8000ba2:	4b79      	ldr	r3, [pc, #484]	@ (8000d88 <ADDR_Check+0x254>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d118      	bne.n	8000bde <ADDR_Check+0xaa>
 8000bac:	4b76      	ldr	r3, [pc, #472]	@ (8000d88 <ADDR_Check+0x254>)
 8000bae:	785b      	ldrb	r3, [r3, #1]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d113      	bne.n	8000bde <ADDR_Check+0xaa>
 8000bb6:	4b74      	ldr	r3, [pc, #464]	@ (8000d88 <ADDR_Check+0x254>)
 8000bb8:	789b      	ldrb	r3, [r3, #2]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d10e      	bne.n	8000bde <ADDR_Check+0xaa>
 8000bc0:	4b71      	ldr	r3, [pc, #452]	@ (8000d88 <ADDR_Check+0x254>)
 8000bc2:	78db      	ldrb	r3, [r3, #3]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d109      	bne.n	8000bde <ADDR_Check+0xaa>
	  {
		  slave_addr[0] = '0';
 8000bca:	4b71      	ldr	r3, [pc, #452]	@ (8000d90 <ADDR_Check+0x25c>)
 8000bcc:	2230      	movs	r2, #48	@ 0x30
 8000bce:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '0';
 8000bd0:	4b6f      	ldr	r3, [pc, #444]	@ (8000d90 <ADDR_Check+0x25c>)
 8000bd2:	2230      	movs	r2, #48	@ 0x30
 8000bd4:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x00");
 8000bd6:	486f      	ldr	r0, [pc, #444]	@ (8000d94 <ADDR_Check+0x260>)
 8000bd8:	f7ff ff0c 	bl	80009f4 <UART_Log>
 8000bdc:	e206      	b.n	8000fec <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba1[3] && addr_d[1] == liczba1[2] && addr_d[2] == liczba1[1] && addr_d[3] == liczba1[0])
 8000bde:	4b6a      	ldr	r3, [pc, #424]	@ (8000d88 <ADDR_Check+0x254>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2201      	movs	r2, #1
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d118      	bne.n	8000c1a <ADDR_Check+0xe6>
 8000be8:	4b67      	ldr	r3, [pc, #412]	@ (8000d88 <ADDR_Check+0x254>)
 8000bea:	785b      	ldrb	r3, [r3, #1]
 8000bec:	2200      	movs	r2, #0
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d113      	bne.n	8000c1a <ADDR_Check+0xe6>
 8000bf2:	4b65      	ldr	r3, [pc, #404]	@ (8000d88 <ADDR_Check+0x254>)
 8000bf4:	789b      	ldrb	r3, [r3, #2]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d10e      	bne.n	8000c1a <ADDR_Check+0xe6>
 8000bfc:	4b62      	ldr	r3, [pc, #392]	@ (8000d88 <ADDR_Check+0x254>)
 8000bfe:	78db      	ldrb	r3, [r3, #3]
 8000c00:	2200      	movs	r2, #0
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d109      	bne.n	8000c1a <ADDR_Check+0xe6>
	  {
		  slave_addr[0] = '0';
 8000c06:	4b62      	ldr	r3, [pc, #392]	@ (8000d90 <ADDR_Check+0x25c>)
 8000c08:	2230      	movs	r2, #48	@ 0x30
 8000c0a:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '1';
 8000c0c:	4b60      	ldr	r3, [pc, #384]	@ (8000d90 <ADDR_Check+0x25c>)
 8000c0e:	2231      	movs	r2, #49	@ 0x31
 8000c10:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x01");
 8000c12:	4861      	ldr	r0, [pc, #388]	@ (8000d98 <ADDR_Check+0x264>)
 8000c14:	f7ff feee 	bl	80009f4 <UART_Log>
 8000c18:	e1e8      	b.n	8000fec <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba2[3] && addr_d[1] == liczba2[2] && addr_d[2] == liczba2[1] && addr_d[3] == liczba2[0])
 8000c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8000d88 <ADDR_Check+0x254>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d118      	bne.n	8000c56 <ADDR_Check+0x122>
 8000c24:	4b58      	ldr	r3, [pc, #352]	@ (8000d88 <ADDR_Check+0x254>)
 8000c26:	785b      	ldrb	r3, [r3, #1]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d113      	bne.n	8000c56 <ADDR_Check+0x122>
 8000c2e:	4b56      	ldr	r3, [pc, #344]	@ (8000d88 <ADDR_Check+0x254>)
 8000c30:	789b      	ldrb	r3, [r3, #2]
 8000c32:	2200      	movs	r2, #0
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d10e      	bne.n	8000c56 <ADDR_Check+0x122>
 8000c38:	4b53      	ldr	r3, [pc, #332]	@ (8000d88 <ADDR_Check+0x254>)
 8000c3a:	78db      	ldrb	r3, [r3, #3]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d109      	bne.n	8000c56 <ADDR_Check+0x122>
	  {
		  slave_addr[0] = '0';
 8000c42:	4b53      	ldr	r3, [pc, #332]	@ (8000d90 <ADDR_Check+0x25c>)
 8000c44:	2230      	movs	r2, #48	@ 0x30
 8000c46:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '2';
 8000c48:	4b51      	ldr	r3, [pc, #324]	@ (8000d90 <ADDR_Check+0x25c>)
 8000c4a:	2232      	movs	r2, #50	@ 0x32
 8000c4c:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x02");
 8000c4e:	4853      	ldr	r0, [pc, #332]	@ (8000d9c <ADDR_Check+0x268>)
 8000c50:	f7ff fed0 	bl	80009f4 <UART_Log>
 8000c54:	e1ca      	b.n	8000fec <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba3[3] && addr_d[1] == liczba3[2] && addr_d[2] == liczba3[1] && addr_d[3] == liczba3[0])
 8000c56:	4b4c      	ldr	r3, [pc, #304]	@ (8000d88 <ADDR_Check+0x254>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d118      	bne.n	8000c92 <ADDR_Check+0x15e>
 8000c60:	4b49      	ldr	r3, [pc, #292]	@ (8000d88 <ADDR_Check+0x254>)
 8000c62:	785b      	ldrb	r3, [r3, #1]
 8000c64:	2201      	movs	r2, #1
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d113      	bne.n	8000c92 <ADDR_Check+0x15e>
 8000c6a:	4b47      	ldr	r3, [pc, #284]	@ (8000d88 <ADDR_Check+0x254>)
 8000c6c:	789b      	ldrb	r3, [r3, #2]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d10e      	bne.n	8000c92 <ADDR_Check+0x15e>
 8000c74:	4b44      	ldr	r3, [pc, #272]	@ (8000d88 <ADDR_Check+0x254>)
 8000c76:	78db      	ldrb	r3, [r3, #3]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d109      	bne.n	8000c92 <ADDR_Check+0x15e>
	  {
		  slave_addr[0] = '0';
 8000c7e:	4b44      	ldr	r3, [pc, #272]	@ (8000d90 <ADDR_Check+0x25c>)
 8000c80:	2230      	movs	r2, #48	@ 0x30
 8000c82:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '3';
 8000c84:	4b42      	ldr	r3, [pc, #264]	@ (8000d90 <ADDR_Check+0x25c>)
 8000c86:	2233      	movs	r2, #51	@ 0x33
 8000c88:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x03");
 8000c8a:	4845      	ldr	r0, [pc, #276]	@ (8000da0 <ADDR_Check+0x26c>)
 8000c8c:	f7ff feb2 	bl	80009f4 <UART_Log>
 8000c90:	e1ac      	b.n	8000fec <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba4[3] && addr_d[1] == liczba4[2] && addr_d[2] == liczba4[1] && addr_d[3] == liczba4[0])
 8000c92:	4b3d      	ldr	r3, [pc, #244]	@ (8000d88 <ADDR_Check+0x254>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2200      	movs	r2, #0
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d118      	bne.n	8000cce <ADDR_Check+0x19a>
 8000c9c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d88 <ADDR_Check+0x254>)
 8000c9e:	785b      	ldrb	r3, [r3, #1]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d113      	bne.n	8000cce <ADDR_Check+0x19a>
 8000ca6:	4b38      	ldr	r3, [pc, #224]	@ (8000d88 <ADDR_Check+0x254>)
 8000ca8:	789b      	ldrb	r3, [r3, #2]
 8000caa:	2201      	movs	r2, #1
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d10e      	bne.n	8000cce <ADDR_Check+0x19a>
 8000cb0:	4b35      	ldr	r3, [pc, #212]	@ (8000d88 <ADDR_Check+0x254>)
 8000cb2:	78db      	ldrb	r3, [r3, #3]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d109      	bne.n	8000cce <ADDR_Check+0x19a>
	  {
		  slave_addr[0] = '0';
 8000cba:	4b35      	ldr	r3, [pc, #212]	@ (8000d90 <ADDR_Check+0x25c>)
 8000cbc:	2230      	movs	r2, #48	@ 0x30
 8000cbe:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '4';
 8000cc0:	4b33      	ldr	r3, [pc, #204]	@ (8000d90 <ADDR_Check+0x25c>)
 8000cc2:	2234      	movs	r2, #52	@ 0x34
 8000cc4:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x04");
 8000cc6:	4837      	ldr	r0, [pc, #220]	@ (8000da4 <ADDR_Check+0x270>)
 8000cc8:	f7ff fe94 	bl	80009f4 <UART_Log>
 8000ccc:	e18e      	b.n	8000fec <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba5[3] && addr_d[1] == liczba5[2] && addr_d[2] == liczba5[1] && addr_d[3] == liczba5[0])
 8000cce:	4b2e      	ldr	r3, [pc, #184]	@ (8000d88 <ADDR_Check+0x254>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d118      	bne.n	8000d0a <ADDR_Check+0x1d6>
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d88 <ADDR_Check+0x254>)
 8000cda:	785b      	ldrb	r3, [r3, #1]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d113      	bne.n	8000d0a <ADDR_Check+0x1d6>
 8000ce2:	4b29      	ldr	r3, [pc, #164]	@ (8000d88 <ADDR_Check+0x254>)
 8000ce4:	789b      	ldrb	r3, [r3, #2]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d10e      	bne.n	8000d0a <ADDR_Check+0x1d6>
 8000cec:	4b26      	ldr	r3, [pc, #152]	@ (8000d88 <ADDR_Check+0x254>)
 8000cee:	78db      	ldrb	r3, [r3, #3]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d109      	bne.n	8000d0a <ADDR_Check+0x1d6>
	  {
		  slave_addr[0] = '0';
 8000cf6:	4b26      	ldr	r3, [pc, #152]	@ (8000d90 <ADDR_Check+0x25c>)
 8000cf8:	2230      	movs	r2, #48	@ 0x30
 8000cfa:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '5';
 8000cfc:	4b24      	ldr	r3, [pc, #144]	@ (8000d90 <ADDR_Check+0x25c>)
 8000cfe:	2235      	movs	r2, #53	@ 0x35
 8000d00:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x05");
 8000d02:	4829      	ldr	r0, [pc, #164]	@ (8000da8 <ADDR_Check+0x274>)
 8000d04:	f7ff fe76 	bl	80009f4 <UART_Log>
 8000d08:	e170      	b.n	8000fec <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba6[3] && addr_d[1] == liczba6[2] && addr_d[2] == liczba6[1] && addr_d[3] == liczba6[0])
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <ADDR_Check+0x254>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d118      	bne.n	8000d46 <ADDR_Check+0x212>
 8000d14:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <ADDR_Check+0x254>)
 8000d16:	785b      	ldrb	r3, [r3, #1]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d113      	bne.n	8000d46 <ADDR_Check+0x212>
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <ADDR_Check+0x254>)
 8000d20:	789b      	ldrb	r3, [r3, #2]
 8000d22:	2201      	movs	r2, #1
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d10e      	bne.n	8000d46 <ADDR_Check+0x212>
 8000d28:	4b17      	ldr	r3, [pc, #92]	@ (8000d88 <ADDR_Check+0x254>)
 8000d2a:	78db      	ldrb	r3, [r3, #3]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d109      	bne.n	8000d46 <ADDR_Check+0x212>
	  {
		  slave_addr[0] = '0';
 8000d32:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <ADDR_Check+0x25c>)
 8000d34:	2230      	movs	r2, #48	@ 0x30
 8000d36:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '6';
 8000d38:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <ADDR_Check+0x25c>)
 8000d3a:	2236      	movs	r2, #54	@ 0x36
 8000d3c:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x06");
 8000d3e:	481b      	ldr	r0, [pc, #108]	@ (8000dac <ADDR_Check+0x278>)
 8000d40:	f7ff fe58 	bl	80009f4 <UART_Log>
 8000d44:	e152      	b.n	8000fec <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba7[3] && addr_d[1] == liczba7[2] && addr_d[2] == liczba7[1] && addr_d[3] == liczba7[0])
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <ADDR_Check+0x254>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d131      	bne.n	8000db4 <ADDR_Check+0x280>
 8000d50:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <ADDR_Check+0x254>)
 8000d52:	785b      	ldrb	r3, [r3, #1]
 8000d54:	2201      	movs	r2, #1
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d12c      	bne.n	8000db4 <ADDR_Check+0x280>
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <ADDR_Check+0x254>)
 8000d5c:	789b      	ldrb	r3, [r3, #2]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d127      	bne.n	8000db4 <ADDR_Check+0x280>
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <ADDR_Check+0x254>)
 8000d66:	78db      	ldrb	r3, [r3, #3]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d122      	bne.n	8000db4 <ADDR_Check+0x280>
	  {
		  slave_addr[0] = '0';
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <ADDR_Check+0x25c>)
 8000d70:	2230      	movs	r2, #48	@ 0x30
 8000d72:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '7';
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <ADDR_Check+0x25c>)
 8000d76:	2237      	movs	r2, #55	@ 0x37
 8000d78:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x07");
 8000d7a:	480d      	ldr	r0, [pc, #52]	@ (8000db0 <ADDR_Check+0x27c>)
 8000d7c:	f7ff fe3a 	bl	80009f4 <UART_Log>
 8000d80:	e134      	b.n	8000fec <ADDR_Check+0x4b8>
 8000d82:	bf00      	nop
 8000d84:	40020400 	.word	0x40020400
 8000d88:	200000cc 	.word	0x200000cc
 8000d8c:	08004ef8 	.word	0x08004ef8
 8000d90:	200000d0 	.word	0x200000d0
 8000d94:	08004f00 	.word	0x08004f00
 8000d98:	08004f08 	.word	0x08004f08
 8000d9c:	08004f10 	.word	0x08004f10
 8000da0:	08004f18 	.word	0x08004f18
 8000da4:	08004f20 	.word	0x08004f20
 8000da8:	08004f28 	.word	0x08004f28
 8000dac:	08004f30 	.word	0x08004f30
 8000db0:	08004f38 	.word	0x08004f38
	  }
	  else if(addr_d[0] == liczba8[3] && addr_d[1] == liczba8[2] && addr_d[2] == liczba8[1] && addr_d[3] == liczba8[0])
 8000db4:	4b90      	ldr	r3, [pc, #576]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2200      	movs	r2, #0
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d118      	bne.n	8000df0 <ADDR_Check+0x2bc>
 8000dbe:	4b8e      	ldr	r3, [pc, #568]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000dc0:	785b      	ldrb	r3, [r3, #1]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d113      	bne.n	8000df0 <ADDR_Check+0x2bc>
 8000dc8:	4b8b      	ldr	r3, [pc, #556]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000dca:	789b      	ldrb	r3, [r3, #2]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d10e      	bne.n	8000df0 <ADDR_Check+0x2bc>
 8000dd2:	4b89      	ldr	r3, [pc, #548]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000dd4:	78db      	ldrb	r3, [r3, #3]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d109      	bne.n	8000df0 <ADDR_Check+0x2bc>
	  {
		  slave_addr[0] = '0';
 8000ddc:	4b87      	ldr	r3, [pc, #540]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000dde:	2230      	movs	r2, #48	@ 0x30
 8000de0:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '8';
 8000de2:	4b86      	ldr	r3, [pc, #536]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000de4:	2238      	movs	r2, #56	@ 0x38
 8000de6:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x08");
 8000de8:	4885      	ldr	r0, [pc, #532]	@ (8001000 <ADDR_Check+0x4cc>)
 8000dea:	f7ff fe03 	bl	80009f4 <UART_Log>
 8000dee:	e0fd      	b.n	8000fec <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba9[3] && addr_d[1] == liczba9[2] && addr_d[2] == liczba9[1] && addr_d[3] == liczba9[0])
 8000df0:	4b81      	ldr	r3, [pc, #516]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2201      	movs	r2, #1
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d118      	bne.n	8000e2c <ADDR_Check+0x2f8>
 8000dfa:	4b7f      	ldr	r3, [pc, #508]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000dfc:	785b      	ldrb	r3, [r3, #1]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d113      	bne.n	8000e2c <ADDR_Check+0x2f8>
 8000e04:	4b7c      	ldr	r3, [pc, #496]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000e06:	789b      	ldrb	r3, [r3, #2]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d10e      	bne.n	8000e2c <ADDR_Check+0x2f8>
 8000e0e:	4b7a      	ldr	r3, [pc, #488]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000e10:	78db      	ldrb	r3, [r3, #3]
 8000e12:	2201      	movs	r2, #1
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d109      	bne.n	8000e2c <ADDR_Check+0x2f8>
	  {
		  slave_addr[0] = '0';
 8000e18:	4b78      	ldr	r3, [pc, #480]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000e1a:	2230      	movs	r2, #48	@ 0x30
 8000e1c:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '9';
 8000e1e:	4b77      	ldr	r3, [pc, #476]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000e20:	2239      	movs	r2, #57	@ 0x39
 8000e22:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x09");
 8000e24:	4877      	ldr	r0, [pc, #476]	@ (8001004 <ADDR_Check+0x4d0>)
 8000e26:	f7ff fde5 	bl	80009f4 <UART_Log>
 8000e2a:	e0df      	b.n	8000fec <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba10[3] && addr_d[1] == liczba10[2] && addr_d[2] == liczba10[1] && addr_d[3] == liczba10[0])
 8000e2c:	4b72      	ldr	r3, [pc, #456]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2200      	movs	r2, #0
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d118      	bne.n	8000e68 <ADDR_Check+0x334>
 8000e36:	4b70      	ldr	r3, [pc, #448]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000e38:	785b      	ldrb	r3, [r3, #1]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d113      	bne.n	8000e68 <ADDR_Check+0x334>
 8000e40:	4b6d      	ldr	r3, [pc, #436]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000e42:	789b      	ldrb	r3, [r3, #2]
 8000e44:	2200      	movs	r2, #0
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d10e      	bne.n	8000e68 <ADDR_Check+0x334>
 8000e4a:	4b6b      	ldr	r3, [pc, #428]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000e4c:	78db      	ldrb	r3, [r3, #3]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d109      	bne.n	8000e68 <ADDR_Check+0x334>
	  {
		  slave_addr[0] = '1';
 8000e54:	4b69      	ldr	r3, [pc, #420]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000e56:	2231      	movs	r2, #49	@ 0x31
 8000e58:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '0';
 8000e5a:	4b68      	ldr	r3, [pc, #416]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000e5c:	2230      	movs	r2, #48	@ 0x30
 8000e5e:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x0A");
 8000e60:	4869      	ldr	r0, [pc, #420]	@ (8001008 <ADDR_Check+0x4d4>)
 8000e62:	f7ff fdc7 	bl	80009f4 <UART_Log>
 8000e66:	e0c1      	b.n	8000fec <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba11[3] && addr_d[1] == liczba11[2] && addr_d[2] == liczba11[1] && addr_d[3] == liczba11[0])
 8000e68:	4b63      	ldr	r3, [pc, #396]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d118      	bne.n	8000ea4 <ADDR_Check+0x370>
 8000e72:	4b61      	ldr	r3, [pc, #388]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000e74:	785b      	ldrb	r3, [r3, #1]
 8000e76:	2201      	movs	r2, #1
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d113      	bne.n	8000ea4 <ADDR_Check+0x370>
 8000e7c:	4b5e      	ldr	r3, [pc, #376]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000e7e:	789b      	ldrb	r3, [r3, #2]
 8000e80:	2200      	movs	r2, #0
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d10e      	bne.n	8000ea4 <ADDR_Check+0x370>
 8000e86:	4b5c      	ldr	r3, [pc, #368]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000e88:	78db      	ldrb	r3, [r3, #3]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d109      	bne.n	8000ea4 <ADDR_Check+0x370>
	  {
		  slave_addr[0] = '1';
 8000e90:	4b5a      	ldr	r3, [pc, #360]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000e92:	2231      	movs	r2, #49	@ 0x31
 8000e94:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '1';
 8000e96:	4b59      	ldr	r3, [pc, #356]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000e98:	2231      	movs	r2, #49	@ 0x31
 8000e9a:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x0B");
 8000e9c:	485b      	ldr	r0, [pc, #364]	@ (800100c <ADDR_Check+0x4d8>)
 8000e9e:	f7ff fda9 	bl	80009f4 <UART_Log>
 8000ea2:	e0a3      	b.n	8000fec <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba12[3] && addr_d[1] == liczba12[2] && addr_d[2] == liczba12[1] && addr_d[3] == liczba12[0])
 8000ea4:	4b54      	ldr	r3, [pc, #336]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d118      	bne.n	8000ee0 <ADDR_Check+0x3ac>
 8000eae:	4b52      	ldr	r3, [pc, #328]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000eb0:	785b      	ldrb	r3, [r3, #1]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d113      	bne.n	8000ee0 <ADDR_Check+0x3ac>
 8000eb8:	4b4f      	ldr	r3, [pc, #316]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000eba:	789b      	ldrb	r3, [r3, #2]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d10e      	bne.n	8000ee0 <ADDR_Check+0x3ac>
 8000ec2:	4b4d      	ldr	r3, [pc, #308]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000ec4:	78db      	ldrb	r3, [r3, #3]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d109      	bne.n	8000ee0 <ADDR_Check+0x3ac>
	  {
		  slave_addr[0] = '1';
 8000ecc:	4b4b      	ldr	r3, [pc, #300]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000ece:	2231      	movs	r2, #49	@ 0x31
 8000ed0:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '2';
 8000ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000ed4:	2232      	movs	r2, #50	@ 0x32
 8000ed6:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x0C");
 8000ed8:	484d      	ldr	r0, [pc, #308]	@ (8001010 <ADDR_Check+0x4dc>)
 8000eda:	f7ff fd8b 	bl	80009f4 <UART_Log>
 8000ede:	e085      	b.n	8000fec <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba13[3] && addr_d[1] == liczba13[2] && addr_d[2] == liczba13[1] && addr_d[3] == liczba13[0])
 8000ee0:	4b45      	ldr	r3, [pc, #276]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d118      	bne.n	8000f1c <ADDR_Check+0x3e8>
 8000eea:	4b43      	ldr	r3, [pc, #268]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000eec:	785b      	ldrb	r3, [r3, #1]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d113      	bne.n	8000f1c <ADDR_Check+0x3e8>
 8000ef4:	4b40      	ldr	r3, [pc, #256]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000ef6:	789b      	ldrb	r3, [r3, #2]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d10e      	bne.n	8000f1c <ADDR_Check+0x3e8>
 8000efe:	4b3e      	ldr	r3, [pc, #248]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000f00:	78db      	ldrb	r3, [r3, #3]
 8000f02:	2201      	movs	r2, #1
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d109      	bne.n	8000f1c <ADDR_Check+0x3e8>
	  {
		  slave_addr[0] = '1';
 8000f08:	4b3c      	ldr	r3, [pc, #240]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000f0a:	2231      	movs	r2, #49	@ 0x31
 8000f0c:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '3';
 8000f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000f10:	2233      	movs	r2, #51	@ 0x33
 8000f12:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x0D");
 8000f14:	483f      	ldr	r0, [pc, #252]	@ (8001014 <ADDR_Check+0x4e0>)
 8000f16:	f7ff fd6d 	bl	80009f4 <UART_Log>
 8000f1a:	e067      	b.n	8000fec <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba14[3] && addr_d[1] == liczba14[2] && addr_d[2] == liczba14[1] && addr_d[3] == liczba14[0])
 8000f1c:	4b36      	ldr	r3, [pc, #216]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2200      	movs	r2, #0
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d118      	bne.n	8000f58 <ADDR_Check+0x424>
 8000f26:	4b34      	ldr	r3, [pc, #208]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000f28:	785b      	ldrb	r3, [r3, #1]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d113      	bne.n	8000f58 <ADDR_Check+0x424>
 8000f30:	4b31      	ldr	r3, [pc, #196]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000f32:	789b      	ldrb	r3, [r3, #2]
 8000f34:	2201      	movs	r2, #1
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d10e      	bne.n	8000f58 <ADDR_Check+0x424>
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000f3c:	78db      	ldrb	r3, [r3, #3]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d109      	bne.n	8000f58 <ADDR_Check+0x424>
	  {
		  slave_addr[0] = '1';
 8000f44:	4b2d      	ldr	r3, [pc, #180]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000f46:	2231      	movs	r2, #49	@ 0x31
 8000f48:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '4';
 8000f4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000f4c:	2234      	movs	r2, #52	@ 0x34
 8000f4e:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x0E");
 8000f50:	4831      	ldr	r0, [pc, #196]	@ (8001018 <ADDR_Check+0x4e4>)
 8000f52:	f7ff fd4f 	bl	80009f4 <UART_Log>
 8000f56:	e049      	b.n	8000fec <ADDR_Check+0x4b8>
	  }
	  else if(addr_d[0] == liczba15[3] && addr_d[1] == liczba15[2] && addr_d[2] == liczba15[1] && addr_d[3] == liczba15[0])
 8000f58:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d000      	beq.n	8000f64 <ADDR_Check+0x430>
 8000f62:	e018      	b.n	8000f96 <ADDR_Check+0x462>
 8000f64:	4b24      	ldr	r3, [pc, #144]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000f66:	785b      	ldrb	r3, [r3, #1]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d113      	bne.n	8000f96 <ADDR_Check+0x462>
 8000f6e:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000f70:	789b      	ldrb	r3, [r3, #2]
 8000f72:	2201      	movs	r2, #1
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d10e      	bne.n	8000f96 <ADDR_Check+0x462>
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <ADDR_Check+0x4c4>)
 8000f7a:	78db      	ldrb	r3, [r3, #3]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d109      	bne.n	8000f96 <ADDR_Check+0x462>
	  {
		  slave_addr[0] = '1';
 8000f82:	4b1e      	ldr	r3, [pc, #120]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000f84:	2231      	movs	r2, #49	@ 0x31
 8000f86:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = '5';
 8000f88:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000f8a:	2235      	movs	r2, #53	@ 0x35
 8000f8c:	705a      	strb	r2, [r3, #1]
		  UART_Log("0x0F");
 8000f8e:	4823      	ldr	r0, [pc, #140]	@ (800101c <ADDR_Check+0x4e8>)
 8000f90:	f7ff fd30 	bl	80009f4 <UART_Log>
 8000f94:	e02a      	b.n	8000fec <ADDR_Check+0x4b8>
	  }
	  else
	  {
		  while(true)
		  {
		  slave_addr[0] = 'F';
 8000f96:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000f98:	2246      	movs	r2, #70	@ 0x46
 8000f9a:	701a      	strb	r2, [r3, #0]
		  slave_addr[1] = 'F';
 8000f9c:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <ADDR_Check+0x4c8>)
 8000f9e:	2246      	movs	r2, #70	@ 0x46
 8000fa0:	705a      	strb	r2, [r3, #1]
		  UART_Log("0xFF incorrect addres check\n\r");
 8000fa2:	481f      	ldr	r0, [pc, #124]	@ (8001020 <ADDR_Check+0x4ec>)
 8000fa4:	f7ff fd26 	bl	80009f4 <UART_Log>
		  HAL_GPIO_WritePin(ST_RED_GPIO_Port, ST_RED_Pin, GPIO_PIN_SET);	//error
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2104      	movs	r1, #4
 8000fac:	481d      	ldr	r0, [pc, #116]	@ (8001024 <ADDR_Check+0x4f0>)
 8000fae:	f001 fe01 	bl	8002bb4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ST_YELLOW_GPIO_Port, ST_YELLOW_Pin, GPIO_PIN_RESET); //bypass
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fb8:	481b      	ldr	r0, [pc, #108]	@ (8001028 <ADDR_Check+0x4f4>)
 8000fba:	f001 fdfb 	bl	8002bb4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ST_GREEN_GPIO_Port, ST_GREEN_Pin, GPIO_PIN_RESET);	//run
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fc4:	4818      	ldr	r0, [pc, #96]	@ (8001028 <ADDR_Check+0x4f4>)
 8000fc6:	f001 fdf5 	bl	8002bb4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ST_BLUE_GPIO_Port, ST_BLUE_Pin, GPIO_PIN_RESET);	//other
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fd0:	4815      	ldr	r0, [pc, #84]	@ (8001028 <ADDR_Check+0x4f4>)
 8000fd2:	f001 fdef 	bl	8002bb4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Hirata_NG_GPIO_Port, Hirata_NG_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fdc:	4813      	ldr	r0, [pc, #76]	@ (800102c <ADDR_Check+0x4f8>)
 8000fde:	f001 fde9 	bl	8002bb4 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000fe2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fe6:	f000 ff97 	bl	8001f18 <HAL_Delay>
		  slave_addr[0] = 'F';
 8000fea:	e7d4      	b.n	8000f96 <ADDR_Check+0x462>
		  }
	  }

	  UART_Log("\n\r");
 8000fec:	4810      	ldr	r0, [pc, #64]	@ (8001030 <ADDR_Check+0x4fc>)
 8000fee:	f7ff fd01 	bl	80009f4 <UART_Log>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200000cc 	.word	0x200000cc
 8000ffc:	200000d0 	.word	0x200000d0
 8001000:	08004f40 	.word	0x08004f40
 8001004:	08004f48 	.word	0x08004f48
 8001008:	08004f50 	.word	0x08004f50
 800100c:	08004f58 	.word	0x08004f58
 8001010:	08004f60 	.word	0x08004f60
 8001014:	08004f68 	.word	0x08004f68
 8001018:	08004f70 	.word	0x08004f70
 800101c:	08004f78 	.word	0x08004f78
 8001020:	08004f80 	.word	0x08004f80
 8001024:	40020c00 	.word	0x40020c00
 8001028:	40020800 	.word	0x40020800
 800102c:	40020000 	.word	0x40020000
 8001030:	08004fa0 	.word	0x08004fa0

08001034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001038:	b672      	cpsid	i
}
 800103a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {

	  UART_Log("Hard Fault: ERROR HANDLER\n\r");
 800103c:	4812      	ldr	r0, [pc, #72]	@ (8001088 <Error_Handler+0x54>)
 800103e:	f7ff fcd9 	bl	80009f4 <UART_Log>
	  HAL_GPIO_WritePin(ST_RED_GPIO_Port, ST_RED_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2104      	movs	r1, #4
 8001046:	4811      	ldr	r0, [pc, #68]	@ (800108c <Error_Handler+0x58>)
 8001048:	f001 fdb4 	bl	8002bb4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Hirata_NG_GPIO_Port, Hirata_NG_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001052:	480f      	ldr	r0, [pc, #60]	@ (8001090 <Error_Handler+0x5c>)
 8001054:	f001 fdae 	bl	8002bb4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ST_YELLOW_GPIO_Port, ST_YELLOW_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800105e:	480d      	ldr	r0, [pc, #52]	@ (8001094 <Error_Handler+0x60>)
 8001060:	f001 fda8 	bl	8002bb4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ST_GREEN_GPIO_Port, ST_GREEN_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800106a:	480a      	ldr	r0, [pc, #40]	@ (8001094 <Error_Handler+0x60>)
 800106c:	f001 fda2 	bl	8002bb4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ST_BLUE_GPIO_Port, ST_BLUE_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001076:	4807      	ldr	r0, [pc, #28]	@ (8001094 <Error_Handler+0x60>)
 8001078:	f001 fd9c 	bl	8002bb4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800107c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001080:	f000 ff4a 	bl	8001f18 <HAL_Delay>
	  UART_Log("Hard Fault: ERROR HANDLER\n\r");
 8001084:	bf00      	nop
 8001086:	e7d9      	b.n	800103c <Error_Handler+0x8>
 8001088:	08004fa4 	.word	0x08004fa4
 800108c:	40020c00 	.word	0x40020c00
 8001090:	40020000 	.word	0x40020000
 8001094:	40020800 	.word	0x40020800

08001098 <Parser_TakeLine>:

//
// Get a one complete line from Ring Buffer
//
void Parser_TakeLine(RingBuffer_t *Buf, uint8_t *Destination)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	uint8_t Tmp;
	uint8_t i = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]

	// Loop for every char in Ring Buffer
	do
	{
		// Read a one byte from Ring Buffer
		RB_Read(Buf, &Tmp);
 80010a6:	f107 030e 	add.w	r3, r7, #14
 80010aa:	4619      	mov	r1, r3
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 fb89 	bl	80017c4 <RB_Read>

		// Check if we take the endline char
		if(Tmp == ENDLINE)
 80010b2:	7bbb      	ldrb	r3, [r7, #14]
 80010b4:	2b0a      	cmp	r3, #10
 80010b6:	d105      	bne.n	80010c4 <Parser_TakeLine+0x2c>
		{
			// If endline - replace it with c-string end sign - 0x00
			Destination[i] = 0;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	e004      	b.n	80010ce <Parser_TakeLine+0x36>
		}
		else
		{
			// If not endline - just write to work-buffer
			Destination[i] = Tmp;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	4413      	add	r3, r2
 80010ca:	7bba      	ldrb	r2, [r7, #14]
 80010cc:	701a      	strb	r2, [r3, #0]
		}

		i++; // increment array iterator
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
	}while(Tmp != ENDLINE); // If we hit the endline char - end the loop
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	2b0a      	cmp	r3, #10
 80010d8:	d1e5      	bne.n	80010a6 <Parser_TakeLine+0xe>
}
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <Parser_Parse>:
// 	LED_OFF
//
// uint8_t *DataToParse - an array with complete line taken from Ring Buffer earlier
//
void Parser_Parse(uint8_t *DataToParse)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	uint8_t command0[] = {"TS_00_00"};
 80010ec:	4a11      	ldr	r2, [pc, #68]	@ (8001134 <Parser_Parse+0x50>)
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80010f4:	c303      	stmia	r3!, {r0, r1}
 80010f6:	701a      	strb	r2, [r3, #0]
	command0[3] = slave_addr[0];
 80010f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <Parser_Parse+0x54>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	73fb      	strb	r3, [r7, #15]
	command0[4] = slave_addr[1];
 80010fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <Parser_Parse+0x54>)
 8001100:	785b      	ldrb	r3, [r3, #1]
 8001102:	743b      	strb	r3, [r7, #16]

	// Compare provided array with line to parse with command template
	if(strcmp(command0, (char*)DataToParse) == 0)
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f864 	bl	80001d8 <strcmp>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d103      	bne.n	800111e <Parser_Parse+0x3a>
	{
		  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
		RS_Transmit(send_buffer);
 8001116:	4809      	ldr	r0, [pc, #36]	@ (800113c <Parser_Parse+0x58>)
 8001118:	f7ff fc82 	bl	8000a20 <RS_Transmit>
		//RB_Flush(ReceivedData);
	}
	//DataToParse[0] = ("\n");
	//for(size_t i = 0; i < sizeof DataToParse; ++i)	//clearread data
		//	  DataToParse[i] = 0;
}
 800111c:	e005      	b.n	800112a <Parser_Parse+0x46>
		RB_Flush(&rx_data);
 800111e:	4808      	ldr	r0, [pc, #32]	@ (8001140 <Parser_Parse+0x5c>)
 8001120:	f000 fba4 	bl	800186c <RB_Flush>
		RB_Flush(rx_data);
 8001124:	4806      	ldr	r0, [pc, #24]	@ (8001140 <Parser_Parse+0x5c>)
 8001126:	f000 fba1 	bl	800186c <RB_Flush>
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	08004fc0 	.word	0x08004fc0
 8001138:	200000d0 	.word	0x200000d0
 800113c:	20000008 	.word	0x20000008
 8001140:	200000d4 	.word	0x200000d4

08001144 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af02      	add	r7, sp, #8
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 800114e:	f107 020f 	add.w	r2, r7, #15
 8001152:	1df9      	adds	r1, r7, #7
 8001154:	2364      	movs	r3, #100	@ 0x64
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	4804      	ldr	r0, [pc, #16]	@ (800116c <RC522_SPI_Transfer+0x28>)
 800115c:	f002 fba9 	bl	80038b2 <HAL_SPI_TransmitReceive>

	return rx_data;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000158 	.word	0x20000158

08001170 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	460a      	mov	r2, r1
 800117a:	71fb      	strb	r3, [r7, #7]
 800117c:	4613      	mov	r3, r2
 800117e:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2110      	movs	r1, #16
 8001184:	480c      	ldr	r0, [pc, #48]	@ (80011b8 <Write_MFRC522+0x48>)
 8001186:	f001 fd15 	bl	8002bb4 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001194:	b2db      	uxtb	r3, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ffd4 	bl	8001144 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ffd0 	bl	8001144 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2110      	movs	r1, #16
 80011a8:	4803      	ldr	r0, [pc, #12]	@ (80011b8 <Write_MFRC522+0x48>)
 80011aa:	f001 fd03 	bl	8002bb4 <HAL_GPIO_WritePin>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40020000 	.word	0x40020000

080011bc <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2110      	movs	r1, #16
 80011ca:	480f      	ldr	r0, [pc, #60]	@ (8001208 <Read_MFRC522+0x4c>)
 80011cc:	f001 fcf2 	bl	8002bb4 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ffad 	bl	8001144 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff ffaa 	bl	8001144 <RC522_SPI_Transfer>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2110      	movs	r1, #16
 80011f8:	4803      	ldr	r0, [pc, #12]	@ (8001208 <Read_MFRC522+0x4c>)
 80011fa:	f001 fcdb 	bl	8002bb4 <HAL_GPIO_WritePin>

	return val;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]

}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40020000 	.word	0x40020000

0800120c <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	460a      	mov	r2, r1
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	4613      	mov	r3, r2
 800121a:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ffcc 	bl	80011bc <Read_MFRC522>
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	4313      	orrs	r3, r2
 800122e:	b2da      	uxtb	r2, r3
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff9b 	bl	8001170 <Write_MFRC522>
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b084      	sub	sp, #16
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	460a      	mov	r2, r1
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	4613      	mov	r3, r2
 8001250:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ffb1 	bl	80011bc <Read_MFRC522>
 800125a:	4603      	mov	r3, r0
 800125c:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800125e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001262:	43db      	mvns	r3, r3
 8001264:	b25a      	sxtb	r2, r3
 8001266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126a:	4013      	ands	r3, r2
 800126c:	b25b      	sxtb	r3, r3
 800126e:	b2da      	uxtb	r2, r3
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff7b 	bl	8001170 <Write_MFRC522>
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8001286:	2014      	movs	r0, #20
 8001288:	f7ff ff98 	bl	80011bc <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 800128c:	2103      	movs	r1, #3
 800128e:	2014      	movs	r0, #20
 8001290:	f7ff ffbc 	bl	800120c <SetBitMask>
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}

08001298 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800129c:	210f      	movs	r1, #15
 800129e:	2001      	movs	r0, #1
 80012a0:	f7ff ff66 	bl	8001170 <Write_MFRC522>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2110      	movs	r1, #16
 80012b0:	4812      	ldr	r0, [pc, #72]	@ (80012fc <MFRC522_Init+0x54>)
 80012b2:	f001 fc7f 	bl	8002bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	2101      	movs	r1, #1
 80012ba:	4811      	ldr	r0, [pc, #68]	@ (8001300 <MFRC522_Init+0x58>)
 80012bc:	f001 fc7a 	bl	8002bb4 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80012c0:	f7ff ffea 	bl	8001298 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80012c4:	218d      	movs	r1, #141	@ 0x8d
 80012c6:	202a      	movs	r0, #42	@ 0x2a
 80012c8:	f7ff ff52 	bl	8001170 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80012cc:	213e      	movs	r1, #62	@ 0x3e
 80012ce:	202b      	movs	r0, #43	@ 0x2b
 80012d0:	f7ff ff4e 	bl	8001170 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80012d4:	211e      	movs	r1, #30
 80012d6:	202d      	movs	r0, #45	@ 0x2d
 80012d8:	f7ff ff4a 	bl	8001170 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80012dc:	2100      	movs	r1, #0
 80012de:	202c      	movs	r0, #44	@ 0x2c
 80012e0:	f7ff ff46 	bl	8001170 <Write_MFRC522>
	//Write_MFRC522(RFCfgReg, 0x7F);
	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80012e4:	2140      	movs	r1, #64	@ 0x40
 80012e6:	2015      	movs	r0, #21
 80012e8:	f7ff ff42 	bl	8001170 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80012ec:	213d      	movs	r1, #61	@ 0x3d
 80012ee:	2011      	movs	r0, #17
 80012f0:	f7ff ff3e 	bl	8001170 <Write_MFRC522>

	AntennaOn();
 80012f4:	f7ff ffc5 	bl	8001282 <AntennaOn>
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40020000 	.word	0x40020000
 8001300:	40020400 	.word	0x40020400

08001304 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b089      	sub	sp, #36	@ 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4603      	mov	r3, r0
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	4613      	mov	r3, r2
 8001314:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8001316:	2302      	movs	r3, #2
 8001318:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 800131a:	2300      	movs	r3, #0
 800131c:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 800131e:	2300      	movs	r3, #0
 8001320:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	2b0c      	cmp	r3, #12
 8001326:	d006      	beq.n	8001336 <MFRC522_ToCard+0x32>
 8001328:	2b0e      	cmp	r3, #14
 800132a:	d109      	bne.n	8001340 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 800132c:	2312      	movs	r3, #18
 800132e:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8001330:	2310      	movs	r3, #16
 8001332:	777b      	strb	r3, [r7, #29]
			break;
 8001334:	e005      	b.n	8001342 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8001336:	2377      	movs	r3, #119	@ 0x77
 8001338:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 800133a:	2330      	movs	r3, #48	@ 0x30
 800133c:	777b      	strb	r3, [r7, #29]
			break;
 800133e:	e000      	b.n	8001342 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001340:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8001342:	7fbb      	ldrb	r3, [r7, #30]
 8001344:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001348:	b2db      	uxtb	r3, r3
 800134a:	4619      	mov	r1, r3
 800134c:	2002      	movs	r0, #2
 800134e:	f7ff ff0f 	bl	8001170 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8001352:	2180      	movs	r1, #128	@ 0x80
 8001354:	2004      	movs	r0, #4
 8001356:	f7ff ff74 	bl	8001242 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 800135a:	2180      	movs	r1, #128	@ 0x80
 800135c:	200a      	movs	r0, #10
 800135e:	f7ff ff55 	bl	800120c <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8001362:	2100      	movs	r1, #0
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff ff03 	bl	8001170 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	e00a      	b.n	8001386 <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	2009      	movs	r0, #9
 800137c:	f7ff fef8 	bl	8001170 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	3301      	adds	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	7bbb      	ldrb	r3, [r7, #14]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	429a      	cmp	r2, r3
 800138c:	d3f0      	bcc.n	8001370 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	4619      	mov	r1, r3
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff feec 	bl	8001170 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	2b0c      	cmp	r3, #12
 800139c:	d103      	bne.n	80013a6 <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 800139e:	2180      	movs	r1, #128	@ 0x80
 80013a0:	200d      	movs	r0, #13
 80013a2:	f7ff ff33 	bl	800120c <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80013a6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80013aa:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80013ac:	2004      	movs	r0, #4
 80013ae:	f7ff ff05 	bl	80011bc <Read_MFRC522>
 80013b2:	4603      	mov	r3, r0
 80013b4:	773b      	strb	r3, [r7, #28]
        i--;
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00a      	beq.n	80013d8 <MFRC522_ToCard+0xd4>
 80013c2:	7f3b      	ldrb	r3, [r7, #28]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d105      	bne.n	80013d8 <MFRC522_ToCard+0xd4>
 80013cc:	7f3a      	ldrb	r2, [r7, #28]
 80013ce:	7f7b      	ldrb	r3, [r7, #29]
 80013d0:	4013      	ands	r3, r2
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0e9      	beq.n	80013ac <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80013d8:	2180      	movs	r1, #128	@ 0x80
 80013da:	200d      	movs	r0, #13
 80013dc:	f7ff ff31 	bl	8001242 <ClearBitMask>

    if (i != 0)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d052      	beq.n	800148c <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80013e6:	2006      	movs	r0, #6
 80013e8:	f7ff fee8 	bl	80011bc <Read_MFRC522>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f003 031b 	and.w	r3, r3, #27
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d148      	bne.n	8001488 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 80013fa:	7f3a      	ldrb	r2, [r7, #28]
 80013fc:	7fbb      	ldrb	r3, [r7, #30]
 80013fe:	4013      	ands	r3, r2
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 800140a:	2301      	movs	r3, #1
 800140c:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	2b0c      	cmp	r3, #12
 8001412:	d13b      	bne.n	800148c <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8001414:	200a      	movs	r0, #10
 8001416:	f7ff fed1 	bl	80011bc <Read_MFRC522>
 800141a:	4603      	mov	r3, r0
 800141c:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 800141e:	200c      	movs	r0, #12
 8001420:	f7ff fecc 	bl	80011bc <Read_MFRC522>
 8001424:	4603      	mov	r3, r0
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d008      	beq.n	8001444 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8001432:	7f3b      	ldrb	r3, [r7, #28]
 8001434:	3b01      	subs	r3, #1
 8001436:	00da      	lsls	r2, r3, #3
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	4413      	add	r3, r2
 800143c:	461a      	mov	r2, r3
 800143e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e004      	b.n	800144e <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8001444:	7f3b      	ldrb	r3, [r7, #28]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	461a      	mov	r2, r3
 800144a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800144c:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 800144e:	7f3b      	ldrb	r3, [r7, #28]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <MFRC522_ToCard+0x154>
                {
					n = 1;
 8001454:	2301      	movs	r3, #1
 8001456:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8001458:	7f3b      	ldrb	r3, [r7, #28]
 800145a:	2b10      	cmp	r3, #16
 800145c:	d901      	bls.n	8001462 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 800145e:	2310      	movs	r3, #16
 8001460:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	e00a      	b.n	800147e <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	18d4      	adds	r4, r2, r3
 800146e:	2009      	movs	r0, #9
 8001470:	f7ff fea4 	bl	80011bc <Read_MFRC522>
 8001474:	4603      	mov	r3, r0
 8001476:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	3301      	adds	r3, #1
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	7f3b      	ldrb	r3, [r7, #28]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	429a      	cmp	r2, r3
 8001484:	d3f0      	bcc.n	8001468 <MFRC522_ToCard+0x164>
 8001486:	e001      	b.n	800148c <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8001488:	2302      	movs	r3, #2
 800148a:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 800148c:	7ffb      	ldrb	r3, [r7, #31]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	@ 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}

08001496 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af02      	add	r7, sp, #8
 800149c:	4603      	mov	r3, r0
 800149e:	6039      	str	r1, [r7, #0]
 80014a0:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80014a2:	2107      	movs	r1, #7
 80014a4:	200d      	movs	r0, #13
 80014a6:	f7ff fe63 	bl	8001170 <Write_MFRC522>

	TagType[0] = reqMode;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	79fa      	ldrb	r2, [r7, #7]
 80014ae:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2201      	movs	r2, #1
 80014ba:	6839      	ldr	r1, [r7, #0]
 80014bc:	200c      	movs	r0, #12
 80014be:	f7ff ff21 	bl	8001304 <MFRC522_ToCard>
 80014c2:	4603      	mov	r3, r0
 80014c4:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <MFRC522_Request+0x3c>
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b10      	cmp	r3, #16
 80014d0:	d001      	beq.n	80014d6 <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 80014d2:	2302      	movs	r3, #2
 80014d4:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80014ec:	2100      	movs	r1, #0
 80014ee:	200d      	movs	r0, #13
 80014f0:	f7ff fe3e 	bl	8001170 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2293      	movs	r2, #147	@ 0x93
 80014f8:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3301      	adds	r3, #1
 80014fe:	2220      	movs	r2, #32
 8001500:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	200c      	movs	r0, #12
 8001510:	f7ff fef8 	bl	8001304 <MFRC522_ToCard>
 8001514:	4603      	mov	r3, r0
 8001516:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d118      	bne.n	8001550 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 800151e:	2300      	movs	r3, #0
 8001520:	73bb      	strb	r3, [r7, #14]
 8001522:	e009      	b.n	8001538 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8001524:	7bbb      	ldrb	r3, [r7, #14]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	7b7b      	ldrb	r3, [r7, #13]
 800152e:	4053      	eors	r3, r2
 8001530:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8001532:	7bbb      	ldrb	r3, [r7, #14]
 8001534:	3301      	adds	r3, #1
 8001536:	73bb      	strb	r3, [r7, #14]
 8001538:	7bbb      	ldrb	r3, [r7, #14]
 800153a:	2b03      	cmp	r3, #3
 800153c:	d9f2      	bls.n	8001524 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 800153e:	7bbb      	ldrb	r3, [r7, #14]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	7b7a      	ldrb	r2, [r7, #13]
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 800154c:	2302      	movs	r3, #2
 800154e:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8001550:	7bfb      	ldrb	r3, [r7, #15]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <CalulateCRC>:
 * Description: CRC calculation with MF522
 * Input parameters: pIndata - To read the CRC data, len - the data length, pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC(uchar *pIndata, uchar len, uchar *pOutData)
{
 800155a:	b590      	push	{r4, r7, lr}
 800155c:	b087      	sub	sp, #28
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	460b      	mov	r3, r1
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	72fb      	strb	r3, [r7, #11]
    uchar i, n;

    ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 8001568:	2104      	movs	r1, #4
 800156a:	2005      	movs	r0, #5
 800156c:	f7ff fe69 	bl	8001242 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
 8001570:	2180      	movs	r1, #128	@ 0x80
 8001572:	200a      	movs	r0, #10
 8001574:	f7ff fe4a 	bl	800120c <SetBitMask>

    //Writing data to the FIFO
    for (i=0; i<len; i++)
 8001578:	2300      	movs	r3, #0
 800157a:	75fb      	strb	r3, [r7, #23]
 800157c:	e00a      	b.n	8001594 <CalulateCRC+0x3a>
    {
		Write_MFRC522(FIFODataReg, *(pIndata+i));
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	4619      	mov	r1, r3
 8001588:	2009      	movs	r0, #9
 800158a:	f7ff fdf1 	bl	8001170 <Write_MFRC522>
    for (i=0; i<len; i++)
 800158e:	7dfb      	ldrb	r3, [r7, #23]
 8001590:	3301      	adds	r3, #1
 8001592:	75fb      	strb	r3, [r7, #23]
 8001594:	7dfa      	ldrb	r2, [r7, #23]
 8001596:	7afb      	ldrb	r3, [r7, #11]
 8001598:	429a      	cmp	r2, r3
 800159a:	d3f0      	bcc.n	800157e <CalulateCRC+0x24>
	}
    Write_MFRC522(CommandReg, PCD_CALCCRC);
 800159c:	2103      	movs	r1, #3
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff fde6 	bl	8001170 <Write_MFRC522>

    //Wait CRC calculation is complete
    i = 0xFF;
 80015a4:	23ff      	movs	r3, #255	@ 0xff
 80015a6:	75fb      	strb	r3, [r7, #23]
    do
    {
        n = Read_MFRC522(DivIrqReg);
 80015a8:	2005      	movs	r0, #5
 80015aa:	f7ff fe07 	bl	80011bc <Read_MFRC522>
 80015ae:	4603      	mov	r3, r0
 80015b0:	75bb      	strb	r3, [r7, #22]
        i--;
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	75fb      	strb	r3, [r7, #23]
    }
    while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d004      	beq.n	80015c8 <CalulateCRC+0x6e>
 80015be:	7dbb      	ldrb	r3, [r7, #22]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0ef      	beq.n	80015a8 <CalulateCRC+0x4e>

    //Read CRC calculation result
    pOutData[0] = Read_MFRC522(CRCResultRegL);
 80015c8:	2022      	movs	r0, #34	@ 0x22
 80015ca:	f7ff fdf7 	bl	80011bc <Read_MFRC522>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	701a      	strb	r2, [r3, #0]
    pOutData[1] = Read_MFRC522(CRCResultRegH);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	1c5c      	adds	r4, r3, #1
 80015da:	2021      	movs	r0, #33	@ 0x21
 80015dc:	f7ff fdee 	bl	80011bc <Read_MFRC522>
 80015e0:	4603      	mov	r3, r0
 80015e2:	7023      	strb	r3, [r4, #0]
}
 80015e4:	bf00      	nop
 80015e6:	371c      	adds	r7, #28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd90      	pop	{r4, r7, pc}

080015ec <MFRC522_SelectTag>:
 * Description: election card, read the card memory capacity
 * Input parameters: serNum - Incoming card serial number
 * Return value: the successful return of card capacity
 */
uchar MFRC522_SelectTag(uchar *serNum)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	6078      	str	r0, [r7, #4]
	uint recvBits;
	uchar buffer[9];

	//ClearBitMask(Status2Reg, 0x08);			//MFCrypto1On=0

    buffer[0] = PICC_SElECTTAG;
 80015f4:	2393      	movs	r3, #147	@ 0x93
 80015f6:	733b      	strb	r3, [r7, #12]
    buffer[1] = 0x70;
 80015f8:	2370      	movs	r3, #112	@ 0x70
 80015fa:	737b      	strb	r3, [r7, #13]
    for (i=0; i<5; i++)
 80015fc:	2300      	movs	r3, #0
 80015fe:	77fb      	strb	r3, [r7, #31]
 8001600:	e00c      	b.n	800161c <MFRC522_SelectTag+0x30>
    {
    	buffer[i+2] = *(serNum+i);
 8001602:	7ffb      	ldrb	r3, [r7, #31]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	441a      	add	r2, r3
 8001608:	7ffb      	ldrb	r3, [r7, #31]
 800160a:	3302      	adds	r3, #2
 800160c:	7812      	ldrb	r2, [r2, #0]
 800160e:	3320      	adds	r3, #32
 8001610:	443b      	add	r3, r7
 8001612:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<5; i++)
 8001616:	7ffb      	ldrb	r3, [r7, #31]
 8001618:	3301      	adds	r3, #1
 800161a:	77fb      	strb	r3, [r7, #31]
 800161c:	7ffb      	ldrb	r3, [r7, #31]
 800161e:	2b04      	cmp	r3, #4
 8001620:	d9ef      	bls.n	8001602 <MFRC522_SelectTag+0x16>
    }
	CalulateCRC(buffer, 7, &buffer[7]);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	1dda      	adds	r2, r3, #7
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	2107      	movs	r1, #7
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff93 	bl	800155a <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 8001634:	f107 020c 	add.w	r2, r7, #12
 8001638:	f107 010c 	add.w	r1, r7, #12
 800163c:	f107 0318 	add.w	r3, r7, #24
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	4613      	mov	r3, r2
 8001644:	2209      	movs	r2, #9
 8001646:	200c      	movs	r0, #12
 8001648:	f7ff fe5c 	bl	8001304 <MFRC522_ToCard>
 800164c:	4603      	mov	r3, r0
 800164e:	777b      	strb	r3, [r7, #29]

    if ((status == MI_OK) && (recvBits == 0x18))
 8001650:	7f7b      	ldrb	r3, [r7, #29]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d105      	bne.n	8001662 <MFRC522_SelectTag+0x76>
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	2b18      	cmp	r3, #24
 800165a:	d102      	bne.n	8001662 <MFRC522_SelectTag+0x76>
    {
		size = buffer[0];
 800165c:	7b3b      	ldrb	r3, [r7, #12]
 800165e:	77bb      	strb	r3, [r7, #30]
 8001660:	e001      	b.n	8001666 <MFRC522_SelectTag+0x7a>
	}
    else
    {
		size = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	77bb      	strb	r3, [r7, #30]
	}

    return size;
 8001666:	7fbb      	ldrb	r3, [r7, #30]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3720      	adds	r7, #32
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <MFRC522_Auth>:
             Sectorkey--Sector password
             serNum--Card serial number, 4-byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Auth(uchar authMode, uchar BlockAddr, uchar *Sectorkey, uchar *serNum)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08c      	sub	sp, #48	@ 0x30
 8001674:	af02      	add	r7, sp, #8
 8001676:	60ba      	str	r2, [r7, #8]
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	4603      	mov	r3, r0
 800167c:	73fb      	strb	r3, [r7, #15]
 800167e:	460b      	mov	r3, r1
 8001680:	73bb      	strb	r3, [r7, #14]
    uint recvBits;
    uchar i;
	uchar buff[12];

	//Verify the command block address + sector + password + card serial number
    buff[0] = authMode;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	753b      	strb	r3, [r7, #20]
    buff[1] = BlockAddr;
 8001686:	7bbb      	ldrb	r3, [r7, #14]
 8001688:	757b      	strb	r3, [r7, #21]
    for (i=0; i<6; i++)
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001690:	e010      	b.n	80016b4 <MFRC522_Auth+0x44>
    {
		buff[i+2] = *(Sectorkey+i);
 8001692:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	441a      	add	r2, r3
 800169a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800169e:	3302      	adds	r3, #2
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	3328      	adds	r3, #40	@ 0x28
 80016a4:	443b      	add	r3, r7
 80016a6:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<6; i++)
 80016aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016ae:	3301      	adds	r3, #1
 80016b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80016b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d9ea      	bls.n	8001692 <MFRC522_Auth+0x22>
	}
    for (i=0; i<4; i++)
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80016c2:	e010      	b.n	80016e6 <MFRC522_Auth+0x76>
    {
		buff[i+8] = *(serNum+i);
 80016c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	441a      	add	r2, r3
 80016cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016d0:	3308      	adds	r3, #8
 80016d2:	7812      	ldrb	r2, [r2, #0]
 80016d4:	3328      	adds	r3, #40	@ 0x28
 80016d6:	443b      	add	r3, r7
 80016d8:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<4; i++)
 80016dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016e0:	3301      	adds	r3, #1
 80016e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80016e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d9ea      	bls.n	80016c4 <MFRC522_Auth+0x54>
	}
    status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 80016ee:	f107 0214 	add.w	r2, r7, #20
 80016f2:	f107 0114 	add.w	r1, r7, #20
 80016f6:	f107 0320 	add.w	r3, r7, #32
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	4613      	mov	r3, r2
 80016fe:	220c      	movs	r2, #12
 8001700:	200e      	movs	r0, #14
 8001702:	f7ff fdff 	bl	8001304 <MFRC522_ToCard>
 8001706:	4603      	mov	r3, r0
 8001708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if ((status != MI_OK) || (!(Read_MFRC522(Status2Reg) & 0x08)))
 800170c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001710:	2b00      	cmp	r3, #0
 8001712:	d107      	bne.n	8001724 <MFRC522_Auth+0xb4>
 8001714:	2008      	movs	r0, #8
 8001716:	f7ff fd51 	bl	80011bc <Read_MFRC522>
 800171a:	4603      	mov	r3, r0
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <MFRC522_Auth+0xba>
    {
		status = MI_ERR;
 8001724:	2302      	movs	r3, #2
 8001726:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

    return status;
 800172a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800172e:	4618      	mov	r0, r3
 8001730:	3728      	adds	r7, #40	@ 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <MFRC522_Read>:
 * Description: Read block data
 * Input parameters: blockAddr - block address; recvData - read block data
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Read(uchar blockAddr, uchar *recvData)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af02      	add	r7, sp, #8
 800173c:	4603      	mov	r3, r0
 800173e:	6039      	str	r1, [r7, #0]
 8001740:	71fb      	strb	r3, [r7, #7]
    uchar status;
    uint unLen;

    recvData[0] = PICC_READ;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	2230      	movs	r2, #48	@ 0x30
 8001746:	701a      	strb	r2, [r3, #0]
    recvData[1] = blockAddr;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	79fa      	ldrb	r2, [r7, #7]
 800174e:	701a      	strb	r2, [r3, #0]
    CalulateCRC(recvData,2, &recvData[2]);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	3302      	adds	r3, #2
 8001754:	461a      	mov	r2, r3
 8001756:	2102      	movs	r1, #2
 8001758:	6838      	ldr	r0, [r7, #0]
 800175a:	f7ff fefe 	bl	800155a <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2204      	movs	r2, #4
 8001768:	6839      	ldr	r1, [r7, #0]
 800176a:	200c      	movs	r0, #12
 800176c:	f7ff fdca 	bl	8001304 <MFRC522_ToCard>
 8001770:	4603      	mov	r3, r0
 8001772:	73fb      	strb	r3, [r7, #15]

    if ((status != MI_OK) || (unLen != 0x90))
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <MFRC522_Read+0x4a>
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2b90      	cmp	r3, #144	@ 0x90
 800177e:	d001      	beq.n	8001784 <MFRC522_Read+0x4e>
    {
        status = MI_ERR;
 8001780:	2302      	movs	r3, #2
 8001782:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <MFRC522_Halt>:
 * Description: Command card into hibernation
 * Input: None
 * Return value: None
 */
void MFRC522_Halt(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af02      	add	r7, sp, #8
	uint unLen;
	uchar buff[4];

	buff[0] = PICC_HALT;
 8001794:	2350      	movs	r3, #80	@ 0x50
 8001796:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	707b      	strb	r3, [r7, #1]
	CalulateCRC(buff, 2, &buff[2]);
 800179c:	463b      	mov	r3, r7
 800179e:	1c9a      	adds	r2, r3, #2
 80017a0:	463b      	mov	r3, r7
 80017a2:	2102      	movs	r1, #2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fed8 	bl	800155a <CalulateCRC>

	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
 80017aa:	463a      	mov	r2, r7
 80017ac:	4639      	mov	r1, r7
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	4613      	mov	r3, r2
 80017b4:	2204      	movs	r2, #4
 80017b6:	200c      	movs	r0, #12
 80017b8:	f7ff fda4 	bl	8001304 <MFRC522_ToCard>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <RB_Read>:
//
// RingBuffer_t *Buf - pointer to Ring Buffer structure
// uint8_t *Value - pointer to place where a value from buffer is read
//
RB_Status RB_Read(RingBuffer_t *Buf, uint8_t *Value)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
	// Check if Tail hit Head
	if(Buf->Head == Buf->Tail)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	881a      	ldrh	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	885b      	ldrh	r3, [r3, #2]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d101      	bne.n	80017de <RB_Read+0x1a>
	{
		// If yes - there is nothing to read
		return RB_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e015      	b.n	800180a <RB_Read+0x46>
	}

	// Write current value from buffer to pointer from argument
	*Value = Buf->Buffer[Buf->Tail];
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	885b      	ldrh	r3, [r3, #2]
 80017e2:	461a      	mov	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	791a      	ldrb	r2, [r3, #4]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	701a      	strb	r2, [r3, #0]

	// Calculate new Tail pointer
	Buf->Tail = (Buf->Tail + 1) % RING_BUFFER_SIZE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	885b      	ldrh	r3, [r3, #2]
 80017f2:	3301      	adds	r3, #1
 80017f4:	425a      	negs	r2, r3
 80017f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017fa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80017fe:	bf58      	it	pl
 8001800:	4253      	negpl	r3, r2
 8001802:	b29a      	uxth	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	805a      	strh	r2, [r3, #2]

	// Everything is ok - return OK status
	return RB_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <RB_Write>:
//
// RingBuffer_t *Buf - pointer to Ring Buffer structure
// uint8_t Value - a value to store in the buffer
//
RB_Status RB_Write(RingBuffer_t *Buf, uint8_t Value)
{
 8001816:	b480      	push	{r7}
 8001818:	b085      	sub	sp, #20
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	70fb      	strb	r3, [r7, #3]
	// Calculate new Head pointer value
	uint8_t HeadTmp = (Buf->Head + 1) % RING_BUFFER_SIZE;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	3301      	adds	r3, #1
 8001828:	425a      	negs	r2, r3
 800182a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800182e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001832:	bf58      	it	pl
 8001834:	4253      	negpl	r3, r2
 8001836:	73fb      	strb	r3, [r7, #15]

	// Check if there is one free space ahead the Head buffer
	if(HeadTmp == Buf->Tail)
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	b29a      	uxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	885b      	ldrh	r3, [r3, #2]
 8001840:	429a      	cmp	r2, r3
 8001842:	d101      	bne.n	8001848 <RB_Write+0x32>
	{
		// There is no space in the buffer - return an error
		return RB_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e00b      	b.n	8001860 <RB_Write+0x4a>
	}

	// Store a value into the buffer
	Buf->Buffer[Buf->Head] = Value;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	78fa      	ldrb	r2, [r7, #3]
 8001854:	711a      	strb	r2, [r3, #4]

	// Remember a new Head pointer value
	Buf->Head = HeadTmp;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	b29a      	uxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	801a      	strh	r2, [r3, #0]

	// Everything is ok - return OK status
	return RB_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <RB_Flush>:

//
// Free whole Ring Buffer
//
void RB_Flush(RingBuffer_t *Buf)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	// Just reset Head and Tail pointers
	Buf->Head = 0;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	801a      	strh	r2, [r3, #0]
	Buf->Tail = 0;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	805a      	strh	r2, [r3, #2]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001890:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <MX_SPI1_Init+0x64>)
 8001892:	4a18      	ldr	r2, [pc, #96]	@ (80018f4 <MX_SPI1_Init+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001896:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <MX_SPI1_Init+0x64>)
 8001898:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800189c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800189e:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <MX_SPI1_Init+0x64>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <MX_SPI1_Init+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018aa:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MX_SPI1_Init+0x64>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <MX_SPI1_Init+0x64>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MX_SPI1_Init+0x64>)
 80018b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_SPI1_Init+0x64>)
 80018c0:	2210      	movs	r2, #16
 80018c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <MX_SPI1_Init+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <MX_SPI1_Init+0x64>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d0:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <MX_SPI1_Init+0x64>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <MX_SPI1_Init+0x64>)
 80018d8:	220a      	movs	r2, #10
 80018da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018dc:	4804      	ldr	r0, [pc, #16]	@ (80018f0 <MX_SPI1_Init+0x64>)
 80018de:	f001 ff5f 	bl	80037a0 <HAL_SPI_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018e8:	f7ff fba4 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000158 	.word	0x20000158
 80018f4:	40013000 	.word	0x40013000

080018f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a19      	ldr	r2, [pc, #100]	@ (800197c <HAL_SPI_MspInit+0x84>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d12b      	bne.n	8001972 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b18      	ldr	r3, [pc, #96]	@ (8001980 <HAL_SPI_MspInit+0x88>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001922:	4a17      	ldr	r2, [pc, #92]	@ (8001980 <HAL_SPI_MspInit+0x88>)
 8001924:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001928:	6453      	str	r3, [r2, #68]	@ 0x44
 800192a:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <HAL_SPI_MspInit+0x88>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <HAL_SPI_MspInit+0x88>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4a10      	ldr	r2, [pc, #64]	@ (8001980 <HAL_SPI_MspInit+0x88>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6313      	str	r3, [r2, #48]	@ 0x30
 8001946:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <HAL_SPI_MspInit+0x88>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001952:	23e0      	movs	r3, #224	@ 0xe0
 8001954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001962:	2305      	movs	r3, #5
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	@ (8001984 <HAL_SPI_MspInit+0x8c>)
 800196e:	f000 ff85 	bl	800287c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001972:	bf00      	nop
 8001974:	3728      	adds	r7, #40	@ 0x28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40013000 	.word	0x40013000
 8001980:	40023800 	.word	0x40023800
 8001984:	40020000 	.word	0x40020000

08001988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <HAL_MspInit+0x4c>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001996:	4a0f      	ldr	r2, [pc, #60]	@ (80019d4 <HAL_MspInit+0x4c>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800199c:	6453      	str	r3, [r2, #68]	@ 0x44
 800199e:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <HAL_MspInit+0x4c>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <HAL_MspInit+0x4c>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	4a08      	ldr	r2, [pc, #32]	@ (80019d4 <HAL_MspInit+0x4c>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ba:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_MspInit+0x4c>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019c6:	2007      	movs	r0, #7
 80019c8:	f000 fb9a 	bl	8002100 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40023800 	.word	0x40023800

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <NMI_Handler+0x4>

080019e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	//  HAL_GPIO_WritePin(Hirata_NG_GPIO_Port, Hirata_NG_Pin, GPIO_PIN_RESET);
	  //UART_Log("Hard Fault\n\r");
	  HAL_GPIO_WritePin(ST_RED_GPIO_Port, ST_RED_Pin, GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	2104      	movs	r1, #4
 80019e8:	4801      	ldr	r0, [pc, #4]	@ (80019f0 <HardFault_Handler+0x10>)
 80019ea:	f001 f8e3 	bl	8002bb4 <HAL_GPIO_WritePin>
 80019ee:	e7f9      	b.n	80019e4 <HardFault_Handler+0x4>
 80019f0:	40020c00 	.word	0x40020c00

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <MemManage_Handler+0x4>

080019fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <BusFault_Handler+0x4>

08001a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <UsageFault_Handler+0x4>

08001a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a3a:	f000 fa4d 	bl	8001ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001a48:	4802      	ldr	r0, [pc, #8]	@ (8001a54 <DMA2_Stream1_IRQHandler+0x10>)
 8001a4a:	f000 fcdb 	bl	8002404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000288 	.word	0x20000288

08001a58 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001a5c:	4802      	ldr	r0, [pc, #8]	@ (8001a68 <DMA2_Stream6_IRQHandler+0x10>)
 8001a5e:	f000 fcd1 	bl	8002404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200002e8 	.word	0x200002e8

08001a6c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a70:	4802      	ldr	r0, [pc, #8]	@ (8001a7c <USART6_IRQHandler+0x10>)
 8001a72:	f002 faa3 	bl	8003fbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000240 	.word	0x20000240

08001a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <SystemInit+0x20>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a8a:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <SystemInit+0x20>)
 8001a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001aaa:	4a12      	ldr	r2, [pc, #72]	@ (8001af4 <MX_USART1_UART_Init+0x50>)
 8001aac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aae:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001ab0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ab4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001aca:	220c      	movs	r2, #12
 8001acc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ace:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ada:	4805      	ldr	r0, [pc, #20]	@ (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001adc:	f002 f96e 	bl	8003dbc <HAL_UART_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ae6:	f7ff faa5 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200001b0 	.word	0x200001b0
 8001af4:	40011000 	.word	0x40011000

08001af8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001afc:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	@ (8001b48 <MX_USART2_UART_Init+0x50>)
 8001b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b02:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b2e:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b30:	f002 f944 	bl	8003dbc <HAL_UART_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b3a:	f7ff fa7b 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200001f8 	.word	0x200001f8
 8001b48:	40004400 	.word	0x40004400

08001b4c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b50:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <MX_USART6_UART_Init+0x4c>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <MX_USART6_UART_Init+0x50>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001b56:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <MX_USART6_UART_Init+0x4c>)
 8001b58:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b5c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b98 <MX_USART6_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <MX_USART6_UART_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <MX_USART6_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <MX_USART6_UART_Init+0x4c>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <MX_USART6_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <MX_USART6_UART_Init+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <MX_USART6_UART_Init+0x4c>)
 8001b84:	f002 f91a 	bl	8003dbc <HAL_UART_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b8e:	f7ff fa51 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000240 	.word	0x20000240
 8001b9c:	40011400 	.word	0x40011400

08001ba0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08e      	sub	sp, #56	@ 0x38
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a7e      	ldr	r2, [pc, #504]	@ (8001db8 <HAL_UART_MspInit+0x218>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d12d      	bne.n	8001c1e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
 8001bc6:	4b7d      	ldr	r3, [pc, #500]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	4a7c      	ldr	r2, [pc, #496]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001bcc:	f043 0310 	orr.w	r3, r3, #16
 8001bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd2:	4b7a      	ldr	r3, [pc, #488]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	623b      	str	r3, [r7, #32]
 8001bdc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	4b76      	ldr	r3, [pc, #472]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	4a75      	ldr	r2, [pc, #468]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bee:	4b73      	ldr	r3, [pc, #460]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bfa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c14:	4619      	mov	r1, r3
 8001c16:	486a      	ldr	r0, [pc, #424]	@ (8001dc0 <HAL_UART_MspInit+0x220>)
 8001c18:	f000 fe30 	bl	800287c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001c1c:	e0c7      	b.n	8001dae <HAL_UART_MspInit+0x20e>
  else if(uartHandle->Instance==USART2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a68      	ldr	r2, [pc, #416]	@ (8001dc4 <HAL_UART_MspInit+0x224>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d12c      	bne.n	8001c82 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
 8001c2c:	4b63      	ldr	r3, [pc, #396]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	4a62      	ldr	r2, [pc, #392]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001c32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c38:	4b60      	ldr	r3, [pc, #384]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	4b5c      	ldr	r3, [pc, #368]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4c:	4a5b      	ldr	r2, [pc, #364]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c54:	4b59      	ldr	r3, [pc, #356]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c60:	230c      	movs	r3, #12
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c70:	2307      	movs	r3, #7
 8001c72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4851      	ldr	r0, [pc, #324]	@ (8001dc0 <HAL_UART_MspInit+0x220>)
 8001c7c:	f000 fdfe 	bl	800287c <HAL_GPIO_Init>
}
 8001c80:	e095      	b.n	8001dae <HAL_UART_MspInit+0x20e>
  else if(uartHandle->Instance==USART6)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a50      	ldr	r2, [pc, #320]	@ (8001dc8 <HAL_UART_MspInit+0x228>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	f040 8090 	bne.w	8001dae <HAL_UART_MspInit+0x20e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	4b4a      	ldr	r3, [pc, #296]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	4a49      	ldr	r2, [pc, #292]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001c98:	f043 0320 	orr.w	r3, r3, #32
 8001c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c9e:	4b47      	ldr	r3, [pc, #284]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b43      	ldr	r3, [pc, #268]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	4a42      	ldr	r2, [pc, #264]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cba:	4b40      	ldr	r3, [pc, #256]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cc6:	23c0      	movs	r3, #192	@ 0xc0
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cde:	4619      	mov	r1, r3
 8001ce0:	483a      	ldr	r0, [pc, #232]	@ (8001dcc <HAL_UART_MspInit+0x22c>)
 8001ce2:	f000 fdcb 	bl	800287c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd0 <HAL_UART_MspInit+0x230>)
 8001ce8:	4a3a      	ldr	r2, [pc, #232]	@ (8001dd4 <HAL_UART_MspInit+0x234>)
 8001cea:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001cec:	4b38      	ldr	r3, [pc, #224]	@ (8001dd0 <HAL_UART_MspInit+0x230>)
 8001cee:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001cf2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cf4:	4b36      	ldr	r3, [pc, #216]	@ (8001dd0 <HAL_UART_MspInit+0x230>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cfa:	4b35      	ldr	r3, [pc, #212]	@ (8001dd0 <HAL_UART_MspInit+0x230>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d00:	4b33      	ldr	r3, [pc, #204]	@ (8001dd0 <HAL_UART_MspInit+0x230>)
 8001d02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d06:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d08:	4b31      	ldr	r3, [pc, #196]	@ (8001dd0 <HAL_UART_MspInit+0x230>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d0e:	4b30      	ldr	r3, [pc, #192]	@ (8001dd0 <HAL_UART_MspInit+0x230>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001d14:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd0 <HAL_UART_MspInit+0x230>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_UART_MspInit+0x230>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d20:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd0 <HAL_UART_MspInit+0x230>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001d26:	482a      	ldr	r0, [pc, #168]	@ (8001dd0 <HAL_UART_MspInit+0x230>)
 8001d28:	f000 fa2c 	bl	8002184 <HAL_DMA_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_UART_MspInit+0x196>
      Error_Handler();
 8001d32:	f7ff f97f 	bl	8001034 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a25      	ldr	r2, [pc, #148]	@ (8001dd0 <HAL_UART_MspInit+0x230>)
 8001d3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d3c:	4a24      	ldr	r2, [pc, #144]	@ (8001dd0 <HAL_UART_MspInit+0x230>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001d42:	4b25      	ldr	r3, [pc, #148]	@ (8001dd8 <HAL_UART_MspInit+0x238>)
 8001d44:	4a25      	ldr	r2, [pc, #148]	@ (8001ddc <HAL_UART_MspInit+0x23c>)
 8001d46:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001d48:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <HAL_UART_MspInit+0x238>)
 8001d4a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001d4e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d50:	4b21      	ldr	r3, [pc, #132]	@ (8001dd8 <HAL_UART_MspInit+0x238>)
 8001d52:	2240      	movs	r2, #64	@ 0x40
 8001d54:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d56:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <HAL_UART_MspInit+0x238>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd8 <HAL_UART_MspInit+0x238>)
 8001d5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d62:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d64:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd8 <HAL_UART_MspInit+0x238>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <HAL_UART_MspInit+0x238>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001d70:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <HAL_UART_MspInit+0x238>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d76:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <HAL_UART_MspInit+0x238>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d7c:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <HAL_UART_MspInit+0x238>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001d82:	4815      	ldr	r0, [pc, #84]	@ (8001dd8 <HAL_UART_MspInit+0x238>)
 8001d84:	f000 f9fe 	bl	8002184 <HAL_DMA_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_UART_MspInit+0x1f2>
      Error_Handler();
 8001d8e:	f7ff f951 	bl	8001034 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a10      	ldr	r2, [pc, #64]	@ (8001dd8 <HAL_UART_MspInit+0x238>)
 8001d96:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d98:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd8 <HAL_UART_MspInit+0x238>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	2047      	movs	r0, #71	@ 0x47
 8001da4:	f000 f9b7 	bl	8002116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001da8:	2047      	movs	r0, #71	@ 0x47
 8001daa:	f000 f9d0 	bl	800214e <HAL_NVIC_EnableIRQ>
}
 8001dae:	bf00      	nop
 8001db0:	3738      	adds	r7, #56	@ 0x38
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40011000 	.word	0x40011000
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	40004400 	.word	0x40004400
 8001dc8:	40011400 	.word	0x40011400
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	20000288 	.word	0x20000288
 8001dd4:	40026428 	.word	0x40026428
 8001dd8:	200002e8 	.word	0x200002e8
 8001ddc:	400264a0 	.word	0x400264a0

08001de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001de0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001de4:	f7ff fe4c 	bl	8001a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001de8:	480c      	ldr	r0, [pc, #48]	@ (8001e1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dea:	490d      	ldr	r1, [pc, #52]	@ (8001e20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dec:	4a0d      	ldr	r2, [pc, #52]	@ (8001e24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df0:	e002      	b.n	8001df8 <LoopCopyDataInit>

08001df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df6:	3304      	adds	r3, #4

08001df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dfc:	d3f9      	bcc.n	8001df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001e28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e00:	4c0a      	ldr	r4, [pc, #40]	@ (8001e2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e04:	e001      	b.n	8001e0a <LoopFillZerobss>

08001e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e08:	3204      	adds	r2, #4

08001e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e0c:	d3fb      	bcc.n	8001e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e0e:	f003 f833 	bl	8004e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e12:	f7fe fce1 	bl	80007d8 <main>
  bx  lr    
 8001e16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e20:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001e24:	08004ffc 	.word	0x08004ffc
  ldr r2, =_sbss
 8001e28:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001e2c:	2000034c 	.word	0x2000034c

08001e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e30:	e7fe      	b.n	8001e30 <ADC_IRQHandler>
	...

08001e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e38:	4b0e      	ldr	r3, [pc, #56]	@ (8001e74 <HAL_Init+0x40>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e74 <HAL_Init+0x40>)
 8001e3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e44:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <HAL_Init+0x40>)
 8001e4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e50:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a07      	ldr	r2, [pc, #28]	@ (8001e74 <HAL_Init+0x40>)
 8001e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f000 f94f 	bl	8002100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f000 f808 	bl	8001e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e68:	f7ff fd8e 	bl	8001988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40023c00 	.word	0x40023c00

08001e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e80:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <HAL_InitTick+0x54>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <HAL_InitTick+0x58>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 f967 	bl	800216a <HAL_SYSTICK_Config>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00e      	b.n	8001ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b0f      	cmp	r3, #15
 8001eaa:	d80a      	bhi.n	8001ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eac:	2200      	movs	r2, #0
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb4:	f000 f92f 	bl	8002116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb8:	4a06      	ldr	r2, [pc, #24]	@ (8001ed4 <HAL_InitTick+0x5c>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e000      	b.n	8001ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000024 	.word	0x20000024
 8001ed0:	2000002c 	.word	0x2000002c
 8001ed4:	20000028 	.word	0x20000028

08001ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <HAL_IncTick+0x20>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <HAL_IncTick+0x24>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a04      	ldr	r2, [pc, #16]	@ (8001efc <HAL_IncTick+0x24>)
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	2000002c 	.word	0x2000002c
 8001efc:	20000348 	.word	0x20000348

08001f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return uwTick;
 8001f04:	4b03      	ldr	r3, [pc, #12]	@ (8001f14 <HAL_GetTick+0x14>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000348 	.word	0x20000348

08001f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff ffee 	bl	8001f00 <HAL_GetTick>
 8001f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d005      	beq.n	8001f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f32:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <HAL_Delay+0x44>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f3e:	bf00      	nop
 8001f40:	f7ff ffde 	bl	8001f00 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d8f7      	bhi.n	8001f40 <HAL_Delay+0x28>
  {
  }
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2000002c 	.word	0x2000002c

08001f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f70:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f92:	4a04      	ldr	r2, [pc, #16]	@ (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	60d3      	str	r3, [r2, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fac:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	f003 0307 	and.w	r3, r3, #7
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	db0b      	blt.n	8001fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	f003 021f 	and.w	r2, r3, #31
 8001fdc:	4907      	ldr	r1, [pc, #28]	@ (8001ffc <__NVIC_EnableIRQ+0x38>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000e100 	.word	0xe000e100

08002000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	db0a      	blt.n	800202a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	490c      	ldr	r1, [pc, #48]	@ (800204c <__NVIC_SetPriority+0x4c>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	440b      	add	r3, r1
 8002024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002028:	e00a      	b.n	8002040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4908      	ldr	r1, [pc, #32]	@ (8002050 <__NVIC_SetPriority+0x50>)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	3b04      	subs	r3, #4
 8002038:	0112      	lsls	r2, r2, #4
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	440b      	add	r3, r1
 800203e:	761a      	strb	r2, [r3, #24]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000e100 	.word	0xe000e100
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	@ 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f1c3 0307 	rsb	r3, r3, #7
 800206e:	2b04      	cmp	r3, #4
 8002070:	bf28      	it	cs
 8002072:	2304      	movcs	r3, #4
 8002074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3304      	adds	r3, #4
 800207a:	2b06      	cmp	r3, #6
 800207c:	d902      	bls.n	8002084 <NVIC_EncodePriority+0x30>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3b03      	subs	r3, #3
 8002082:	e000      	b.n	8002086 <NVIC_EncodePriority+0x32>
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	401a      	ands	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800209c:	f04f 31ff 	mov.w	r1, #4294967295
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43d9      	mvns	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	4313      	orrs	r3, r2
         );
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3724      	adds	r7, #36	@ 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020cc:	d301      	bcc.n	80020d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ce:	2301      	movs	r3, #1
 80020d0:	e00f      	b.n	80020f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d2:	4a0a      	ldr	r2, [pc, #40]	@ (80020fc <SysTick_Config+0x40>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020da:	210f      	movs	r1, #15
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295
 80020e0:	f7ff ff8e 	bl	8002000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e4:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <SysTick_Config+0x40>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ea:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <SysTick_Config+0x40>)
 80020ec:	2207      	movs	r2, #7
 80020ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	e000e010 	.word	0xe000e010

08002100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ff29 	bl	8001f60 <__NVIC_SetPriorityGrouping>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002128:	f7ff ff3e 	bl	8001fa8 <__NVIC_GetPriorityGrouping>
 800212c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	f7ff ff8e 	bl	8002054 <NVIC_EncodePriority>
 8002138:	4602      	mov	r2, r0
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff5d 	bl	8002000 <__NVIC_SetPriority>
}
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff31 	bl	8001fc4 <__NVIC_EnableIRQ>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ffa2 	bl	80020bc <SysTick_Config>
 8002178:	4603      	mov	r3, r0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002190:	f7ff feb6 	bl	8001f00 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e099      	b.n	80022d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c0:	e00f      	b.n	80021e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021c2:	f7ff fe9d 	bl	8001f00 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d908      	bls.n	80021e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2220      	movs	r2, #32
 80021d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2203      	movs	r2, #3
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e078      	b.n	80022d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1e8      	bne.n	80021c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	4b38      	ldr	r3, [pc, #224]	@ (80022dc <HAL_DMA_Init+0x158>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800220e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800221a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002226:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4313      	orrs	r3, r2
 8002232:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	2b04      	cmp	r3, #4
 800223a:	d107      	bne.n	800224c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002244:	4313      	orrs	r3, r2
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f023 0307 	bic.w	r3, r3, #7
 8002262:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4313      	orrs	r3, r2
 800226c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002272:	2b04      	cmp	r3, #4
 8002274:	d117      	bne.n	80022a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	4313      	orrs	r3, r2
 800227e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00e      	beq.n	80022a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 fa7b 	bl	8002784 <DMA_CheckFifoParam>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2240      	movs	r2, #64	@ 0x40
 8002298:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80022a2:	2301      	movs	r3, #1
 80022a4:	e016      	b.n	80022d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fa32 	bl	8002718 <DMA_CalcBaseAndBitshift>
 80022b4:	4603      	mov	r3, r0
 80022b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022bc:	223f      	movs	r2, #63	@ 0x3f
 80022be:	409a      	lsls	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	f010803f 	.word	0xf010803f

080022e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022ee:	f7ff fe07 	bl	8001f00 <HAL_GetTick>
 80022f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d008      	beq.n	8002312 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2280      	movs	r2, #128	@ 0x80
 8002304:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e052      	b.n	80023b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0216 	bic.w	r2, r2, #22
 8002320:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002330:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <HAL_DMA_Abort+0x62>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0208 	bic.w	r2, r2, #8
 8002350:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0201 	bic.w	r2, r2, #1
 8002360:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002362:	e013      	b.n	800238c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002364:	f7ff fdcc 	bl	8001f00 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b05      	cmp	r3, #5
 8002370:	d90c      	bls.n	800238c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2220      	movs	r2, #32
 8002376:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2203      	movs	r2, #3
 800237c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e015      	b.n	80023b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1e4      	bne.n	8002364 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239e:	223f      	movs	r2, #63	@ 0x3f
 80023a0:	409a      	lsls	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d004      	beq.n	80023de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2280      	movs	r2, #128	@ 0x80
 80023d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e00c      	b.n	80023f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2205      	movs	r2, #5
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002410:	4b8e      	ldr	r3, [pc, #568]	@ (800264c <HAL_DMA_IRQHandler+0x248>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a8e      	ldr	r2, [pc, #568]	@ (8002650 <HAL_DMA_IRQHandler+0x24c>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	0a9b      	lsrs	r3, r3, #10
 800241c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002422:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242e:	2208      	movs	r2, #8
 8002430:	409a      	lsls	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4013      	ands	r3, r2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d01a      	beq.n	8002470 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0204 	bic.w	r2, r2, #4
 8002456:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245c:	2208      	movs	r2, #8
 800245e:	409a      	lsls	r2, r3
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002468:	f043 0201 	orr.w	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002474:	2201      	movs	r2, #1
 8002476:	409a      	lsls	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d012      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002492:	2201      	movs	r2, #1
 8002494:	409a      	lsls	r2, r3
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249e:	f043 0202 	orr.w	r2, r3, #2
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024aa:	2204      	movs	r2, #4
 80024ac:	409a      	lsls	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d012      	beq.n	80024dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00b      	beq.n	80024dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c8:	2204      	movs	r2, #4
 80024ca:	409a      	lsls	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d4:	f043 0204 	orr.w	r2, r3, #4
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e0:	2210      	movs	r2, #16
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d043      	beq.n	8002574 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d03c      	beq.n	8002574 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fe:	2210      	movs	r2, #16
 8002500:	409a      	lsls	r2, r3
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d018      	beq.n	8002546 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d108      	bne.n	8002534 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d024      	beq.n	8002574 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	4798      	blx	r3
 8002532:	e01f      	b.n	8002574 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01b      	beq.n	8002574 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	4798      	blx	r3
 8002544:	e016      	b.n	8002574 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d107      	bne.n	8002564 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0208 	bic.w	r2, r2, #8
 8002562:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002578:	2220      	movs	r2, #32
 800257a:	409a      	lsls	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 808f 	beq.w	80026a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 8087 	beq.w	80026a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259a:	2220      	movs	r2, #32
 800259c:	409a      	lsls	r2, r3
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	d136      	bne.n	800261c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0216 	bic.w	r2, r2, #22
 80025bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d103      	bne.n	80025de <HAL_DMA_IRQHandler+0x1da>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0208 	bic.w	r2, r2, #8
 80025ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f2:	223f      	movs	r2, #63	@ 0x3f
 80025f4:	409a      	lsls	r2, r3
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800260e:	2b00      	cmp	r3, #0
 8002610:	d07e      	beq.n	8002710 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	4798      	blx	r3
        }
        return;
 800261a:	e079      	b.n	8002710 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d01d      	beq.n	8002666 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10d      	bne.n	8002654 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263c:	2b00      	cmp	r3, #0
 800263e:	d031      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	4798      	blx	r3
 8002648:	e02c      	b.n	80026a4 <HAL_DMA_IRQHandler+0x2a0>
 800264a:	bf00      	nop
 800264c:	20000024 	.word	0x20000024
 8002650:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002658:	2b00      	cmp	r3, #0
 800265a:	d023      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	4798      	blx	r3
 8002664:	e01e      	b.n	80026a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10f      	bne.n	8002694 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0210 	bic.w	r2, r2, #16
 8002682:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d032      	beq.n	8002712 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d022      	beq.n	80026fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2205      	movs	r2, #5
 80026bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	3301      	adds	r3, #1
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d307      	bcc.n	80026ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f2      	bne.n	80026d0 <HAL_DMA_IRQHandler+0x2cc>
 80026ea:	e000      	b.n	80026ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	4798      	blx	r3
 800270e:	e000      	b.n	8002712 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002710:	bf00      	nop
    }
  }
}
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	3b10      	subs	r3, #16
 8002728:	4a14      	ldr	r2, [pc, #80]	@ (800277c <DMA_CalcBaseAndBitshift+0x64>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002732:	4a13      	ldr	r2, [pc, #76]	@ (8002780 <DMA_CalcBaseAndBitshift+0x68>)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b03      	cmp	r3, #3
 8002744:	d909      	bls.n	800275a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800274e:	f023 0303 	bic.w	r3, r3, #3
 8002752:	1d1a      	adds	r2, r3, #4
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	659a      	str	r2, [r3, #88]	@ 0x58
 8002758:	e007      	b.n	800276a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002762:	f023 0303 	bic.w	r3, r3, #3
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	aaaaaaab 	.word	0xaaaaaaab
 8002780:	08004fe4 	.word	0x08004fe4

08002784 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d11f      	bne.n	80027de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d856      	bhi.n	8002852 <DMA_CheckFifoParam+0xce>
 80027a4:	a201      	add	r2, pc, #4	@ (adr r2, 80027ac <DMA_CheckFifoParam+0x28>)
 80027a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027aa:	bf00      	nop
 80027ac:	080027bd 	.word	0x080027bd
 80027b0:	080027cf 	.word	0x080027cf
 80027b4:	080027bd 	.word	0x080027bd
 80027b8:	08002853 	.word	0x08002853
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d046      	beq.n	8002856 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027cc:	e043      	b.n	8002856 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027d6:	d140      	bne.n	800285a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027dc:	e03d      	b.n	800285a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027e6:	d121      	bne.n	800282c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d837      	bhi.n	800285e <DMA_CheckFifoParam+0xda>
 80027ee:	a201      	add	r2, pc, #4	@ (adr r2, 80027f4 <DMA_CheckFifoParam+0x70>)
 80027f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f4:	08002805 	.word	0x08002805
 80027f8:	0800280b 	.word	0x0800280b
 80027fc:	08002805 	.word	0x08002805
 8002800:	0800281d 	.word	0x0800281d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      break;
 8002808:	e030      	b.n	800286c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d025      	beq.n	8002862 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281a:	e022      	b.n	8002862 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002820:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002824:	d11f      	bne.n	8002866 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800282a:	e01c      	b.n	8002866 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d903      	bls.n	800283a <DMA_CheckFifoParam+0xb6>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d003      	beq.n	8002840 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002838:	e018      	b.n	800286c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
      break;
 800283e:	e015      	b.n	800286c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00e      	beq.n	800286a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
      break;
 8002850:	e00b      	b.n	800286a <DMA_CheckFifoParam+0xe6>
      break;
 8002852:	bf00      	nop
 8002854:	e00a      	b.n	800286c <DMA_CheckFifoParam+0xe8>
      break;
 8002856:	bf00      	nop
 8002858:	e008      	b.n	800286c <DMA_CheckFifoParam+0xe8>
      break;
 800285a:	bf00      	nop
 800285c:	e006      	b.n	800286c <DMA_CheckFifoParam+0xe8>
      break;
 800285e:	bf00      	nop
 8002860:	e004      	b.n	800286c <DMA_CheckFifoParam+0xe8>
      break;
 8002862:	bf00      	nop
 8002864:	e002      	b.n	800286c <DMA_CheckFifoParam+0xe8>
      break;   
 8002866:	bf00      	nop
 8002868:	e000      	b.n	800286c <DMA_CheckFifoParam+0xe8>
      break;
 800286a:	bf00      	nop
    }
  } 
  
  return status; 
 800286c:	7bfb      	ldrb	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop

0800287c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800287c:	b480      	push	{r7}
 800287e:	b089      	sub	sp, #36	@ 0x24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	e159      	b.n	8002b4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002898:	2201      	movs	r2, #1
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	f040 8148 	bne.w	8002b46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d005      	beq.n	80028ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d130      	bne.n	8002930 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	2203      	movs	r2, #3
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002904:	2201      	movs	r2, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 0201 	and.w	r2, r3, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b03      	cmp	r3, #3
 800293a:	d017      	beq.n	800296c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	2203      	movs	r2, #3
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d123      	bne.n	80029c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	08da      	lsrs	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3208      	adds	r2, #8
 8002980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	220f      	movs	r2, #15
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	08da      	lsrs	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3208      	adds	r2, #8
 80029ba:	69b9      	ldr	r1, [r7, #24]
 80029bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	2203      	movs	r2, #3
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0203 	and.w	r2, r3, #3
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80a2 	beq.w	8002b46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	4b57      	ldr	r3, [pc, #348]	@ (8002b64 <HAL_GPIO_Init+0x2e8>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0a:	4a56      	ldr	r2, [pc, #344]	@ (8002b64 <HAL_GPIO_Init+0x2e8>)
 8002a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a12:	4b54      	ldr	r3, [pc, #336]	@ (8002b64 <HAL_GPIO_Init+0x2e8>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a1e:	4a52      	ldr	r2, [pc, #328]	@ (8002b68 <HAL_GPIO_Init+0x2ec>)
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	089b      	lsrs	r3, r3, #2
 8002a24:	3302      	adds	r3, #2
 8002a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	220f      	movs	r2, #15
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a49      	ldr	r2, [pc, #292]	@ (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d019      	beq.n	8002a7e <HAL_GPIO_Init+0x202>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a48      	ldr	r2, [pc, #288]	@ (8002b70 <HAL_GPIO_Init+0x2f4>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <HAL_GPIO_Init+0x1fe>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a47      	ldr	r2, [pc, #284]	@ (8002b74 <HAL_GPIO_Init+0x2f8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00d      	beq.n	8002a76 <HAL_GPIO_Init+0x1fa>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a46      	ldr	r2, [pc, #280]	@ (8002b78 <HAL_GPIO_Init+0x2fc>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d007      	beq.n	8002a72 <HAL_GPIO_Init+0x1f6>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a45      	ldr	r2, [pc, #276]	@ (8002b7c <HAL_GPIO_Init+0x300>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d101      	bne.n	8002a6e <HAL_GPIO_Init+0x1f2>
 8002a6a:	2304      	movs	r3, #4
 8002a6c:	e008      	b.n	8002a80 <HAL_GPIO_Init+0x204>
 8002a6e:	2307      	movs	r3, #7
 8002a70:	e006      	b.n	8002a80 <HAL_GPIO_Init+0x204>
 8002a72:	2303      	movs	r3, #3
 8002a74:	e004      	b.n	8002a80 <HAL_GPIO_Init+0x204>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e002      	b.n	8002a80 <HAL_GPIO_Init+0x204>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_GPIO_Init+0x204>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	f002 0203 	and.w	r2, r2, #3
 8002a86:	0092      	lsls	r2, r2, #2
 8002a88:	4093      	lsls	r3, r2
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a90:	4935      	ldr	r1, [pc, #212]	@ (8002b68 <HAL_GPIO_Init+0x2ec>)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	3302      	adds	r3, #2
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a9e:	4b38      	ldr	r3, [pc, #224]	@ (8002b80 <HAL_GPIO_Init+0x304>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8002b80 <HAL_GPIO_Init+0x304>)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b80 <HAL_GPIO_Init+0x304>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aec:	4a24      	ldr	r2, [pc, #144]	@ (8002b80 <HAL_GPIO_Init+0x304>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002af2:	4b23      	ldr	r3, [pc, #140]	@ (8002b80 <HAL_GPIO_Init+0x304>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b16:	4a1a      	ldr	r2, [pc, #104]	@ (8002b80 <HAL_GPIO_Init+0x304>)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b1c:	4b18      	ldr	r3, [pc, #96]	@ (8002b80 <HAL_GPIO_Init+0x304>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b40:	4a0f      	ldr	r2, [pc, #60]	@ (8002b80 <HAL_GPIO_Init+0x304>)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	61fb      	str	r3, [r7, #28]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	2b0f      	cmp	r3, #15
 8002b50:	f67f aea2 	bls.w	8002898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	3724      	adds	r7, #36	@ 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40013800 	.word	0x40013800
 8002b6c:	40020000 	.word	0x40020000
 8002b70:	40020400 	.word	0x40020400
 8002b74:	40020800 	.word	0x40020800
 8002b78:	40020c00 	.word	0x40020c00
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40013c00 	.word	0x40013c00

08002b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	e001      	b.n	8002ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc4:	787b      	ldrb	r3, [r7, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd0:	e003      	b.n	8002bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bd2:	887b      	ldrh	r3, [r7, #2]
 8002bd4:	041a      	lsls	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	619a      	str	r2, [r3, #24]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e12b      	b.n	8002e52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fd fd9a 	bl	8000748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2224      	movs	r2, #36	@ 0x24
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c4c:	f000 fd80 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8002c50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4a81      	ldr	r2, [pc, #516]	@ (8002e5c <HAL_I2C_Init+0x274>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d807      	bhi.n	8002c6c <HAL_I2C_Init+0x84>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a80      	ldr	r2, [pc, #512]	@ (8002e60 <HAL_I2C_Init+0x278>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	bf94      	ite	ls
 8002c64:	2301      	movls	r3, #1
 8002c66:	2300      	movhi	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	e006      	b.n	8002c7a <HAL_I2C_Init+0x92>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a7d      	ldr	r2, [pc, #500]	@ (8002e64 <HAL_I2C_Init+0x27c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	bf94      	ite	ls
 8002c74:	2301      	movls	r3, #1
 8002c76:	2300      	movhi	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0e7      	b.n	8002e52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4a78      	ldr	r2, [pc, #480]	@ (8002e68 <HAL_I2C_Init+0x280>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	0c9b      	lsrs	r3, r3, #18
 8002c8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4a6a      	ldr	r2, [pc, #424]	@ (8002e5c <HAL_I2C_Init+0x274>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d802      	bhi.n	8002cbc <HAL_I2C_Init+0xd4>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	e009      	b.n	8002cd0 <HAL_I2C_Init+0xe8>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	4a69      	ldr	r2, [pc, #420]	@ (8002e6c <HAL_I2C_Init+0x284>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	099b      	lsrs	r3, r3, #6
 8002cce:	3301      	adds	r3, #1
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ce2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	495c      	ldr	r1, [pc, #368]	@ (8002e5c <HAL_I2C_Init+0x274>)
 8002cec:	428b      	cmp	r3, r1
 8002cee:	d819      	bhi.n	8002d24 <HAL_I2C_Init+0x13c>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1e59      	subs	r1, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cfe:	1c59      	adds	r1, r3, #1
 8002d00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d04:	400b      	ands	r3, r1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_I2C_Init+0x138>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1e59      	subs	r1, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1e:	e051      	b.n	8002dc4 <HAL_I2C_Init+0x1dc>
 8002d20:	2304      	movs	r3, #4
 8002d22:	e04f      	b.n	8002dc4 <HAL_I2C_Init+0x1dc>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d111      	bne.n	8002d50 <HAL_I2C_Init+0x168>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1e58      	subs	r0, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	440b      	add	r3, r1
 8002d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	e012      	b.n	8002d76 <HAL_I2C_Init+0x18e>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1e58      	subs	r0, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	0099      	lsls	r1, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_I2C_Init+0x196>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e022      	b.n	8002dc4 <HAL_I2C_Init+0x1dc>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10e      	bne.n	8002da4 <HAL_I2C_Init+0x1bc>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1e58      	subs	r0, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6859      	ldr	r1, [r3, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	440b      	add	r3, r1
 8002d94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d98:	3301      	adds	r3, #1
 8002d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002da2:	e00f      	b.n	8002dc4 <HAL_I2C_Init+0x1dc>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	1e58      	subs	r0, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6859      	ldr	r1, [r3, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	0099      	lsls	r1, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	6809      	ldr	r1, [r1, #0]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69da      	ldr	r2, [r3, #28]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002df2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6911      	ldr	r1, [r2, #16]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68d2      	ldr	r2, [r2, #12]
 8002dfe:	4311      	orrs	r1, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	430b      	orrs	r3, r1
 8002e06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	000186a0 	.word	0x000186a0
 8002e60:	001e847f 	.word	0x001e847f
 8002e64:	003d08ff 	.word	0x003d08ff
 8002e68:	431bde83 	.word	0x431bde83
 8002e6c:	10624dd3 	.word	0x10624dd3

08002e70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e267      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d075      	beq.n	8002f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e8e:	4b88      	ldr	r3, [pc, #544]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d00c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e9a:	4b85      	ldr	r3, [pc, #532]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d112      	bne.n	8002ecc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea6:	4b82      	ldr	r3, [pc, #520]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eb2:	d10b      	bne.n	8002ecc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	4b7e      	ldr	r3, [pc, #504]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d05b      	beq.n	8002f78 <HAL_RCC_OscConfig+0x108>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d157      	bne.n	8002f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e242      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed4:	d106      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x74>
 8002ed6:	4b76      	ldr	r3, [pc, #472]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a75      	ldr	r2, [pc, #468]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e01d      	b.n	8002f20 <HAL_RCC_OscConfig+0xb0>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x98>
 8002eee:	4b70      	ldr	r3, [pc, #448]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a6f      	ldr	r2, [pc, #444]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b6d      	ldr	r3, [pc, #436]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6c      	ldr	r2, [pc, #432]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e00b      	b.n	8002f20 <HAL_RCC_OscConfig+0xb0>
 8002f08:	4b69      	ldr	r3, [pc, #420]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a68      	ldr	r2, [pc, #416]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b66      	ldr	r3, [pc, #408]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a65      	ldr	r2, [pc, #404]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fe ffea 	bl	8001f00 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f30:	f7fe ffe6 	bl	8001f00 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	@ 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e207      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	4b5b      	ldr	r3, [pc, #364]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0xc0>
 8002f4e:	e014      	b.n	8002f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe ffd6 	bl	8001f00 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe ffd2 	bl	8001f00 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	@ 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e1f3      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	4b51      	ldr	r3, [pc, #324]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0xe8>
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d063      	beq.n	800304e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f86:	4b4a      	ldr	r3, [pc, #296]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f92:	4b47      	ldr	r3, [pc, #284]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d11c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9e:	4b44      	ldr	r3, [pc, #272]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d116      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002faa:	4b41      	ldr	r3, [pc, #260]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x152>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e1c7      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4937      	ldr	r1, [pc, #220]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd6:	e03a      	b.n	800304e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d020      	beq.n	8003022 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe0:	4b34      	ldr	r3, [pc, #208]	@ (80030b4 <HAL_RCC_OscConfig+0x244>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7fe ff8b 	bl	8001f00 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fee:	f7fe ff87 	bl	8001f00 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e1a8      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	4b2b      	ldr	r3, [pc, #172]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300c:	4b28      	ldr	r3, [pc, #160]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4925      	ldr	r1, [pc, #148]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 800301c:	4313      	orrs	r3, r2
 800301e:	600b      	str	r3, [r1, #0]
 8003020:	e015      	b.n	800304e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003022:	4b24      	ldr	r3, [pc, #144]	@ (80030b4 <HAL_RCC_OscConfig+0x244>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe ff6a 	bl	8001f00 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003030:	f7fe ff66 	bl	8001f00 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e187      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	4b1b      	ldr	r3, [pc, #108]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d036      	beq.n	80030c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d016      	beq.n	8003090 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003062:	4b15      	ldr	r3, [pc, #84]	@ (80030b8 <HAL_RCC_OscConfig+0x248>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003068:	f7fe ff4a 	bl	8001f00 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003070:	f7fe ff46 	bl	8001f00 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e167      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8003084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x200>
 800308e:	e01b      	b.n	80030c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003090:	4b09      	ldr	r3, [pc, #36]	@ (80030b8 <HAL_RCC_OscConfig+0x248>)
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003096:	f7fe ff33 	bl	8001f00 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800309c:	e00e      	b.n	80030bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309e:	f7fe ff2f 	bl	8001f00 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d907      	bls.n	80030bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e150      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
 80030b0:	40023800 	.word	0x40023800
 80030b4:	42470000 	.word	0x42470000
 80030b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030bc:	4b88      	ldr	r3, [pc, #544]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ea      	bne.n	800309e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 8097 	beq.w	8003204 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d6:	2300      	movs	r3, #0
 80030d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030da:	4b81      	ldr	r3, [pc, #516]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10f      	bne.n	8003106 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	4b7d      	ldr	r3, [pc, #500]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	4a7c      	ldr	r2, [pc, #496]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030f6:	4b7a      	ldr	r3, [pc, #488]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003102:	2301      	movs	r3, #1
 8003104:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003106:	4b77      	ldr	r3, [pc, #476]	@ (80032e4 <HAL_RCC_OscConfig+0x474>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d118      	bne.n	8003144 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003112:	4b74      	ldr	r3, [pc, #464]	@ (80032e4 <HAL_RCC_OscConfig+0x474>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a73      	ldr	r2, [pc, #460]	@ (80032e4 <HAL_RCC_OscConfig+0x474>)
 8003118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800311c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311e:	f7fe feef 	bl	8001f00 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003126:	f7fe feeb 	bl	8001f00 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e10c      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003138:	4b6a      	ldr	r3, [pc, #424]	@ (80032e4 <HAL_RCC_OscConfig+0x474>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d106      	bne.n	800315a <HAL_RCC_OscConfig+0x2ea>
 800314c:	4b64      	ldr	r3, [pc, #400]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003150:	4a63      	ldr	r2, [pc, #396]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6713      	str	r3, [r2, #112]	@ 0x70
 8003158:	e01c      	b.n	8003194 <HAL_RCC_OscConfig+0x324>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b05      	cmp	r3, #5
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0x30c>
 8003162:	4b5f      	ldr	r3, [pc, #380]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003166:	4a5e      	ldr	r2, [pc, #376]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	6713      	str	r3, [r2, #112]	@ 0x70
 800316e:	4b5c      	ldr	r3, [pc, #368]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	4a5b      	ldr	r2, [pc, #364]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6713      	str	r3, [r2, #112]	@ 0x70
 800317a:	e00b      	b.n	8003194 <HAL_RCC_OscConfig+0x324>
 800317c:	4b58      	ldr	r3, [pc, #352]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003180:	4a57      	ldr	r2, [pc, #348]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	6713      	str	r3, [r2, #112]	@ 0x70
 8003188:	4b55      	ldr	r3, [pc, #340]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318c:	4a54      	ldr	r2, [pc, #336]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 800318e:	f023 0304 	bic.w	r3, r3, #4
 8003192:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d015      	beq.n	80031c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7fe feb0 	bl	8001f00 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f7fe feac 	bl	8001f00 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e0cb      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ba:	4b49      	ldr	r3, [pc, #292]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0ee      	beq.n	80031a4 <HAL_RCC_OscConfig+0x334>
 80031c6:	e014      	b.n	80031f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c8:	f7fe fe9a 	bl	8001f00 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fe fe96 	bl	8001f00 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e0b5      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e6:	4b3e      	ldr	r3, [pc, #248]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1ee      	bne.n	80031d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d105      	bne.n	8003204 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f8:	4b39      	ldr	r3, [pc, #228]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fc:	4a38      	ldr	r2, [pc, #224]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003202:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80a1 	beq.w	8003350 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800320e:	4b34      	ldr	r3, [pc, #208]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b08      	cmp	r3, #8
 8003218:	d05c      	beq.n	80032d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d141      	bne.n	80032a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003222:	4b31      	ldr	r3, [pc, #196]	@ (80032e8 <HAL_RCC_OscConfig+0x478>)
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fe fe6a 	bl	8001f00 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003230:	f7fe fe66 	bl	8001f00 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e087      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003242:	4b27      	ldr	r3, [pc, #156]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69da      	ldr	r2, [r3, #28]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	019b      	lsls	r3, r3, #6
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003264:	085b      	lsrs	r3, r3, #1
 8003266:	3b01      	subs	r3, #1
 8003268:	041b      	lsls	r3, r3, #16
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003270:	061b      	lsls	r3, r3, #24
 8003272:	491b      	ldr	r1, [pc, #108]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003278:	4b1b      	ldr	r3, [pc, #108]	@ (80032e8 <HAL_RCC_OscConfig+0x478>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7fe fe3f 	bl	8001f00 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003286:	f7fe fe3b 	bl	8001f00 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e05c      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003298:	4b11      	ldr	r3, [pc, #68]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x416>
 80032a4:	e054      	b.n	8003350 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a6:	4b10      	ldr	r3, [pc, #64]	@ (80032e8 <HAL_RCC_OscConfig+0x478>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fe fe28 	bl	8001f00 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b4:	f7fe fe24 	bl	8001f00 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e045      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x444>
 80032d2:	e03d      	b.n	8003350 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e038      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40007000 	.word	0x40007000
 80032e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032ec:	4b1b      	ldr	r3, [pc, #108]	@ (800335c <HAL_RCC_OscConfig+0x4ec>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d028      	beq.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d121      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d11a      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003322:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003324:	4293      	cmp	r3, r2
 8003326:	d111      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	3b01      	subs	r3, #1
 8003336:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d107      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003346:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40023800 	.word	0x40023800

08003360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0cc      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003374:	4b68      	ldr	r3, [pc, #416]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d90c      	bls.n	800339c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b65      	ldr	r3, [pc, #404]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b63      	ldr	r3, [pc, #396]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0b8      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d020      	beq.n	80033ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b4:	4b59      	ldr	r3, [pc, #356]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4a58      	ldr	r2, [pc, #352]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033cc:	4b53      	ldr	r3, [pc, #332]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a52      	ldr	r2, [pc, #328]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d8:	4b50      	ldr	r3, [pc, #320]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	494d      	ldr	r1, [pc, #308]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d044      	beq.n	8003480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b47      	ldr	r3, [pc, #284]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d119      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e07f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d003      	beq.n	800341e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341a:	2b03      	cmp	r3, #3
 800341c:	d107      	bne.n	800342e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341e:	4b3f      	ldr	r3, [pc, #252]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e06f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342e:	4b3b      	ldr	r3, [pc, #236]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e067      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800343e:	4b37      	ldr	r3, [pc, #220]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f023 0203 	bic.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4934      	ldr	r1, [pc, #208]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	4313      	orrs	r3, r2
 800344e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003450:	f7fe fd56 	bl	8001f00 <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003456:	e00a      	b.n	800346e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003458:	f7fe fd52 	bl	8001f00 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e04f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	4b2b      	ldr	r3, [pc, #172]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 020c 	and.w	r2, r3, #12
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	429a      	cmp	r2, r3
 800347e:	d1eb      	bne.n	8003458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003480:	4b25      	ldr	r3, [pc, #148]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d20c      	bcs.n	80034a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b22      	ldr	r3, [pc, #136]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	4b20      	ldr	r3, [pc, #128]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e032      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b4:	4b19      	ldr	r3, [pc, #100]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4916      	ldr	r1, [pc, #88]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034d2:	4b12      	ldr	r3, [pc, #72]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	490e      	ldr	r1, [pc, #56]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034e6:	f000 f821 	bl	800352c <HAL_RCC_GetSysClockFreq>
 80034ea:	4602      	mov	r2, r0
 80034ec:	4b0b      	ldr	r3, [pc, #44]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	490a      	ldr	r1, [pc, #40]	@ (8003520 <HAL_RCC_ClockConfig+0x1c0>)
 80034f8:	5ccb      	ldrb	r3, [r1, r3]
 80034fa:	fa22 f303 	lsr.w	r3, r2, r3
 80034fe:	4a09      	ldr	r2, [pc, #36]	@ (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003502:	4b09      	ldr	r3, [pc, #36]	@ (8003528 <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe fcb6 	bl	8001e78 <HAL_InitTick>

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40023c00 	.word	0x40023c00
 800351c:	40023800 	.word	0x40023800
 8003520:	08004fcc 	.word	0x08004fcc
 8003524:	20000024 	.word	0x20000024
 8003528:	20000028 	.word	0x20000028

0800352c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800352c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003530:	b094      	sub	sp, #80	@ 0x50
 8003532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003544:	4b79      	ldr	r3, [pc, #484]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 030c 	and.w	r3, r3, #12
 800354c:	2b08      	cmp	r3, #8
 800354e:	d00d      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x40>
 8003550:	2b08      	cmp	r3, #8
 8003552:	f200 80e1 	bhi.w	8003718 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x34>
 800355a:	2b04      	cmp	r3, #4
 800355c:	d003      	beq.n	8003566 <HAL_RCC_GetSysClockFreq+0x3a>
 800355e:	e0db      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003560:	4b73      	ldr	r3, [pc, #460]	@ (8003730 <HAL_RCC_GetSysClockFreq+0x204>)
 8003562:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003564:	e0db      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003566:	4b73      	ldr	r3, [pc, #460]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x208>)
 8003568:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800356a:	e0d8      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800356c:	4b6f      	ldr	r3, [pc, #444]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003574:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003576:	4b6d      	ldr	r3, [pc, #436]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d063      	beq.n	800364a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003582:	4b6a      	ldr	r3, [pc, #424]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	099b      	lsrs	r3, r3, #6
 8003588:	2200      	movs	r2, #0
 800358a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800358c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800358e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003594:	633b      	str	r3, [r7, #48]	@ 0x30
 8003596:	2300      	movs	r3, #0
 8003598:	637b      	str	r3, [r7, #52]	@ 0x34
 800359a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800359e:	4622      	mov	r2, r4
 80035a0:	462b      	mov	r3, r5
 80035a2:	f04f 0000 	mov.w	r0, #0
 80035a6:	f04f 0100 	mov.w	r1, #0
 80035aa:	0159      	lsls	r1, r3, #5
 80035ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b0:	0150      	lsls	r0, r2, #5
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4621      	mov	r1, r4
 80035b8:	1a51      	subs	r1, r2, r1
 80035ba:	6139      	str	r1, [r7, #16]
 80035bc:	4629      	mov	r1, r5
 80035be:	eb63 0301 	sbc.w	r3, r3, r1
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035d0:	4659      	mov	r1, fp
 80035d2:	018b      	lsls	r3, r1, #6
 80035d4:	4651      	mov	r1, sl
 80035d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035da:	4651      	mov	r1, sl
 80035dc:	018a      	lsls	r2, r1, #6
 80035de:	4651      	mov	r1, sl
 80035e0:	ebb2 0801 	subs.w	r8, r2, r1
 80035e4:	4659      	mov	r1, fp
 80035e6:	eb63 0901 	sbc.w	r9, r3, r1
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035fe:	4690      	mov	r8, r2
 8003600:	4699      	mov	r9, r3
 8003602:	4623      	mov	r3, r4
 8003604:	eb18 0303 	adds.w	r3, r8, r3
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	462b      	mov	r3, r5
 800360c:	eb49 0303 	adc.w	r3, r9, r3
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800361e:	4629      	mov	r1, r5
 8003620:	024b      	lsls	r3, r1, #9
 8003622:	4621      	mov	r1, r4
 8003624:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003628:	4621      	mov	r1, r4
 800362a:	024a      	lsls	r2, r1, #9
 800362c:	4610      	mov	r0, r2
 800362e:	4619      	mov	r1, r3
 8003630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003632:	2200      	movs	r2, #0
 8003634:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003636:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003638:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800363c:	f7fc fdde 	bl	80001fc <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4613      	mov	r3, r2
 8003646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003648:	e058      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364a:	4b38      	ldr	r3, [pc, #224]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	099b      	lsrs	r3, r3, #6
 8003650:	2200      	movs	r2, #0
 8003652:	4618      	mov	r0, r3
 8003654:	4611      	mov	r1, r2
 8003656:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800365a:	623b      	str	r3, [r7, #32]
 800365c:	2300      	movs	r3, #0
 800365e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003660:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003664:	4642      	mov	r2, r8
 8003666:	464b      	mov	r3, r9
 8003668:	f04f 0000 	mov.w	r0, #0
 800366c:	f04f 0100 	mov.w	r1, #0
 8003670:	0159      	lsls	r1, r3, #5
 8003672:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003676:	0150      	lsls	r0, r2, #5
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4641      	mov	r1, r8
 800367e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003682:	4649      	mov	r1, r9
 8003684:	eb63 0b01 	sbc.w	fp, r3, r1
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003694:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003698:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800369c:	ebb2 040a 	subs.w	r4, r2, sl
 80036a0:	eb63 050b 	sbc.w	r5, r3, fp
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	00eb      	lsls	r3, r5, #3
 80036ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036b2:	00e2      	lsls	r2, r4, #3
 80036b4:	4614      	mov	r4, r2
 80036b6:	461d      	mov	r5, r3
 80036b8:	4643      	mov	r3, r8
 80036ba:	18e3      	adds	r3, r4, r3
 80036bc:	603b      	str	r3, [r7, #0]
 80036be:	464b      	mov	r3, r9
 80036c0:	eb45 0303 	adc.w	r3, r5, r3
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036d2:	4629      	mov	r1, r5
 80036d4:	028b      	lsls	r3, r1, #10
 80036d6:	4621      	mov	r1, r4
 80036d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036dc:	4621      	mov	r1, r4
 80036de:	028a      	lsls	r2, r1, #10
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036e6:	2200      	movs	r2, #0
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	61fa      	str	r2, [r7, #28]
 80036ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036f0:	f7fc fd84 	bl	80001fc <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4613      	mov	r3, r2
 80036fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036fc:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	0c1b      	lsrs	r3, r3, #16
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	3301      	adds	r3, #1
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800370c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800370e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003716:	e002      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003718:	4b05      	ldr	r3, [pc, #20]	@ (8003730 <HAL_RCC_GetSysClockFreq+0x204>)
 800371a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800371c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800371e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003720:	4618      	mov	r0, r3
 8003722:	3750      	adds	r7, #80	@ 0x50
 8003724:	46bd      	mov	sp, r7
 8003726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800372a:	bf00      	nop
 800372c:	40023800 	.word	0x40023800
 8003730:	00f42400 	.word	0x00f42400
 8003734:	007a1200 	.word	0x007a1200

08003738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800373c:	4b03      	ldr	r3, [pc, #12]	@ (800374c <HAL_RCC_GetHCLKFreq+0x14>)
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20000024 	.word	0x20000024

08003750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003754:	f7ff fff0 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8003758:	4602      	mov	r2, r0
 800375a:	4b05      	ldr	r3, [pc, #20]	@ (8003770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	0a9b      	lsrs	r3, r3, #10
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	4903      	ldr	r1, [pc, #12]	@ (8003774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003766:	5ccb      	ldrb	r3, [r1, r3]
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800376c:	4618      	mov	r0, r3
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40023800 	.word	0x40023800
 8003774:	08004fdc 	.word	0x08004fdc

08003778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800377c:	f7ff ffdc 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8003780:	4602      	mov	r2, r0
 8003782:	4b05      	ldr	r3, [pc, #20]	@ (8003798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	0b5b      	lsrs	r3, r3, #13
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	4903      	ldr	r1, [pc, #12]	@ (800379c <HAL_RCC_GetPCLK2Freq+0x24>)
 800378e:	5ccb      	ldrb	r3, [r1, r3]
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40023800 	.word	0x40023800
 800379c:	08004fdc 	.word	0x08004fdc

080037a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e07b      	b.n	80038aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d108      	bne.n	80037cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037c2:	d009      	beq.n	80037d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	61da      	str	r2, [r3, #28]
 80037ca:	e005      	b.n	80037d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fe f880 	bl	80018f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800380e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800385c:	ea42 0103 	orr.w	r1, r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003864:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	f003 0104 	and.w	r1, r3, #4
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	f003 0210 	and.w	r2, r3, #16
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003898:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b08a      	sub	sp, #40	@ 0x28
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038c0:	2301      	movs	r3, #1
 80038c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038c4:	f7fe fb1c 	bl	8001f00 <HAL_GetTick>
 80038c8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038d0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80038d8:	887b      	ldrh	r3, [r7, #2]
 80038da:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038dc:	7ffb      	ldrb	r3, [r7, #31]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d00c      	beq.n	80038fc <HAL_SPI_TransmitReceive+0x4a>
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038e8:	d106      	bne.n	80038f8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d102      	bne.n	80038f8 <HAL_SPI_TransmitReceive+0x46>
 80038f2:	7ffb      	ldrb	r3, [r7, #31]
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d001      	beq.n	80038fc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
 80038fa:	e17f      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_SPI_TransmitReceive+0x5c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_SPI_TransmitReceive+0x5c>
 8003908:	887b      	ldrh	r3, [r7, #2]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e174      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_SPI_TransmitReceive+0x6e>
 800391c:	2302      	movs	r3, #2
 800391e:	e16d      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x34a>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b04      	cmp	r3, #4
 8003932:	d003      	beq.n	800393c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2205      	movs	r2, #5
 8003938:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	887a      	ldrh	r2, [r7, #2]
 8003952:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	887a      	ldrh	r2, [r7, #2]
 800395e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	887a      	ldrh	r2, [r7, #2]
 8003964:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397c:	2b40      	cmp	r3, #64	@ 0x40
 800397e:	d007      	beq.n	8003990 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003998:	d17e      	bne.n	8003a98 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_SPI_TransmitReceive+0xf6>
 80039a2:	8afb      	ldrh	r3, [r7, #22]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d16c      	bne.n	8003a82 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ac:	881a      	ldrh	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b8:	1c9a      	adds	r2, r3, #2
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039cc:	e059      	b.n	8003a82 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d11b      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x162>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d016      	beq.n	8003a14 <HAL_SPI_TransmitReceive+0x162>
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d113      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f0:	881a      	ldrh	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fc:	1c9a      	adds	r2, r3, #2
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d119      	bne.n	8003a56 <HAL_SPI_TransmitReceive+0x1a4>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d014      	beq.n	8003a56 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a36:	b292      	uxth	r2, r2
 8003a38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3e:	1c9a      	adds	r2, r3, #2
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a52:	2301      	movs	r3, #1
 8003a54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a56:	f7fe fa53 	bl	8001f00 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d80d      	bhi.n	8003a82 <HAL_SPI_TransmitReceive+0x1d0>
 8003a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6c:	d009      	beq.n	8003a82 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0bc      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1a0      	bne.n	80039ce <HAL_SPI_TransmitReceive+0x11c>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d19b      	bne.n	80039ce <HAL_SPI_TransmitReceive+0x11c>
 8003a96:	e082      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_SPI_TransmitReceive+0x1f4>
 8003aa0:	8afb      	ldrh	r3, [r7, #22]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d171      	bne.n	8003b8a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	330c      	adds	r3, #12
 8003ab0:	7812      	ldrb	r2, [r2, #0]
 8003ab2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003acc:	e05d      	b.n	8003b8a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d11c      	bne.n	8003b16 <HAL_SPI_TransmitReceive+0x264>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d017      	beq.n	8003b16 <HAL_SPI_TransmitReceive+0x264>
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d114      	bne.n	8003b16 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	7812      	ldrb	r2, [r2, #0]
 8003af8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d119      	bne.n	8003b58 <HAL_SPI_TransmitReceive+0x2a6>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d014      	beq.n	8003b58 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b54:	2301      	movs	r3, #1
 8003b56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b58:	f7fe f9d2 	bl	8001f00 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d803      	bhi.n	8003b70 <HAL_SPI_TransmitReceive+0x2be>
 8003b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6e:	d102      	bne.n	8003b76 <HAL_SPI_TransmitReceive+0x2c4>
 8003b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e038      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d19c      	bne.n	8003ace <HAL_SPI_TransmitReceive+0x21c>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d197      	bne.n	8003ace <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b9e:	6a3a      	ldr	r2, [r7, #32]
 8003ba0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f8b6 	bl	8003d14 <SPI_EndRxTxTransaction>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d008      	beq.n	8003bc0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e01d      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bc8:	2300      	movs	r3, #0
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3728      	adds	r7, #40	@ 0x28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c14:	f7fe f974 	bl	8001f00 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	4413      	add	r3, r2
 8003c22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c24:	f7fe f96c 	bl	8001f00 <HAL_GetTick>
 8003c28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c2a:	4b39      	ldr	r3, [pc, #228]	@ (8003d10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	015b      	lsls	r3, r3, #5
 8003c30:	0d1b      	lsrs	r3, r3, #20
 8003c32:	69fa      	ldr	r2, [r7, #28]
 8003c34:	fb02 f303 	mul.w	r3, r2, r3
 8003c38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c3a:	e054      	b.n	8003ce6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c42:	d050      	beq.n	8003ce6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c44:	f7fe f95c 	bl	8001f00 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d902      	bls.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d13d      	bne.n	8003cd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c72:	d111      	bne.n	8003c98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c7c:	d004      	beq.n	8003c88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c86:	d107      	bne.n	8003c98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ca0:	d10f      	bne.n	8003cc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e017      	b.n	8003d06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	bf0c      	ite	eq
 8003cf6:	2301      	moveq	r3, #1
 8003cf8:	2300      	movne	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d19b      	bne.n	8003c3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000024 	.word	0x20000024

08003d14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2201      	movs	r2, #1
 8003d28:	2102      	movs	r1, #2
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f7ff ff6a 	bl	8003c04 <SPI_WaitFlagStateUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3a:	f043 0220 	orr.w	r2, r3, #32
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e032      	b.n	8003dac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d46:	4b1b      	ldr	r3, [pc, #108]	@ (8003db4 <SPI_EndRxTxTransaction+0xa0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003db8 <SPI_EndRxTxTransaction+0xa4>)
 8003d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d50:	0d5b      	lsrs	r3, r3, #21
 8003d52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d64:	d112      	bne.n	8003d8c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2180      	movs	r1, #128	@ 0x80
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f7ff ff47 	bl	8003c04 <SPI_WaitFlagStateUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d016      	beq.n	8003daa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e00f      	b.n	8003dac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da2:	2b80      	cmp	r3, #128	@ 0x80
 8003da4:	d0f2      	beq.n	8003d8c <SPI_EndRxTxTransaction+0x78>
 8003da6:	e000      	b.n	8003daa <SPI_EndRxTxTransaction+0x96>
        break;
 8003da8:	bf00      	nop
  }

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000024 	.word	0x20000024
 8003db8:	165e9f81 	.word	0x165e9f81

08003dbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e042      	b.n	8003e54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd fedc 	bl	8001ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2224      	movs	r2, #36	@ 0x24
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fdbd 	bl	8004980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	@ 0x28
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d175      	bne.n	8003f68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_UART_Transmit+0x2c>
 8003e82:	88fb      	ldrh	r3, [r7, #6]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e06e      	b.n	8003f6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2221      	movs	r2, #33	@ 0x21
 8003e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e9a:	f7fe f831 	bl	8001f00 <HAL_GetTick>
 8003e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	88fa      	ldrh	r2, [r7, #6]
 8003ea4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	88fa      	ldrh	r2, [r7, #6]
 8003eaa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb4:	d108      	bne.n	8003ec8 <HAL_UART_Transmit+0x6c>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d104      	bne.n	8003ec8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	e003      	b.n	8003ed0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ed0:	e02e      	b.n	8003f30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2180      	movs	r1, #128	@ 0x80
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fb1f 	bl	8004520 <UART_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e03a      	b.n	8003f6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10b      	bne.n	8003f12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	e007      	b.n	8003f22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	781a      	ldrb	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1cb      	bne.n	8003ed2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2200      	movs	r2, #0
 8003f42:	2140      	movs	r1, #64	@ 0x40
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 faeb 	bl	8004520 <UART_WaitOnFlagUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e006      	b.n	8003f6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	e000      	b.n	8003f6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f68:	2302      	movs	r3, #2
  }
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3720      	adds	r7, #32
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d112      	bne.n	8003fb2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <HAL_UART_Receive_IT+0x26>
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e00b      	b.n	8003fb4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fb12 	bl	80045d2 <UART_Start_Receive_IT>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	e000      	b.n	8003fb4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003fb2:	2302      	movs	r3, #2
  }
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b0ba      	sub	sp, #232	@ 0xe8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ffa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10f      	bne.n	8004022 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <HAL_UART_IRQHandler+0x66>
 800400e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fbf2 	bl	8004804 <UART_Receive_IT>
      return;
 8004020:	e25b      	b.n	80044da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004022:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 80de 	beq.w	80041e8 <HAL_UART_IRQHandler+0x22c>
 800402c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800403c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80d1 	beq.w	80041e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00b      	beq.n	800406a <HAL_UART_IRQHandler+0xae>
 8004052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004062:	f043 0201 	orr.w	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00b      	beq.n	800408e <HAL_UART_IRQHandler+0xd2>
 8004076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004086:	f043 0202 	orr.w	r2, r3, #2
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800408e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <HAL_UART_IRQHandler+0xf6>
 800409a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040aa:	f043 0204 	orr.w	r2, r3, #4
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d011      	beq.n	80040e2 <HAL_UART_IRQHandler+0x126>
 80040be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d105      	bne.n	80040d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040da:	f043 0208 	orr.w	r2, r3, #8
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 81f2 	beq.w	80044d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_UART_IRQHandler+0x14e>
 80040f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fb7d 	bl	8004804 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004114:	2b40      	cmp	r3, #64	@ 0x40
 8004116:	bf0c      	ite	eq
 8004118:	2301      	moveq	r3, #1
 800411a:	2300      	movne	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d103      	bne.n	8004136 <HAL_UART_IRQHandler+0x17a>
 800412e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d04f      	beq.n	80041d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fa85 	bl	8004646 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004146:	2b40      	cmp	r3, #64	@ 0x40
 8004148:	d141      	bne.n	80041ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3314      	adds	r3, #20
 8004150:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004160:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3314      	adds	r3, #20
 8004172:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004176:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800417a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004182:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800418e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1d9      	bne.n	800414a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419a:	2b00      	cmp	r3, #0
 800419c:	d013      	beq.n	80041c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a2:	4a7e      	ldr	r2, [pc, #504]	@ (800439c <HAL_UART_IRQHandler+0x3e0>)
 80041a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe f908 	bl	80023c0 <HAL_DMA_Abort_IT>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d016      	beq.n	80041e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041c0:	4610      	mov	r0, r2
 80041c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c4:	e00e      	b.n	80041e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f994 	bl	80044f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041cc:	e00a      	b.n	80041e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f990 	bl	80044f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d4:	e006      	b.n	80041e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f98c 	bl	80044f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80041e2:	e175      	b.n	80044d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	bf00      	nop
    return;
 80041e6:	e173      	b.n	80044d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	f040 814f 	bne.w	8004490 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f6:	f003 0310 	and.w	r3, r3, #16
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 8148 	beq.w	8004490 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8141 	beq.w	8004490 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800422e:	2b40      	cmp	r3, #64	@ 0x40
 8004230:	f040 80b6 	bne.w	80043a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004240:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8145 	beq.w	80044d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800424e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004252:	429a      	cmp	r2, r3
 8004254:	f080 813e 	bcs.w	80044d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800425e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800426a:	f000 8088 	beq.w	800437e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004284:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800428c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800429a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800429e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1d9      	bne.n	800426e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3314      	adds	r3, #20
 80042c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042cc:	f023 0301 	bic.w	r3, r3, #1
 80042d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3314      	adds	r3, #20
 80042da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e1      	bne.n	80042ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3314      	adds	r3, #20
 80042fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004300:	e853 3f00 	ldrex	r3, [r3]
 8004304:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800430c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3314      	adds	r3, #20
 8004316:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800431a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800431c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004320:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e3      	bne.n	80042f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	330c      	adds	r3, #12
 8004342:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800434c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800434e:	f023 0310 	bic.w	r3, r3, #16
 8004352:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	330c      	adds	r3, #12
 800435c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004360:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004362:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004364:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004366:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004368:	e841 2300 	strex	r3, r2, [r1]
 800436c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800436e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e3      	bne.n	800433c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004378:	4618      	mov	r0, r3
 800437a:	f7fd ffb1 	bl	80022e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2202      	movs	r2, #2
 8004382:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800438c:	b29b      	uxth	r3, r3
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	b29b      	uxth	r3, r3
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f8b7 	bl	8004508 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800439a:	e09b      	b.n	80044d4 <HAL_UART_IRQHandler+0x518>
 800439c:	0800470d 	.word	0x0800470d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 808e 	beq.w	80044d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 8089 	beq.w	80044d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d0:	e853 3f00 	ldrex	r3, [r3]
 80043d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	330c      	adds	r3, #12
 80043e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80043ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e3      	bne.n	80043c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3314      	adds	r3, #20
 8004404:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	623b      	str	r3, [r7, #32]
   return(result);
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3314      	adds	r3, #20
 800441e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004422:	633a      	str	r2, [r7, #48]	@ 0x30
 8004424:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e3      	bne.n	80043fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	60fb      	str	r3, [r7, #12]
   return(result);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0310 	bic.w	r3, r3, #16
 800445a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004468:	61fa      	str	r2, [r7, #28]
 800446a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	69b9      	ldr	r1, [r7, #24]
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	617b      	str	r3, [r7, #20]
   return(result);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e3      	bne.n	8004444 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004482:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004486:	4619      	mov	r1, r3
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f83d 	bl	8004508 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800448e:	e023      	b.n	80044d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <HAL_UART_IRQHandler+0x4f4>
 800449c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f943 	bl	8004734 <UART_Transmit_IT>
    return;
 80044ae:	e014      	b.n	80044da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00e      	beq.n	80044da <HAL_UART_IRQHandler+0x51e>
 80044bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f983 	bl	80047d4 <UART_EndTransmit_IT>
    return;
 80044ce:	e004      	b.n	80044da <HAL_UART_IRQHandler+0x51e>
    return;
 80044d0:	bf00      	nop
 80044d2:	e002      	b.n	80044da <HAL_UART_IRQHandler+0x51e>
      return;
 80044d4:	bf00      	nop
 80044d6:	e000      	b.n	80044da <HAL_UART_IRQHandler+0x51e>
      return;
 80044d8:	bf00      	nop
  }
}
 80044da:	37e8      	adds	r7, #232	@ 0xe8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	4613      	mov	r3, r2
 800452e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004530:	e03b      	b.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d037      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7fd fce1 	bl	8001f00 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	6a3a      	ldr	r2, [r7, #32]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <UART_WaitOnFlagUntilTimeout+0x30>
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e03a      	b.n	80045ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d023      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b80      	cmp	r3, #128	@ 0x80
 8004566:	d020      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b40      	cmp	r3, #64	@ 0x40
 800456c:	d01d      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b08      	cmp	r3, #8
 800457a:	d116      	bne.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f857 	bl	8004646 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2208      	movs	r2, #8
 800459c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e00f      	b.n	80045ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4013      	ands	r3, r2
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	bf0c      	ite	eq
 80045ba:	2301      	moveq	r3, #1
 80045bc:	2300      	movne	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d0b4      	beq.n	8004532 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	4613      	mov	r3, r2
 80045de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	88fa      	ldrh	r2, [r7, #6]
 80045ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	88fa      	ldrh	r2, [r7, #6]
 80045f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2222      	movs	r2, #34	@ 0x22
 80045fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d007      	beq.n	8004618 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004616:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695a      	ldr	r2, [r3, #20]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0220 	orr.w	r2, r2, #32
 8004636:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004646:	b480      	push	{r7}
 8004648:	b095      	sub	sp, #84	@ 0x54
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	330c      	adds	r3, #12
 8004654:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004664:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800466e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004670:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004674:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800467c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e5      	bne.n	800464e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3314      	adds	r3, #20
 8004688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	61fb      	str	r3, [r7, #28]
   return(result);
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	64bb      	str	r3, [r7, #72]	@ 0x48
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3314      	adds	r3, #20
 80046a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e5      	bne.n	8004682 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d119      	bne.n	80046f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	330c      	adds	r3, #12
 80046c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f023 0310 	bic.w	r3, r3, #16
 80046d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	330c      	adds	r3, #12
 80046dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046de:	61ba      	str	r2, [r7, #24]
 80046e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	6979      	ldr	r1, [r7, #20]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	613b      	str	r3, [r7, #16]
   return(result);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e5      	bne.n	80046be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004700:	bf00      	nop
 8004702:	3754      	adds	r7, #84	@ 0x54
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004718:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f7ff fee4 	bl	80044f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b21      	cmp	r3, #33	@ 0x21
 8004746:	d13e      	bne.n	80047c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004750:	d114      	bne.n	800477c <UART_Transmit_IT+0x48>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d110      	bne.n	800477c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800476e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	1c9a      	adds	r2, r3, #2
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	621a      	str	r2, [r3, #32]
 800477a:	e008      	b.n	800478e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	1c59      	adds	r1, r3, #1
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6211      	str	r1, [r2, #32]
 8004786:	781a      	ldrb	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29b      	uxth	r3, r3
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	4619      	mov	r1, r3
 800479c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10f      	bne.n	80047c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e000      	b.n	80047c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047c6:	2302      	movs	r3, #2
  }
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff fe73 	bl	80044e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08c      	sub	sp, #48	@ 0x30
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b22      	cmp	r3, #34	@ 0x22
 8004816:	f040 80ae 	bne.w	8004976 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004822:	d117      	bne.n	8004854 <UART_Receive_IT+0x50>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d113      	bne.n	8004854 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800482c:	2300      	movs	r3, #0
 800482e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004834:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	b29b      	uxth	r3, r3
 800483e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004842:	b29a      	uxth	r2, r3
 8004844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004846:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484c:	1c9a      	adds	r2, r3, #2
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	629a      	str	r2, [r3, #40]	@ 0x28
 8004852:	e026      	b.n	80048a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004858:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800485a:	2300      	movs	r3, #0
 800485c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004866:	d007      	beq.n	8004878 <UART_Receive_IT+0x74>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10a      	bne.n	8004886 <UART_Receive_IT+0x82>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d106      	bne.n	8004886 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	b2da      	uxtb	r2, r3
 8004880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004882:	701a      	strb	r2, [r3, #0]
 8004884:	e008      	b.n	8004898 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004892:	b2da      	uxtb	r2, r3
 8004894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004896:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	4619      	mov	r1, r3
 80048b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d15d      	bne.n	8004972 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0220 	bic.w	r2, r2, #32
 80048c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d135      	bne.n	8004968 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	330c      	adds	r3, #12
 8004908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	613b      	str	r3, [r7, #16]
   return(result);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f023 0310 	bic.w	r3, r3, #16
 8004918:	627b      	str	r3, [r7, #36]	@ 0x24
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004922:	623a      	str	r2, [r7, #32]
 8004924:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	69f9      	ldr	r1, [r7, #28]
 8004928:	6a3a      	ldr	r2, [r7, #32]
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e5      	bne.n	8004902 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b10      	cmp	r3, #16
 8004942:	d10a      	bne.n	800495a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800495e:	4619      	mov	r1, r3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff fdd1 	bl	8004508 <HAL_UARTEx_RxEventCallback>
 8004966:	e002      	b.n	800496e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7fc f813 	bl	8000994 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	e002      	b.n	8004978 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	e000      	b.n	8004978 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004976:	2302      	movs	r3, #2
  }
}
 8004978:	4618      	mov	r0, r3
 800497a:	3730      	adds	r7, #48	@ 0x30
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004984:	b0c0      	sub	sp, #256	@ 0x100
 8004986:	af00      	add	r7, sp, #0
 8004988:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499c:	68d9      	ldr	r1, [r3, #12]
 800499e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	ea40 0301 	orr.w	r3, r0, r1
 80049a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	431a      	orrs	r2, r3
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049d8:	f021 010c 	bic.w	r1, r1, #12
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049e6:	430b      	orrs	r3, r1
 80049e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80049f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fa:	6999      	ldr	r1, [r3, #24]
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	ea40 0301 	orr.w	r3, r0, r1
 8004a06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b8f      	ldr	r3, [pc, #572]	@ (8004c4c <UART_SetConfig+0x2cc>)
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d005      	beq.n	8004a20 <UART_SetConfig+0xa0>
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	4b8d      	ldr	r3, [pc, #564]	@ (8004c50 <UART_SetConfig+0x2d0>)
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d104      	bne.n	8004a2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a20:	f7fe feaa 	bl	8003778 <HAL_RCC_GetPCLK2Freq>
 8004a24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a28:	e003      	b.n	8004a32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a2a:	f7fe fe91 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8004a2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a3c:	f040 810c 	bne.w	8004c58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a44:	2200      	movs	r2, #0
 8004a46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a52:	4622      	mov	r2, r4
 8004a54:	462b      	mov	r3, r5
 8004a56:	1891      	adds	r1, r2, r2
 8004a58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a5a:	415b      	adcs	r3, r3
 8004a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a62:	4621      	mov	r1, r4
 8004a64:	eb12 0801 	adds.w	r8, r2, r1
 8004a68:	4629      	mov	r1, r5
 8004a6a:	eb43 0901 	adc.w	r9, r3, r1
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a82:	4690      	mov	r8, r2
 8004a84:	4699      	mov	r9, r3
 8004a86:	4623      	mov	r3, r4
 8004a88:	eb18 0303 	adds.w	r3, r8, r3
 8004a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a90:	462b      	mov	r3, r5
 8004a92:	eb49 0303 	adc.w	r3, r9, r3
 8004a96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004aa6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004aaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004aae:	460b      	mov	r3, r1
 8004ab0:	18db      	adds	r3, r3, r3
 8004ab2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	eb42 0303 	adc.w	r3, r2, r3
 8004aba:	657b      	str	r3, [r7, #84]	@ 0x54
 8004abc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ac0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ac4:	f7fb fb9a 	bl	80001fc <__aeabi_uldivmod>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4b61      	ldr	r3, [pc, #388]	@ (8004c54 <UART_SetConfig+0x2d4>)
 8004ace:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad2:	095b      	lsrs	r3, r3, #5
 8004ad4:	011c      	lsls	r4, r3, #4
 8004ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ae0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ae4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ae8:	4642      	mov	r2, r8
 8004aea:	464b      	mov	r3, r9
 8004aec:	1891      	adds	r1, r2, r2
 8004aee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004af0:	415b      	adcs	r3, r3
 8004af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004af4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004af8:	4641      	mov	r1, r8
 8004afa:	eb12 0a01 	adds.w	sl, r2, r1
 8004afe:	4649      	mov	r1, r9
 8004b00:	eb43 0b01 	adc.w	fp, r3, r1
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b18:	4692      	mov	sl, r2
 8004b1a:	469b      	mov	fp, r3
 8004b1c:	4643      	mov	r3, r8
 8004b1e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b26:	464b      	mov	r3, r9
 8004b28:	eb4b 0303 	adc.w	r3, fp, r3
 8004b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b44:	460b      	mov	r3, r1
 8004b46:	18db      	adds	r3, r3, r3
 8004b48:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	eb42 0303 	adc.w	r3, r2, r3
 8004b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b5a:	f7fb fb4f 	bl	80001fc <__aeabi_uldivmod>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	4b3b      	ldr	r3, [pc, #236]	@ (8004c54 <UART_SetConfig+0x2d4>)
 8004b66:	fba3 2301 	umull	r2, r3, r3, r1
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	2264      	movs	r2, #100	@ 0x64
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	1acb      	subs	r3, r1, r3
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b7a:	4b36      	ldr	r3, [pc, #216]	@ (8004c54 <UART_SetConfig+0x2d4>)
 8004b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b88:	441c      	add	r4, r3
 8004b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b9c:	4642      	mov	r2, r8
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	1891      	adds	r1, r2, r2
 8004ba2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ba4:	415b      	adcs	r3, r3
 8004ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ba8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004bac:	4641      	mov	r1, r8
 8004bae:	1851      	adds	r1, r2, r1
 8004bb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	414b      	adcs	r3, r1
 8004bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004bc4:	4659      	mov	r1, fp
 8004bc6:	00cb      	lsls	r3, r1, #3
 8004bc8:	4651      	mov	r1, sl
 8004bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bce:	4651      	mov	r1, sl
 8004bd0:	00ca      	lsls	r2, r1, #3
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	4642      	mov	r2, r8
 8004bda:	189b      	adds	r3, r3, r2
 8004bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004be0:	464b      	mov	r3, r9
 8004be2:	460a      	mov	r2, r1
 8004be4:	eb42 0303 	adc.w	r3, r2, r3
 8004be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004bf8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004bfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c00:	460b      	mov	r3, r1
 8004c02:	18db      	adds	r3, r3, r3
 8004c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c06:	4613      	mov	r3, r2
 8004c08:	eb42 0303 	adc.w	r3, r2, r3
 8004c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c16:	f7fb faf1 	bl	80001fc <__aeabi_uldivmod>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c54 <UART_SetConfig+0x2d4>)
 8004c20:	fba3 1302 	umull	r1, r3, r3, r2
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	2164      	movs	r1, #100	@ 0x64
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	3332      	adds	r3, #50	@ 0x32
 8004c32:	4a08      	ldr	r2, [pc, #32]	@ (8004c54 <UART_SetConfig+0x2d4>)
 8004c34:	fba2 2303 	umull	r2, r3, r2, r3
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	f003 0207 	and.w	r2, r3, #7
 8004c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4422      	add	r2, r4
 8004c46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c48:	e106      	b.n	8004e58 <UART_SetConfig+0x4d8>
 8004c4a:	bf00      	nop
 8004c4c:	40011000 	.word	0x40011000
 8004c50:	40011400 	.word	0x40011400
 8004c54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c6a:	4642      	mov	r2, r8
 8004c6c:	464b      	mov	r3, r9
 8004c6e:	1891      	adds	r1, r2, r2
 8004c70:	6239      	str	r1, [r7, #32]
 8004c72:	415b      	adcs	r3, r3
 8004c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c7a:	4641      	mov	r1, r8
 8004c7c:	1854      	adds	r4, r2, r1
 8004c7e:	4649      	mov	r1, r9
 8004c80:	eb43 0501 	adc.w	r5, r3, r1
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	00eb      	lsls	r3, r5, #3
 8004c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c92:	00e2      	lsls	r2, r4, #3
 8004c94:	4614      	mov	r4, r2
 8004c96:	461d      	mov	r5, r3
 8004c98:	4643      	mov	r3, r8
 8004c9a:	18e3      	adds	r3, r4, r3
 8004c9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ca0:	464b      	mov	r3, r9
 8004ca2:	eb45 0303 	adc.w	r3, r5, r3
 8004ca6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	008b      	lsls	r3, r1, #2
 8004cca:	4621      	mov	r1, r4
 8004ccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	008a      	lsls	r2, r1, #2
 8004cd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004cd8:	f7fb fa90 	bl	80001fc <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4b60      	ldr	r3, [pc, #384]	@ (8004e64 <UART_SetConfig+0x4e4>)
 8004ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	011c      	lsls	r4, r3, #4
 8004cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cf4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004cf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004cfc:	4642      	mov	r2, r8
 8004cfe:	464b      	mov	r3, r9
 8004d00:	1891      	adds	r1, r2, r2
 8004d02:	61b9      	str	r1, [r7, #24]
 8004d04:	415b      	adcs	r3, r3
 8004d06:	61fb      	str	r3, [r7, #28]
 8004d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	1851      	adds	r1, r2, r1
 8004d10:	6139      	str	r1, [r7, #16]
 8004d12:	4649      	mov	r1, r9
 8004d14:	414b      	adcs	r3, r1
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d24:	4659      	mov	r1, fp
 8004d26:	00cb      	lsls	r3, r1, #3
 8004d28:	4651      	mov	r1, sl
 8004d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d2e:	4651      	mov	r1, sl
 8004d30:	00ca      	lsls	r2, r1, #3
 8004d32:	4610      	mov	r0, r2
 8004d34:	4619      	mov	r1, r3
 8004d36:	4603      	mov	r3, r0
 8004d38:	4642      	mov	r2, r8
 8004d3a:	189b      	adds	r3, r3, r2
 8004d3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d40:	464b      	mov	r3, r9
 8004d42:	460a      	mov	r2, r1
 8004d44:	eb42 0303 	adc.w	r3, r2, r3
 8004d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d64:	4649      	mov	r1, r9
 8004d66:	008b      	lsls	r3, r1, #2
 8004d68:	4641      	mov	r1, r8
 8004d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d6e:	4641      	mov	r1, r8
 8004d70:	008a      	lsls	r2, r1, #2
 8004d72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d76:	f7fb fa41 	bl	80001fc <__aeabi_uldivmod>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4b38      	ldr	r3, [pc, #224]	@ (8004e64 <UART_SetConfig+0x4e4>)
 8004d82:	fba3 2301 	umull	r2, r3, r3, r1
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	2264      	movs	r2, #100	@ 0x64
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	1acb      	subs	r3, r1, r3
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	3332      	adds	r3, #50	@ 0x32
 8004d94:	4a33      	ldr	r2, [pc, #204]	@ (8004e64 <UART_SetConfig+0x4e4>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004da0:	441c      	add	r4, r3
 8004da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004da6:	2200      	movs	r2, #0
 8004da8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004daa:	677a      	str	r2, [r7, #116]	@ 0x74
 8004dac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004db0:	4642      	mov	r2, r8
 8004db2:	464b      	mov	r3, r9
 8004db4:	1891      	adds	r1, r2, r2
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	415b      	adcs	r3, r3
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dc0:	4641      	mov	r1, r8
 8004dc2:	1851      	adds	r1, r2, r1
 8004dc4:	6039      	str	r1, [r7, #0]
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	414b      	adcs	r3, r1
 8004dca:	607b      	str	r3, [r7, #4]
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dd8:	4659      	mov	r1, fp
 8004dda:	00cb      	lsls	r3, r1, #3
 8004ddc:	4651      	mov	r1, sl
 8004dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004de2:	4651      	mov	r1, sl
 8004de4:	00ca      	lsls	r2, r1, #3
 8004de6:	4610      	mov	r0, r2
 8004de8:	4619      	mov	r1, r3
 8004dea:	4603      	mov	r3, r0
 8004dec:	4642      	mov	r2, r8
 8004dee:	189b      	adds	r3, r3, r2
 8004df0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004df2:	464b      	mov	r3, r9
 8004df4:	460a      	mov	r2, r1
 8004df6:	eb42 0303 	adc.w	r3, r2, r3
 8004dfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e06:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e14:	4649      	mov	r1, r9
 8004e16:	008b      	lsls	r3, r1, #2
 8004e18:	4641      	mov	r1, r8
 8004e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e1e:	4641      	mov	r1, r8
 8004e20:	008a      	lsls	r2, r1, #2
 8004e22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e26:	f7fb f9e9 	bl	80001fc <__aeabi_uldivmod>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e64 <UART_SetConfig+0x4e4>)
 8004e30:	fba3 1302 	umull	r1, r3, r3, r2
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	2164      	movs	r1, #100	@ 0x64
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	3332      	adds	r3, #50	@ 0x32
 8004e42:	4a08      	ldr	r2, [pc, #32]	@ (8004e64 <UART_SetConfig+0x4e4>)
 8004e44:	fba2 2303 	umull	r2, r3, r2, r3
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	f003 020f 	and.w	r2, r3, #15
 8004e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4422      	add	r2, r4
 8004e56:	609a      	str	r2, [r3, #8]
}
 8004e58:	bf00      	nop
 8004e5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e64:	51eb851f 	.word	0x51eb851f

08004e68 <memset>:
 8004e68:	4402      	add	r2, r0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d100      	bne.n	8004e72 <memset+0xa>
 8004e70:	4770      	bx	lr
 8004e72:	f803 1b01 	strb.w	r1, [r3], #1
 8004e76:	e7f9      	b.n	8004e6c <memset+0x4>

08004e78 <__libc_init_array>:
 8004e78:	b570      	push	{r4, r5, r6, lr}
 8004e7a:	4d0d      	ldr	r5, [pc, #52]	@ (8004eb0 <__libc_init_array+0x38>)
 8004e7c:	4c0d      	ldr	r4, [pc, #52]	@ (8004eb4 <__libc_init_array+0x3c>)
 8004e7e:	1b64      	subs	r4, r4, r5
 8004e80:	10a4      	asrs	r4, r4, #2
 8004e82:	2600      	movs	r6, #0
 8004e84:	42a6      	cmp	r6, r4
 8004e86:	d109      	bne.n	8004e9c <__libc_init_array+0x24>
 8004e88:	4d0b      	ldr	r5, [pc, #44]	@ (8004eb8 <__libc_init_array+0x40>)
 8004e8a:	4c0c      	ldr	r4, [pc, #48]	@ (8004ebc <__libc_init_array+0x44>)
 8004e8c:	f000 f818 	bl	8004ec0 <_init>
 8004e90:	1b64      	subs	r4, r4, r5
 8004e92:	10a4      	asrs	r4, r4, #2
 8004e94:	2600      	movs	r6, #0
 8004e96:	42a6      	cmp	r6, r4
 8004e98:	d105      	bne.n	8004ea6 <__libc_init_array+0x2e>
 8004e9a:	bd70      	pop	{r4, r5, r6, pc}
 8004e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea0:	4798      	blx	r3
 8004ea2:	3601      	adds	r6, #1
 8004ea4:	e7ee      	b.n	8004e84 <__libc_init_array+0xc>
 8004ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eaa:	4798      	blx	r3
 8004eac:	3601      	adds	r6, #1
 8004eae:	e7f2      	b.n	8004e96 <__libc_init_array+0x1e>
 8004eb0:	08004ff4 	.word	0x08004ff4
 8004eb4:	08004ff4 	.word	0x08004ff4
 8004eb8:	08004ff4 	.word	0x08004ff4
 8004ebc:	08004ff8 	.word	0x08004ff8

08004ec0 <_init>:
 8004ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec2:	bf00      	nop
 8004ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec6:	bc08      	pop	{r3}
 8004ec8:	469e      	mov	lr, r3
 8004eca:	4770      	bx	lr

08004ecc <_fini>:
 8004ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ece:	bf00      	nop
 8004ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed2:	bc08      	pop	{r3}
 8004ed4:	469e      	mov	lr, r3
 8004ed6:	4770      	bx	lr
